"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[94063],{10446:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2023-kickoff","metadata":{"permalink":"/hubv2/blog/2023-kickoff","source":"@site/blog/2023-lcf/2023-01-25/01 - Kickoff.md","title":"It\'s a Low Code February!","description":"We are excited to announce the launch of #AiApril https://aka.ms/ai-april - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!","date":"2023-01-25T00:00:00.000Z","formattedDate":"January 25, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"kickoff","permalink":"/hubv2/blog/tags/kickoff"}],"readingTime":2.645,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-kickoff","title":"It\'s a Low Code February!","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30days-title.png","description":"We are excited to announce the launch of #AiApril https://aka.ms/ai-april - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","kickoff"]},"nextItem":{"title":"1. Hello, 30DaysOfLowCode!","permalink":"/hubv2/blog/2023-day1"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-kickoff\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"5. Week 1 - Recap\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"We are excited to announce the launch of #AiApril https://aka.ms/ai-april - a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30days-title.png\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-kickoff\\" />\\n</head>\\n\\n\\n## Welcome to Low Code February!\\n\\nFebruary is traditionally a month where we celebrate family, friends and loved ones - from Valentine\'s Day to Lunar New Year! We hope you also make this the month you fall in love with a new technology space - _low-code app development_ - and join us for a month of learning, making, and sharing!\\n\\n![#30DaysOfAzureAI Kickoff](./../../../static/img/og/30days-title.png)\\n\\nWe are excited to announce the **launch of #AiApril**, a month-long developer journey that will take you from app development tips, to fusion teams insights, and hands-on tutorials to skill you up on Power Platform, Microsoft Azure, and popular developer tools to enhance your productivity.\\n\\n## What will we cover?\\n\\nLet\'s talk about what you will learn in our developer journey this month. We have multiple initiatives in mind that can help you _learn_, _skill up_, _engage with experts_, _contribute to community_ and _watch videos_ at your own pace. \\n\\n![LCF Banner](../../../static/img/lcf-banner.png)\\n\\n1. The [**#30DaysOfAzureAI**](/blog) blog series helps you _learn_ by reading posts from experts, taking you on a 4-week journey from fundamentals, to application lifecycle managment - and cover developer tools and best practices along the way!\\n2. The [**#ZeroToHero**](/ai-april/ZeroToHero/) series captures blog posts directly from our product teams, sharing the latest features and tips for low code development.\\n3. The [**Dev Workshops**](/docs/intro/) page will learning tutorials and resources for all levels, from beginner to advanced.Learn how to build scalable apps, manage app lifecycle management with the Azure services and use popular Developer tools for enhanced productivity.  \\n4. The [**Cloud Skills Challenge**](https://aka.ms/ai-april/challenge) is a set of curated free, self-guided learning modules _focused on fusion teams and low-code development_. Complete them in #30Days and make the leaderboard!\\n5. The [**Video + Livestream**](/ai-april/Video-Live/) page showcases live events (e.g., AskTheExpert, LearnLive) and on-demand video shows (e.g., LowCode Revolution) and replays, to help you learn at your own pace. \\n6. The [**Community Buzz**](https://pnp.github.io/powerplatform-samples/) section connects you to peer community members. Share your samples and learn from 90+ real-world Power Platform examples shared by the community. And share your contributions with us via GitHub issues or with a [post on dev.to usingthe #powerfuldevs tag](https://dev.to/t/powerfuldevs).\\n \\n \\n## How can you participate?\\n\\nWant to get started on your low code development journey with us? Here are some actions you can take today:\\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/ai-april/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/ai-april/challenge) in the Cloud Skills Challenge and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 [**Save**](http://aka.ms/ai-april) the page to start your learning on Feb 1, and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates. \\n\\nReady to get started being a low-code developer, or a pro-dev supporting fusion teams and low code app development?\\n\\n\ud83c\udfc1 **#Lets Go!**\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Technologies used for fusion development](01%20-%20Kickoff.png)"},{"id":"2023-day1","metadata":{"permalink":"/hubv2/blog/2023-day1","source":"@site/blog/2023-lcf/2023-02-01/Feb01 - Hello.md","title":"1. Hello, 30DaysOfLowCode!","description":"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april","date":"2023-02-01T00:00:00.000Z","formattedDate":"February 1, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":3.985,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Justin Yoo","title":"Senior Cloud Advocate (.NET)","url":"https://github.com/justinyoo","imageURL":"https://github.com/justinyoo.png","key":"justin"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"},{"name":"Gomolemo Mohapi","title":"Cloud Advocate","url":"https://github.com/gomomohapi","imageURL":"https://github.com/gomomohapi.png","key":"gomolemo"},{"name":"Srikumar Nair","title":"Principal Group Program Manager","url":"https://github.com/MicroSri","imageURL":"https://github.com/MicroSri.png","key":"srikumar"},{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"},{"name":"Kartik Kanakasabesan","title":"Principal Program Manager","url":"https://github.com/kkanakas","imageURL":"https://github.com/kkanakas.png","key":"kartik"},{"name":"Sameer Chabungbam","title":"Principal Program Manager Lead","url":"https://github.com/schabungbam","imageURL":"https://github.com/schabungbam.png","key":"sameer"},{"name":"Taiki Yoshida","title":"Principal Program Manager","url":"https://github.com/taiki-yoshida","imageURL":"https://github.com/taiki-yoshida.png","key":"taiki"},{"name":"Marcel Ferreira","title":"Senior Program Manager","url":"https://github.com/marcelbf","imageURL":"https://github.com/marcelbf.png","key":"marcel"},{"name":"Evan Lew","title":"GPM, Power Apps (Ent. Platform)","url":"https://github.com/evanmlew","imageURL":"https://github.com/evanmlew.png","key":"evan"},{"name":"Casey Burke","title":"Principal Product Manager","url":"https://github.com/caburk","imageURL":"https://github.com/caburk.png","key":"casey"},{"name":"Linda Nichols","title":"Principal Solution Spec GBB","url":"https://github.com/lynnaloo","imageURL":"https://github.com/lynnaloo.png","key":"linda"},{"name":"Phil Topness","title":"Power CAT (Customer Advisory Team)","url":"https://github.com/topness-msft/","imageURL":"https://github.com/topness-msft.png","key":"phil"}],"frontMatter":{"slug":"2023-day1","title":"1. Hello, 30DaysOfLowCode!","authors":["sonja","april","matt","nitya","justin","daniel","gomolemo","srikumar","julia","kartik","sameer","taiki","marcel","evan","casey","linda","phil"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["lowcode-february","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-01.png","description":"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"It\'s a Low Code February!","permalink":"/hubv2/blog/2023-kickoff"},"nextItem":{"title":"2. You say Low, I say Code!","permalink":"/hubv2/blog/2023-day2"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day1\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Hello, 30DaysOfLowCode!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-01.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day1\\" />\\n</head>\\n\\nWelcome to `Day 01` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * Why Low-Code?\\n * Start low coding with Microsoft!\\n * The full Low-Code February lineup  \\n * **Exercise:** Take the [**Cloud Skills Challenge!**](https://learn.microsoft.com/training/challenges?id=464c05e3-f1ae-400f-b5df-2dcd5299d347&%3FWT.mc_id=javascript-82212-ninarasi)\\n * ** Resources:** Sign up for the free [**Power Apps Developer Plan!**](https://aka.ms/ai-april/devplan)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Post Banner](./../../../static/img/og/30-01.png)\\n\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n\\n## Why Low Code?\\n\\nAs the market for low-code platform continues to flourish (with projected growth this year of nearly 20% over 2022), now is the time to explore what it can mean for you. \\n\\n[**Low-code development**](https://powerapps.microsoft.com/what-is-low-code/?WT.mc_id=javascript-82212-ninarasi) are becoming more popular as businesses look for ways to modernize their IT infrastructure and generate more output in less time. \\n\\nDevelopers can focus on the creative aspects of app building while still taking advantage of powerful cloud computing technologies such as scalability, security, and reliability.\\n\\nStarting today, we invite you to spend a month getting the low-down on low-code development with an exciting series of tutorials, workshops, and interactive resources during [**#AiApril**](https://aka.ms/ai-april).\\n\\n## Start low coding with Microsoft\\n\\nWith [**Microsoft Power Apps**](https://powerapps.microsoft.com/?WT.mc_id=javascript-82212-ninarasi) you can quickly build custom apps with drag-and-drop tools and pre-built templates, making it easier to create powerful apps that are tailored for your needs.  Low-code development with Azure helps businesses accelerate their innovation cycle and make the most out of their data resources. \\n\\nLow-code app development through Microsoft Power Platform and Azure can be used to automate workflows, reduce manual efforts, and speed up the development process for building line-of-business apps at a lower cost.\\n\\nAccording to [**Forrester**](https://aka.ms/2022ForresterTEI), composite organizations experience benefits of **140% ROI** and **45% cost reduction** in app development when using Power Platform premium capabilities. The majority of users say Power Platform\u2019s premium capabilities increase revenue and offers faster solution quoting through better data integration. \\n\\nIn other words, with Power Platform you\u2019ll produce more and better code than before, with increased cost savings. That means developing more projects and delivering increased value to your clients. With low code, everyone wins!\\n\\n![Empty Banner Placeholder](./01%20-%20Kickoff.png)\\n\\n## The full Low-Code February lineup\\n\\nWe want to give developers the resources you need to enhance your knowledge and skill in low code. [**Low Code February**](https://aka.ms/ai-april) is a month-long celebration during which we\u2019ll help participants learn the nuts and bolts of low-code development. \\n\\nYou will have access to a series of hands-on workshops, self-guided learning courses, skill challengies, conversations with experts, and a community of fellow learners that will give you the necessary tools to start building in 30 days. \\n\\nAll throughout Low Code February we\u2019ll be running **6 hero initiatives** to help you get the most of your newfound knowledge:\\n\\n1. [**#30DaysOfAzureAI**](https://microsoft.github.io/Low-Code/ai-april/30Days/) blog series, during which developers can engage with a daily lesson and skill up on [Power Fx](https://learn.microsoft.com/power-platform/power-fx/overview?WT.mc_id=javascript-82212-ninarasi), [PCF](https://learn.microsoft.com/power-apps/developer/component-framework/overview?WT.mc_id=javascript-82212-ninarasi) (Power Component Framework), [ALM](https://learn.microsoft.com/power-platform/alm/overview-alm) (App Lifecycle Management?WT.mc_id=javascript-82212-ninarasi), [Azure DevOps](https://azure.microsoft.com/products/devops/?WT.mc_id=javascript-82212-ninarasi), [GitHub Actions](https://learn.microsoft.com/power-platform/alm/devops-github-actions?WT.mc_id=javascript-82212-ninarasi), and more. \\n\\n* [**#30DaysOfAzureAI**](https://microsoft.github.io/Low-Code/ai-april/30Days/?WT.mc_id=javascript-82212-ninarasi) \ud83d\udcc5 roadmap:\\n\\n* **Week 1\ufe0f\u20e3: Fundamentals** Kick off with a comprehensive introduction to low code with onboarding experience, tooling, developer stories and more.\\n* **Week 2\ufe0f\u20e3: Backend Integrations** Dive into the nitty-gritty of low-code development with topics like built-in connectors, dataverse, custom connectors, API management, and Azure integration. \\n* **Week 3\ufe0f\u20e3: User Interface** \\nPut your knowledge to the test by building a Canvas app, plus get an introduction to PowerFX, power component framework controls, and advanced use cases.\\n* **Week 4\ufe0f\u20e3: Dev Experience**\\nTake your skills to the next level with tutorials on ALM, GitHub Actions, app governance, Power Platform pipelines, and automated testing. \\n* **Week 5\ufe0f\u20e3: Wrap-up**\\n\\n2. [**#ZeroToHero**](/ai-april/ZeroToHero/) \ud83e\uddb8\u200d\u2640\ufe0f Get the latest updates on technologies and products for low code development directly from product teams.\\n3. [**Video + Livestream**](/ai-april/Video-Live/) \ud83d\udcfb Join online conversations with product teams and ask questions.  \\n4. [**Cloud Skills Challenge**](https://aka.ms/ai-april/challenge) \u2601\ufe0f Skill up on key cloud technologies with free, self-guided learning courses, and compete to make the leaderboard!\\n5. [**Dev Workshops**](/docs/intro/) \u2692\ufe0f Explore workshops in your own time as you work through various \\nfeatures or solutions in self-guided mode.\\n6. [**Community Buzz**](https://pnp.github.io/powerplatform-samples/?WT.mc_id=javascript-82212-ninarasi) \ud83d\udca1 Connect with the community and contribute your expertise by building interesting demos or writing articles.\\n\\n## Get started today!\\n\\nWant to get started on your low code development journey with us? Here are some actions you can take today:\\n\\n1. [**Sign up**](https://aka.ms/ai-april/devplan) for the free Power Apps Developer Plan. \ud83d\ude4c \\n2. [**Enroll**](https://aka.ms/ai-april/challenge) in the Cloud Skills Challenge and start climbing that leaderboard! \u2601\ufe0f\\n3. [**Save**](http://aka.ms/ai-april) the page and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates. \ud83d\udd16\\n\\n![Empty Banner Placeholder](./Feb01%20-%20Banner.png)"},{"id":"2023-day2","metadata":{"permalink":"/hubv2/blog/2023-day2","source":"@site/blog/2023-lcf/2023-02-02/02_YouSayLowISayCode.md","title":"2. You say Low, I say Code!","description":"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april. Today we talk about what Low Code means, and how Power Platform can help!","date":"2023-02-02T00:00:00.000Z","formattedDate":"February 2, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":4.535,"hasTruncateMarker":false,"authors":[{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"}],"frontMatter":{"slug":"2023-day2","title":"2. You say Low, I say Code!","authors":["april","matt"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["lowcode-february","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-02.png","description":"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april. Today we talk about what Low Code means, and how Power Platform can help!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"1. Hello, 30DaysOfLowCode!","permalink":"/hubv2/blog/2023-day1"},"nextItem":{"title":"3. DevTools & Onboarding","permalink":"/hubv2/blog/2023-day3"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day2\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"You say Low, I say Code!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Welcome to #AiApril! Join us for #30DaysOfAzureAI learning, skilling and discussions at https://aka.ms/ai-april. Today we talk about what Low Code means, and how Power Platform can help!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-02.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@aprildunnam\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day2\\" />\\n</head>\\n\\n\\nWelcome to `Day 02` of #30DaysOfAzureAI!\\n\\n\\n## What We\'ll Cover\\n * What is Low Code?\\n * How are the Benefits? \\n * What does Power Platform Provide?\\n * How can we extend Power Platform?\\n * **Activity**: Join the [Cloud Skills Challenge](https://aka.ms/ai-april/challenge)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![You say Low, I say Code!](./../../../static/img/og/30-02.png)\\n\\n\\n## You say Low, I say Code!\\n\\nThere is a low code revolution underway. We have a surging digital demand with an estimated 500 million more apps that will need to be created in the next 5 years. More and more companies are leveraging low code and no code platforms to bridge this app gap and address workflow and automation needs. In fact, Gartner estimates that 65% of application development will be low code by 2024.\\n\\nWith low code tools like the Power Platform making it easier for business technologists to develop solutions, you might wonder if there\'s any room for a code first developer in this low code revolution. Well, the answer is, absolutely there is! In fact, code first developers are a critical piece to the puzzle.\\n\\n## What is \\"low code\\"?\\n\\nThe term \\"low code\\" can mean different things to different people when they first hear it. What we mean when we talk about low code is that with tools like Power Apps, you only need to write a small amount of code to get results that would normally take several more lines of code in a traditional programming language.\\n\\n![What is Low Code](./02_WhatIsLowCode.png)\\n\\nIn canvas-based Power Apps, the low code scripting language used is called [Power Fx](https://aka.ms/LearnPowerFx). This language is based on the Microsoft Excel formula language which meets many business technologists where they are by leveraging the knowledge they already have.\\n\\n## Low Code + Full Code = No Cliffs\\n\\nUsing low-code tools is key to helping to resolve the existing and impending app gap challenge but that doesn\'t mean that low code alone can solve every business problem. Low code tools like the Power Platform\'s full potential is unlocked when you combine the low code capabilities with code first development.\\n\\nThe combination of low code + full code creates what we call a \\"no cliffs\\" experience that allows business technologists to easily build solutions with low code while professional developers can leverage full code to augment and extend the platform capabilities. The process of low code developers, IT pros and full code developers working together like this is often referred to as \\"fusion development\\".\\n\\n![Fusion Development Process](./02_FusionDevProcess.png)\\n\\n## What does the Power Platform Provide?\\n\\nThe Power Platform gives us a holistic suite of low code tools that work together to help us solve business problems. The key products and components of the Power Platform include:\\n\\n* **Power Apps** for creating custom applications for web and mobile that can be integrated with a variety of systems and services.\\n* **Power Automate** for automation tasks and orchestrating activities across various services\\n* **Power BI** for business analytics and interactive data visualization\\n* **Power Virtual Agents** for creating AI-powered chatbots that can answer questions from your customers and employees\\n* **Power Pages** for secure, enterprise-grade external-facing business websites\\n* **Dataverse** which provides a cloud scale data store with robust security that abstracts away data management complexity from the app maker\\n\\n![Power Platform Overview](./02_PowerPlatformOverview.png)\\n\\n## How can we extend Power Platform solutions?\\n\\nYou might wondering how you can leverage your code first skills with the Power Platform. Let\'s take a look at some ways that we can extend our Power Platform solutions with code (many of these concepts will be covered in more detail in later blog posts).\\n\\n* **UI Components** - Leverage the [Power Apps Component Framework](https://aka.ms/LowCodePCF) to extend the UI of our applications with custom code.\\n* **Custom Connectors** - Create [custom connectors](https://aka.ms/LowCodeCustomConnectors), which are essentially a wrapper around an API to communicate to our external data sources and services.\\n* **Custom Visuals in Power BI** - Use the open-source SDK to create [custom visuals](https://aka.ms/LowCodeCustomVisuals) for your reports and dashboards\\n* **Custom Business Logic** - Extend the [Dataverse API](https://aka.ms/LowCodeDataverseAPI) with your own custom API that implements your business logic\\n* **Add CI/CD** - Setup continuous integration and continuous deployment ([CI/CD](https://aka.ms/LowCodeALM)) with your Power Platform solutions\\n\\n![Power Platform Pro Dev extensions](./02_Extend.png)\\n\\n## What\'s next?\\n\\nIn the next series of posts you\'ll learn more about some of these core concepts and extension points. \\n\\nIf all of this sounds intriguing and you want to get started on your low code development journey, here are some actions you can take:\\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/ai-april/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/ai-april/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 [**Save**](http://aka.ms/ai-april) the page to start your learning on Feb 1, and [**Subscribe**](https://microsoft.github.io/Low-Code/blog/rss.xml) to the blog in your favorite feed reader for updates.\\n\\n## Resources\\n* [Introduction to the Power Platform](https://learn.microsoft.com/training/modules/introduction-power-platform//?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform EBook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform Learning Path](https://learn.microsoft.com/training/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-82212-apdunnam)\\n* [Learn Collection: LowCode February](https://aka.ms/ai-april/collection)\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day3","metadata":{"permalink":"/hubv2/blog/2023-day3","source":"@site/blog/2023-lcf/2023-02-03/01 - Get onboard with Power Platform.md","title":"3. DevTools & Onboarding","description":"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!","date":"2023-02-03T00:00:00.000Z","formattedDate":"February 3, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":2.68,"hasTruncateMarker":false,"authors":[{"name":"Marcel Ferreira","title":"Senior Program Manager","url":"https://github.com/marcelbf","imageURL":"https://github.com/marcelbf.png","key":"marcel"}],"frontMatter":{"slug":"2023-day3","title":"3. DevTools & Onboarding","authors":["marcel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform"],"image":"https://microsoft.github.io/Low-Code/img/og/30-03.png","description":"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"2. You say Low, I say Code!","permalink":"/hubv2/blog/2023-day2"},"nextItem":{"title":"4. \ud83d\ude80 Developer Stories","permalink":"/hubv2/blog/2023-day4"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day3\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"3. DevTools & Onboarding\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how you can get onboard with Power Platform by signing up forthe Power Apps Developer Plan!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-03.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day3\\" />\\n</head>\\n\\nWelcome to `Day #03` of #30DaysOfAzureAI!\\n\\n\\n## What We\'ll Cover\\n * Get onboard with Power Platform\\n * Sign up for the Power Apps Developer Plan\\n * Get familiar with the tools\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Developer Tools and Onboarding](./../../../static/img/og/30-03.png)\\n\\n\\n## Get onboard with Power Platform!\\n\\nI\'m excited to announce that now you can create up to 3 developer environments with the Power Apps Developer Plan! Let\'s take this opportunity to review how to get a free environment to get started.\\n\\n## Sign up for the Power Apps Developer Plan\\n\\nThe Power Apps Developer Plan gives you a free development environment to build and test with Power Apps, Power Automate, and Microsoft Dataverse.\\nIt just takes a few minutes to get a developer environment for Power Platform:\\n\\n1. Ensure that you have a work account. If you don\'t,\xa0you can [create a test tenant first.](#do-i-need-a-test-tenant)\\n2. Sign up on the\xa0[Power Apps Developer Plan website](https://aka.ms/ai-april/devplan).\\n3. Once the sign up is complete, you will be redirected to your new developer environment.\\n\\n![Power Apps Developer Plan - sign up process](01%20-%20devplan%20signup.gif)\\n*Power Apps Developer Plan - sign up process*\\n\\n### Do I need a test tenant?\\n\\nIn an ideal world you would use your existing work account to sign up for the Power Apps Developer Plan. If you already have an Azure account, you likely can use the same account to sign up. If this is not possible for any reason, you can create a free test tenant using the [Microsoft 365 Developer Program](https://learn.microsoft.com/power-platform/developer/create-developer-environment#how-to-create-a-test-tenant).\\n\\n## Get familiar with the tools\\n\\nAfter the sign up you will be in the [https://make.powerapps.com](https://make.powerapps.com) and your environment will be ready to use. You can start creating your first Power App.\\n\\nIf you would like to create more environments or manage your environment, visit the [Power Platform Administrator Center.](https://aka.ms/ppac)\\n\\n![Create new environments in the Power Platform Admin Center](01%20-%20devplan%20PPAC.gif)\\n*Create new environments in the Power Platform Admin Center*\\n\\nIf you are a code first developer, you can use the Power Platform CLI to manage your environments, create code first components and much more. The best way to get our CLI is to download the [Visual Studio Code extension.](https://learn.microsoft.com/power-platform/developer/cli/introduction)\\n\\n![Power Platform Tools for Visual Studio Code](01%20-%20devplan%20CLI.gif)\\n*Power Platform Tools for Visual Studio Code*\\n\\n## What\'s next?\\n\\nAre you a code first developer? To understand how Power Platform can make you more productive and how you can use code to extend the platform, check the [Introduction to Microsoft Power Platform for developers](https://learn.microsoft.com/power-platform/developer/get-started).\\n\\n* For detailed information on the Power Apps Developer plan: [Sign up for Power Apps Developer Plan](https://learn.microsoft.com/power-apps/maker/developer-plan)\\n\\n* For detailed information on licensing: [Licensing overview for Microsoft Power Platform](https://learn.microsoft.com/power-platform/admin/pricing-billing-skus)\\n\\nHappy coding \ud83c\udf89.\\n\\n## Resources\\n* [Introduction to the Power Platform](https://learn.microsoft.com/training/modules/introduction-power-platform//?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform EBook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=power-82212-apdunnam)\\n* [Fusion Development with Power Platform Learning Path](https://learn.microsoft.com/training/paths/transform-business-applications-with-fusion-development/?WT.mc_id=power-82212-apdunnam)\\n* [Learn Collection: LowCode February](https://aka.ms/ai-april/collection)\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day4","metadata":{"permalink":"/hubv2/blog/2023-day4","source":"@site/blog/2023-lcf/2023-02-04/index.md","title":"4. \ud83d\ude80 Developer Stories","description":"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..","date":"2023-02-04T00:00:00.000Z","formattedDate":"February 4, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":2.13,"hasTruncateMarker":false,"authors":[{"name":"Sameer Chabungbam","title":"Principal Program Manager Lead","url":"https://github.com/schabungbam","imageURL":"https://github.com/schabungbam.png","key":"sameer"},{"name":"Taiki Yoshida","title":"Principal Program Manager","url":"https://github.com/taiki-yoshida","imageURL":"https://github.com/taiki-yoshida.png","key":"taiki"},{"name":"Phil Topness","title":"Power CAT (Customer Advisory Team)","url":"https://github.com/topness-msft/","imageURL":"https://github.com/topness-msft.png","key":"phil"}],"frontMatter":{"slug":"2023-day4","title":"4. \ud83d\ude80 Developer Stories","authors":["sameer","taiki","phil"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["developer stories","zero-to-hero","power platform","low code development","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-04.png","description":"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"3. DevTools & Onboarding","permalink":"/hubv2/blog/2023-day3"},"nextItem":{"title":"5. Recap - Fundamentals Week \u2728","permalink":"/hubv2/blog/2023-day5"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day4\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"4. Developer Stories\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Software developers around the world are embracing low-code as a powerful part of their toolkit \u2014 let\'s meet some of the developers and organizations and hear their stories..\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-04.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day4\\" />\\n</head>\\n\\nWelcome to `Day 04` of #30DaysOfAzureAI!\\n\\nToday we celebrate all the developers and organizations who make the low code ecosystem successful.\\n\\n## What We\'ll Cover\\n * About Zero To Hero\\n * Meet The Developers\\n * Meet The Organizations\\n * Solution Architecture Examples\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n\\n![#30DaysOfAzureAI Developer Stories](./../../../static/img/og/30-04.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## About Zero To Hero\\n\\nDid you know we had a [dedicated Zero To Hero page](/ai-april/ZeroToHero) on this site? It\'s our page for amplifying news, articles and updates on technologies and products for low code development - directly from product teams! Here\'s what that page look like. Click on any article to visit the _original_ content on the Product Group blog. Or click the **tag** under a post (e.g., `Announcements`) to view _all_ posts for that category.\\n\\n![](./zero-to-hero.png)\\n\\n## Meet The Developers\\n\\nMeet featured developer **Gini Brandon** and watch her as she shares her journey of adopting low-code as a professional developer! In the video, Gini talks about her journey graduating with a computer science degree, how she\u2019s been able to increase efficiency using Power Platform, why she believes low code is the future of development, and how you can get started.\\n\\n\u2728 Read It Now: [**Meet developers combining Power Platform and Azure to go faster**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/)\\n\\n[![](https://powerappsblogscdn.azureedge.net/wp-content/uploads/2023/02/ginibrandon_cover-1024x576.png)](https://www.youtube.com/watch?v=OrWDTi8GVfM)\\n\\n## Meet The Organizations\\n\\nOrganizations around the globe have adopted Microsoft Power Platform along with Azure and Dynamics 365 to build flagship applications and establish centers of excellence to scale adoption and impact of low-code solutions.\\n\\n\u2728 Read It Now: [**Meet The Organizations**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/#meet-organizations)\\n\\n## Solution Architecture Examples\\n\\nExplore a few real-world solution architecture examples that show how low-code capabilities in Power Platform are used in conjunction with code-first programming patterns and capabilities in Microsoft Azure. Here are just a subset of those stories:\\n * Rabobank \u2013 Scaling adoption across the organization \\n * EY \u2013 Loan forgiveness portal\\n * Blackmores Group \u2013 Enabling rapid development of new products\\n * IKEA Sweden \u2013 Reimagining the customer experience\\n * Western States Caterpillar: Mobile apps for the field\\n\\n\u2728 Read It Now: [**Solution Architecture Examples**](https://powerapps.microsoft.com/blog/meet-the-developers-combining-power-platform-and-azure-to-go-faster/#architecture-examples)"},{"id":"2023-day5","metadata":{"permalink":"/hubv2/blog/2023-day5","source":"@site/blog/2023-lcf/2023-02-05/index.md","title":"5. Recap - Fundamentals Week \u2728","description":"Let\'s recap Week 1 of #30DaysOfAzureAI focused on #PowerPlatform Fundamentals - join us at #AiApril https://aka.ms/ai-april","date":"2023-02-05T00:00:00.000Z","formattedDate":"February 5, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"recap","permalink":"/hubv2/blog/tags/recap"}],"readingTime":4.275,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-day5","title":"5. Recap - Fundamentals Week \u2728","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30-05.png","description":"Let\'s recap Week 1 of #30DaysOfAzureAI focused on #PowerPlatform Fundamentals - join us at #AiApril https://aka.ms/ai-april","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","recap"]},"prevItem":{"title":"4. \ud83d\ude80 Developer Stories","permalink":"/hubv2/blog/2023-day4"},"nextItem":{"title":"6. Let\'s Make Some Connections!","permalink":"/hubv2/blog/2023-day6"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day5\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"5. Week 1 - Recap\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s recap Week 1 of #30DaysOfAzureAI focused on #PowerPlatform Fundamentals - join us at #AiApril https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-05.png\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day5\\" />\\n</head>\\n\\nWelcome to `Day 05` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * **Look Back**: Recap Fundamentals Week\\n * **Self-Study**: Resources to dive deeper\\n * **Look Ahead**: It\'s Integrations Week!\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![#30DaysOfAzureAI Week 1 Recap](./../../../static/img/og/30-05.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n\\n## Look Back: Week 1 Recap\\nWow, Low Code February is a hit! We\'ve had **40k+ visits** to our website campaign and **1400+ of you** signed up to take the Cloud Skills Challenge and _skill yourself on all things low code_! This is incredible and we\'re super honored to have built something that you, the community, have found valuable! We know that we couldn\'t have gone so far without the support from everyone of you who\'s reading this blog right now. THANK YOU! \u2764\ufe0f\\n\\n![Week 1 Roadmap](./../../../static/img/og/30-roadmap-week1.png)\\n\\nHere are the highlights for week 1. If you\'re just joining us, welcome!! It\'s not too late to get started learning and skilling up, with two core activities:\\n \\n1. [**Cloud skills Challenge**](https://aka.ms/ai-april/challenge) - gives you a free curated set of learning modules to jumpstart your learning journey into Low Code and Fusion development. Get building amazing Power Platform solutions using pro-code tools and frameworks. Register now and get on the leaderboard!\\n\\n2. [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog) - gives you daily blog posts from experts. We started this week with a look at **Power Platform fundamentals** (core concepts) and ended it with a look at **Developer Stories** celebrating our low-code and code-first developer communities with real-world case studies.\\n    * \ud83e\udd47 First time hearing the term _low-code_ and want to learn how it helps in your day-to-day work? Read [**You say Low, I say Code!**](https://microsoft.github.io/Low-Code/blog/2023-day2) for a quick introduction. \\n    * \ud83c\udd95 Never used _Power Platform before_? Read [**DevTools & Onboarding**](http://localhost:3000/Low-Code/blog/2023-day3) to get full onboarding guidance, and setup your development environment for success!\\n    * \ud83d\ude80 Want to hear stories from your peers, and understand why more and more code-first developers have turned to low-code and embrace the technology in their daily work? Read [**Developer Stories**](https://aka.ms/ai-april/blog/PowerForPros) posted by our amazing Power Platforms PM team at [**ZeroToHero**\ud83d\ude80](https://aka.ms/ai-april/0ToHero).\\n\\n\\n## Self-Study: Resources\\nDon\'t have the time to follow day by day? Here\'re 3 self-study materials that you should know about to help you learn at your own pace: \\n1. [**Resource Collection**](https://aka.ms/ai-april/collection): Bookmark the collection for a 1-stop resource containing all relevant links to documentation and training, as covered in the #30DaysOfAzureAI blogs. \\n2. [**Hands-on Workshops**](https://aka.ms/ai-april/workshop): learn by doing! These labs help you gain hands-on experience from intro to advanced, whereever you\'re in the learning path. \\n3. [**Ask The Experts!**](http://localhost:3000/Low-Code/ai-april/Video-Live#ask-the-experts): get your questions answered! Pick a time that works best for you and enjoy a face to face discussion with our leaderships:\\n    1. \ud83c\udf99 [**Feb 23, 9AM PST**](https://aka.ms/ATE0223/RSVP ) - Join this session for Q&A from the **Powerful Devs Conference** team. The Powerful Devs Conference focuses on showcasing how code first developers can integrate with the Power Platform to innovate faster. We will have experts on hand to answer questions about full code and low code integration.\\n    2. \ud83c\udf99 [**Mar 09, 9AM PST**](https://aka.ms/ATE0309/RSVP) - Join this session for Q&A from the **Low Code February** team, including authors of this #30DaysOfAzureAI series. We will have experts in code-first integration with the Power Platform live to answer questions related to the content and cloud skills challenge of the Low Code February event.\\n4. [**Learn Live!**:](https://aka.ms/ai-april/LearnLive) Have questions for Microsoft Learn modules or the cloud skills challenge? Join our **Learn Live** sessions to hear tips and commentary from experts:\\n* 1\ufe0f\u20e3 [**Feb 06**](https://aka.ms/ai-april/LearnLive) - Low code as a traditional developer\\n* 2\ufe0f\u20e3 [**Feb 13**](https://aka.ms/ai-april/LearnLive) - Integrate OpenAPI-enabled Web APIs with Azure API Management\\n* 3\ufe0f\u20e3 [**Feb 27**](https://aka.ms/ai-april/LearnLive) - Manage Microsoft Power Platform deployments\\n ![Feb5 Banner](./LearnLive.png)\\n\\n\\n## Feb 15: PowerfulDevs Conf\\n\\nDo you know the [**Powerful Dev Conf**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) happens in just 10 days, on **Feb 15**? It\'s a signature 2-hour event where you can hear from many of the experts, including authors from this series, on the features and usage of the Power Platform! Check out the great speaker lineup below and visit [the site](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) to see the scheduled sessions.\\n\\n![Feb5 Banner](./PowerFulDev.png)\\n\\n:::info REGISTER NOW - IT\'S FREE & ONLINE!\\n * [**Sign up**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) for a reminder and link to the livestream.\\n * Then #SaveTheDate and join us **Feb 15**\\n:::\\n\\n\\n## Look Forward: Week 2 Plan\\n\\nDon\'t forget to bookmark the [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog) page and come back tomorrow, where we will cover everything you need to know about Power Platform Backend Integrations in week 2. \\n\\nFrom utilizing built-in connectors to building custom connectors, integrating with backend data source, and creating serverless apps. We will showcase the latest functionalities we have, help you learn with tutorials, demos, and real world best practices that you can apply to your business immediately. \\n\\n![Week 2 Roadmap](./../../../static/img/og/30-week2.png)"},{"id":"2023-day6","metadata":{"permalink":"/hubv2/blog/2023-day6","source":"@site/blog/2023-lcf/2023-02-06/06_Connectors.md","title":"6. Let\'s Make Some Connections!","description":"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!","date":"2023-02-06T00:00:00.000Z","formattedDate":"February 6, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":4.5,"hasTruncateMarker":false,"authors":[{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day6","title":"6. Let\'s Make Some Connections!","authors":["april","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors"],"image":"https://microsoft.github.io/Low-Code/img/og/30-06.png","description":"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"5. Recap - Fundamentals Week \u2728","permalink":"/hubv2/blog/2023-day5"},"nextItem":{"title":"7. Dataverse - Do more with Data, for less!","permalink":"/hubv2/blog/2023-day7"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day6\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"6. Let\'s Make Some Connections!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn about Power Platform\'s ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-06.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day6\\" />\\n</head>\\n\\nWelcome to `Day #06` of #30DaysOfAzureAI!\\n\\n\\nOne of the things that makes the Power Platform so powerful (pun intended) is its ability to seamlessly pull in and interact with data from a variety of 1st and 3rd party services. This integration with other services is done through Connectors - the building blocks of the Power Platform.\\n\\n## What We\'ll Cover\\n * What is a Connector?\\n * Connectors Components\\n * Custom Components\\n * Certifying a Connector\\n * **Activity**: Sign up for your [Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n\\n![Developer Tools and Onboarding](./../../../static/img/og/30-06.png)\\n\\n\\n## What is a Connector?\\n\\n A connector is a wrapper around an API that allows the underlying service to talk to the Power Platform. It\'s essentially a proxy that provides a way for users to connect their accounts and leverage a set of prebuilt actions and trigger to integrate the services with their apps and workflows.\\n\\nThe Power Platform offers a large ecosystem of software as a service connectors that enable you to connect apps, data and devices in the cloud. Some examples of popular connectors are Office 365, Outlook, Dropbox, Salesforce, Google Services and many many more.\\n\\n![Connector Architecture](./06_ConnectorsList.png)\\n\\nThere are hundreds of prebuilt connectors available to use in Power Apps, Power Automate and Logic Apps. You can see a list of all of the connectors available here: [https://learn.microsoft.com/connectors/connector-reference/](https://learn.microsoft.com/connectors/connector-reference/)\\n\\n## Connectors Components\\n\\nEvery connector offers action and trigger operations. Let\'s explore each of those further.\\n\\n**Actions** are changes that are directed by a user. An action can be used to perform standard CRUD (create, read, update and delete) operations in a data source like a SQL database. Each of these actions directly map to operations defined in the OpenAPI definition for the connector.\\n\\n**Triggers** allow you to kick off interaction with your connector when specific events occur. For example, the SharePoint connector has a trigger for when a new file is added and the Outlook connector has a trigger for when an email is received. You can build a Logic App or flow in Power Automate that listens to this trigger and performs an action whenever the trigger fires. Triggers are unique to Power Automate and Logic Apps and can\'t be used inside of Power Apps.\\n\\nThere are two types of triggers:\\n\\n* **Polling Triggers** which call your service at specified intervals to check for new data. When that new data is available, it causes a new run of your workflow instance with the data as an input.\\n* **Push Triggers** which wait for an event to occur that then causes a new run of your workflow instance.\\n\\n## Custom Connectors\\n\\nThe amount of out-of-the-box connectors for the Power Platform is growing every day, but sometimes you might want to call API\'s, services and systems that aren\'t available as prebuilt connectors. To support this need, you can build custom connectors that have their own triggers and actions.\\n\\nA connector is simply a wrapper around an API which means you can take any RESTful API that is defined in OpenAPI (Swagger) and make that accessible to the Power Platform with a custom connector.\\n\\n![Connector Architecture](./06_ConnectorArchitecture.png)\\n\\nYou can build custom connectors to connect to both public and private API\'s.\\n\\nConnections to private API\'s are possible with the [on-premises data gateway](https://learn.microsoft.com/flow/gateway-reference).\\n\\nFor public API\'s that you want to create and manage, you might considering leveraging Azure products like [Azure Functions](https://azure.microsoft.com/services/functions/), [Azure Web Apps](https://azure.microsoft.com/services/app-service/web/) or [Azure API Apps](https://azure.microsoft.com/services/app-service/api/).\\n\\nCustom connectors can either be used internally within your organization or you can get your connector certified so that it\'s publicly accessible for anyone in the world using the Power Platform and Logic Apps.\\n\\n## Certifying a Connector\\n\\nIf you want to make your custom connector publicly available you have to go through a certification process where Microsoft reviews the connector to see if it meets certification criteria and approves it for publishing.\\n\\nThere are two options when it comes to getting a connector certified:\\n\\n* **Verified Publisher** - To be eligible to get certified as a verified publisher, you must own the underlying service behind the connector.\\n* **Independent Publisher** - This gives you a chance to get your connector certified if you do not own the underlying service behind it.\\n\\nThe processes for certification vary depending on which option you qualify for. You can learn more about the process for getting your connector certified here:\\n\\n* [Independent publisher certification process](https://learn.microsoft.com/connectors/custom-connectors/certification-submission-ip)\\n* [Verified publisher certification process](https://learn.microsoft.com/connectors/custom-connectors/certification-submission)\\n\\n## What\'s next?\\n\\nStay tuned for the rest of this week\'s blog posts to dive deeper into the world of connectors and backend integrations.  \\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/ai-april/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/ai-april/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 Connectors will also be highlighted at the Powerful Devs Conference so be sure to [**Sign up**](https://aka.ms/ai-april/PowerfulDevsConf2023) for the free virtual event!\\n\\n## Resources\\n* [Introduction to the Power Platform](https://aka.ms/LowCodePowerPlatformIntro)\\n* [Fusion Development with Power Platform EBook](https://aka.ms/FusionDevEbook)\\n* [Fusion Development with Power Platform Learning Path](https://aka.ms/learn-fusiondev)"},{"id":"2023-day7","metadata":{"permalink":"/hubv2/blog/2023-day7","source":"@site/blog/2023-lcf/2023-02-07/index.md","title":"7. Dataverse - Do more with Data, for less!","description":"Learn how to do more with your data for less using Microsoft Dataverse!","date":"2023-02-07T00:00:00.000Z","formattedDate":"February 7, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":7.025,"hasTruncateMarker":false,"authors":[{"name":"Srikumar Nair","title":"Principal Group Program Manager","url":"https://github.com/MicroSri","imageURL":"https://github.com/MicroSri.png","key":"srikumar"}],"frontMatter":{"slug":"2023-day7","title":"7. Dataverse - Do more with Data, for less!","authors":["srikumar"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors"],"image":"https://microsoft.github.io/Low-Code/img/og/30-07.png","description":"Learn how to do more with your data for less using Microsoft Dataverse!","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"6. Let\'s Make Some Connections!","permalink":"/hubv2/blog/2023-day6"},"nextItem":{"title":"8. Serverless Low Code","permalink":"/hubv2/blog/2023-day8"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day7\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"7. Manage your data with Dataverse!\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how to do more with your data for less using Microsoft Dataverse!\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-07.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day7\\" />\\n</head>\\n\\n\\n\\nWelcome to `Day 07` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * What is Dataverse?\\n * Under The Hood: Features\\n * Built-in Integrations: Azure\\n * Enterprise-ready: Hyperscale\\n * Resource: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n * Activity: Learn more about [Dataverse!](https://aka.ms/Dataverse) \\n\\n\\n![Low Code and Dataverse](./../../../static/img/og/30-07.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\nMicrosoft Dataverse is a SaaS data platform that helps you ***easily create and manage your data, events, logic, and generate analytics, and insights to support interconnected apps and processes in a secure and compliant manner***. Dataverse, being a hyperscale polyglot storage, can store any type of data (relational, file, observational etc.) for all your transactional or analytical applications. Dataverse is the data platform for all Power Platform products and Dynamics 365 applications, supporting both low-code and pro-code development. It is a critical element of Microsoft Power Platform, supporting all the data, events, analytics, and related processing, besides generating insights for citizen app makers and professional developers to build, store and manage data for their applications. \\n\\n![Figure 1: Microsoft Dataverse and Power Platform](./DataverseRunsOnAzure.png)\\n*Figure 1: Microsoft Dataverse and Power Platform*\\n\\nAll these diverse types of data, in Dataverse, are represented externally as tables, which not only makes it easy for citizen developers to use it as excel but also accelerates design and development time and cost, for professional developers .Dataverse includes a base set of standard tables that cover typical scenarios, also known as [Common Data Model (CDM)](https://learn.microsoft.com/common-data-model/?WT.mc_id=javascript-82212-ninarasi), but you can also customize or create new custom tables specific to your needs.\\n\\n## Dataverse -Under the hood \\nDataverse enables integrated, intelligent systems of action of the data that is stored. Dataverse achieves this by leveraging Azure services, so it is built on Azure and extends with Azure. \\n\\n ![Figure 2: Microsoft Dataverse and Power Platform](./DataverseRunsOnAzure.png)\\n\\n*Figure 2: Microsoft Dataverse Runs on Azure & Extends with Azure*\\n\\nAll the building blocks of Dataverse i.e., storage, compute and insights are built on Azure. Similarly, if you need to extend the functionality, you can leverage your existing investments in Azure to augment your customer requirements. \\n\\n## Why Dataverse? ##\\nMicrosoft Dataverse is much more than a database because it provides a managed SaaS data platform experience for citizen developers and professional developers to build, store, and manage data for their applications. It also provides a rich and intelligent computing layer to integrate and act on these diverse types of data through [a rich API layer](https://learn.microsoft.com/power-apps/developer/data-platform/webapi/overview/?WT.mc_id=javascript-82212-ninarasi), besides providing analytics and generating insights. \\n\\nLet\u2019s look at some of these salient features of Dataverse. \\n\\n### Enables low-code and pro-code integration of external data\\n\\nDataverse provides an ability to use out of the box power of Power Query via [Power Platform Data Flows](https://learn.microsoft.com/power-query/dataflows/create-use/?WT.mc_id=javascript-82212-ninarasi), [Azure Data Factory](https://learn.microsoft.com/azure/data-factory/connector-dynamics-crm-office-365?tabs=data-factory/?WT.mc_id=javascript-82212-ninarasi)(ADF) and [Web API](https://learn.microsoft.com/power-apps/developer/data-platform/webapi/perform-operations-web-api/?WT.mc_id=javascript-82212-ninarasi) to enable low-code and pro-code developers to integrate external data with Dataverse. With few clicks, users can have a quick start experience to get the data from multitude of data sources specifically from Azure resources into Dataverse with rich, intuitive user experience. Pro dev deeply familiar with data transformations can extend queries and author complex transformations for both ADF and Power Query. A splendid example of using Dataverse data to create reports can be found [here](https://learn.microsoft.com/power-apps/maker/data-platform/data-platform-powerbi-connector?tabs=Dataverse/?WT.mc_id=javascript-82212-ninarasi). Another powerful feature about data integration with Dataverse is the introduction of Virtual Tables in Dataverse which allows you to integrate external data without moving it physically into Dataverse. With this new experience, you can create virtual tables from SharePoint and SQL without any code, and without leaving the maker portal. In minutes, you can set up your connection, pick your SharePoint Site or SQL Database, select your SharePoint List or SQL Table, and your virtual table will appear in table hub within [Maker experience](https://make.powerapps.com) ready to use.\\n\\n  ![Figure 3: Creating a Virtual Table in Microsoft Dataverse](./VT_SQL_short_221215_small.gif)\\n*Figure 3 : Creating a Virtual Table in Microsoft Dataverse* \\n\\nYou can try it out for yourself using this detailed [information](https://powerapps.microsoft.com/blog/virtual-tables-creation-wizard-now-in-public-preview/?WT.mc_id=javascript-82212-ninarasi) \\nAdditional Info: [Virtual tables in Dataverse](https://www.youtube.com/watch?v=viRTtGEZXNE&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=2&ab_channel=MicrosoftPowerPlatform)\\n\\n### Advanced business logic, eventing, analytics, and insights at no additional cost \\nBesides Web API, Dataverse also provides several advanced business logic and eventing features like [calculated fields and rollups](https://learn.microsoft.com/power-apps/developer/data-platform/calculated-rollup-attributes/?WT.mc_id=javascript-82212-ninarasi), and automatic [duplicate detection](https://learn.microsoft.com/power-platform/admin/detect-duplicate-records/?WT.mc_id=javascript-82212-ninarasi) along with powerful built-in AI, Analytics through Power BI, Azure Cognitive Services and [AI Builder](https://learn.microsoft.com/power-apps/use-ai-builder/?WT.mc_id=javascript-82212-ninarasi). Dataverse allows pro-code extensibility via [plug-ins](https://learn.microsoft.com/power-apps/developer/data-platform/plug-ins/?WT.mc_id=javascript-82212-ninarasi) and low code extensibility using Power FX, like [formula columns](https://learn.microsoft.com/power-apps/maker/data-platform/formula-columns/?WT.mc_id=javascript-82212-ninarasi).\\n\\nAdditionally, there is built-in integration with Azure - With a few clicks, you can use [Azure Synapse Link for Dataverse](https://learn.microsoft.com/power-apps/maker/data-platform/export-to-data-lake/?WT.mc_id=javascript-82212-ninarasi) to bring your Dataverse data to Azure Synapse, visualize data in your Azure Synapse workspace, and rapidly start processing the data to discover insights using advanced analytics capabilities for serverless data lake exploration, code-free data integration, data flows for extract, transform, load (ETL) pipelines, and optimized Apache Spark for big data analytics. [Here](https://cloudblogs.microsoft.com/powerplatform/2021/05/26/accelerate-time-to-insight-with-azure-synapse-link-for-dataverse/) is how you can accelerate time to insight with Azure Synapse Link for Dataverse. \\n\\nHere is another glimpse into doing more with [analytics using Dataverse](https://www.youtube.com/watch?v=UNMYSEN3VeI&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=50&ab_channel=MicrosoftPowerPlatform)\\n\\nAll these features are built-in into Dataverse and hence you do not have to spend any additional time or money managing additional compute services outside Dataverse platform which helps in bringing down the total cost of ownership for an end-to-end business solution.\\n\\n### Providing data residency and compliance while scaling globally.\\nDataverse serves customers in 18 distinct geographic locations like Asia Pacific, Canada, Switzerland, France, Germany, UK, India, Japan, China, Korea, Norway, Australia, South America, Singapore, UAE, South Africa, North America, Europe and expanding to more regions. To help your organization comply with national, regional, and industry-specific requirements governing the collection and use of individuals\u2019 data, Dataverse provides a comprehensive set of compliance offerings which you can find [here](https://learn.microsoft.com/power-platform/admin/wp-compliance-data-privacy/?WT.mc_id=javascript-82212-ninarasi).The latest availability information can be found in [Product Availability by Geography](https://powerplatform.microsoft.com/availability-reports/georeport/?WT.mc_id=javascript-82212-ninarasi) under Power Apps product, since Dataverse is the data platform for Power Platform products.\\n\\n### Availability and Reliability that you can depend on\\nDataverse also provides high availability (99.9+ %), reliability features like disaster recovery and business continuity capabilities for your production instance, by leveraging [Azure availability zones](https://learn.microsoft.com/azure/reliability/availability-zones-overview/?WT.mc_id=javascript-82212-ninarasi) and asynchronous cross-region replications using [Azure paired regions](https://learn.microsoft.com/azure/reliability/cross-region-replication-azure/?WT.mc_id=javascript-82212-ninarasi). You can read more about these scenarios and solutions in [this article](https://learn.microsoft.com/power-platform/admin/business-continuity-disaster-recovery/?WT.mc_id=javascript-82212-ninarasi) which explains *Business Continuity(BC)* and *Disaster Recovery (DR)*. You can watch [Planet-scale Dataverse](https://www.youtube.com/watch?v=QlQmBPYAK8I&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=39&t=100s&ab_channel=MicrosoftPowerPlatform) to learn more about how Dataverse operates at planet-scale.\\n\\nWith Dataverse you can store terabytes of data \u2013 all types of data like relational, non-relational, image, file etc. and process millions of transactions in a day. You can take a look at the different types of data supported by Dataverse [here](https://learn.microsoft.com/power-apps/maker/data-platform/types-of-fields/?WT.mc_id=javascript-82212-ninarasi).You can also learn more about [Polyglot and Hyperscale Dataverse](https://www.youtube.com/watch?v=bSscrGddctI&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=35&ab_channel=MicrosoftPowerPlatform). Dataverse also delivers fast and [comprehensive search results experience](https://learn.microsoft.com/power-platform/admin/configure-relevance-search-organization#what-is-dataverse-search/?WT.mc_id=javascript-82212-ninarasi) in a single list, sorted by relevance, powered by Microsoft Azure Cognitive Search. Besides all Dataverse instances are backed up automatically every few minutes and these backups can be retained for 7 to 28 days, in case of production environments running Power Platform and Dynamics applications respectively. \\n\\n\\n### Enterprise grade Security, along with advanced risk and compliance features\\nDataverse provides built-in enterprise-grade security that is based on [Zero Trust](https://www.microsoft.com/security/business/zero-trust/?WT.mc_id=javascript-82212-ninarasi) principles. The security layer spans across data and compute layer with robust authentication mechanisms and authorization mechanisms like role-based access model. Dataverse also supports advanced risk and compliance features like [Customer Lockbox](https://learn.microsoft.com/power-platform/admin/about-lockbox/?WT.mc_id=javascript-82212-ninarasi) and [Customer Managed Key](https://learn.microsoft.com/power-platform/admin/manage-encryption-key/?WT.mc_id=javascript-82212-ninarasi). Learn more about Dataverse Security features and capabilities covered in the [Microsoft Dataverse Security white paper](https://download.microsoft.com/download/9/e/d/9edefa88-50a0-4900-97f4-815bca5a7cb8/Dataverse-security-and-scenarios.pdf).\\n\\nYou can see by using Microsoft Dataverse with Azure, there is so much you can do with your data for so less - effort, cost and time! \\n\\n### What\'s next?\\n\\nStay tuned for the rest of this week\'s blog posts to dive deeper into the world of connectors and backend integrations.  \\n\\n* 1\ufe0f\u20e3 [**Sign up**](https://aka.ms/ai-april/devplan) for the free Power Apps Developer Plan.\\n* 2\ufe0f\u20e3 [**Enroll**](https://aka.ms/ai-april/challenge) in the Cloud Skills Challenge to learn more about low code and fusion team fundamentals and start climbing that leaderboard!\\n* 3\ufe0f\u20e3 Connectors will also be highlighted at the Powerful Devs Conference so be sure to [**Sign up**](https://aka.ms/ai-april/PowerfulDevsConf2023) for the free virtual event!\\n\\n## Resources\\n* Resource: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n* [Microsoft Dataverse documentation](https://learn.microsoft.com/power-apps/maker/data-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [Why to choose Dataverse](https://www.youtube.com/watch?v=fbKZlF1WMBk&list=PL8b8RgcLYAyqDb3hgrVOs-xICPtorzSiK&index=5&ab_channel=MicrosoftPowerPlatform)\\n* Learn more about [Dataverse!](https://aka.ms/Dataverse)"},{"id":"2023-day8","metadata":{"permalink":"/hubv2/blog/2023-day8","source":"@site/blog/2023-lcf/2023-02-08/01 - LogicApps.md","title":"8. Serverless Low Code","description":"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.","date":"2023-02-08T00:00:00.000Z","formattedDate":"February 8, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"logic-apps","permalink":"/hubv2/blog/tags/logic-apps"},{"label":"azure-logic-apps","permalink":"/hubv2/blog/tags/azure-logic-apps"},{"label":"azure-functions","permalink":"/hubv2/blog/tags/azure-functions"},{"label":"power-automate","permalink":"/hubv2/blog/tags/power-automate"}],"readingTime":8.49,"hasTruncateMarker":false,"authors":[{"name":"Matt Soucoup","title":".NET Advocacy Lead","url":"https://github.com/codemillmatt","imageURL":"https://github.com/codemillmatt.png","key":"matt"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day8","title":"8. Serverless Low Code","authors":["matt","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform","connectors","custom connectors","azure logic apps"],"image":"https://microsoft.github.io/Low-Code/img/og/30-08.png","description":"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","logic-apps","azure-logic-apps","azure-functions","power-automate"]},"prevItem":{"title":"7. Dataverse - Do more with Data, for less!","permalink":"/hubv2/blog/2023-day7"},"nextItem":{"title":"9a. Build a Custom Connector","permalink":"/hubv2/blog/2023-day9-build"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day8\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"8. Serverless Low Code\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Let\'s explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-08.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@codemillmatt\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day8\\" />\\n</head>\\n\\nWelcome to `Day 8` of #30DaysOfAzureAI!\\n\\nThe theme for this week is Integrations. Yesterday we talked about Low Code + Dataverse. Today we\'ll explore the topic of serverless low code and piecing together a workflow with Azure Logic Apps.\\n\\n## What We\'ll Cover\\n\\n* Serverless and Low Code?\\n* Azure Logic Apps overview\\n* Let\'s build a Logic App\\n* Logic Apps compared to Power Automate\\n* Resources\\n\\n![Low Code and Serverless](./../../../static/img/og/30-08.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Serverless and Low Code?\\n\\nAre you sitting down? Because I\'m about to tell you that there\'s something out there that combines the best of serverless computing with low code development. And that\'s ... Azure Logic Apps.\\n\\nServerless computing lets you worry less about the underlying infrastructure your code is running on and concentrate more on the code itself.\\n\\nA benefit of serverless computing is that you don\'t write huge applications, instead you write small functions that do one specific task. For example, respond to an HTTP request. Or process a message from a queue.\\n\\nThen within that function, you write code that deals with the task. Any logic, or connections to other services - that\'s pretty much on you to write code for.\\n\\nAzure Logic Apps brings the Low Code world to serverless computing. You still solve a problem in a concise of a manner as possible with a Logic App - and the Logic App is started by some sort of event. But instead of writing code, you use a visual designer to piece together a workflow.\\n\\n## Azure Logic Apps overview\\n\\nAt its heart, Azure Logic Apps automates the execution of business processes by using a visual designer to create workflows.\\n\\nBut what sets Logic Apps apart, are its pre-made components.\\n\\nWhen you\'re creating a Logic App, you arrange pre-made components into a sequence - or a workflow. These components are designed to communicate with external services. So you can specify - all in a visual designer - what event should trigger a workflow to start and then what actions should occur.\\n\\n![A diagram showing the step you\'ll take when building a logic app.](./1-app-design-process.png)\\n\\nAs I mentioned, there are literally hundreds of external services (or components) you can connect your Logic App to. And the beauty of it is, the Logic Apps runtime takes care of managing the connections to the services. You don\'t have to worry about writing code to establish connections or check connectivity - Logic Apps has your back.\\n\\n![A graphic showing various 3rd party services a logic app can connect to.](./2-external-services.png)\\n\\nBuilding a Logic App is the process of building a workflow using the components to solve your business problem. Each component will have different triggers that will start a workflow, and different actions that it can take when a workflow is running. How you use them is up to you.\\n\\n![A diagram showing an example Logic App workflow that detects the sentiment of a tweet.](./3-service-use.png)\\n\\n## Building a Logic App\\n\\nWe\'re not going to create a Logic App from front to back, step-by-step, in this article. That\'s really worth it\'s own article and we have some [documentation](https://learn.microsoft.com/azure/logic-apps/quickstart-create-first-logic-app-workflow?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) that will take you through that process.\\n\\nRather I want to concentrate on the major pieces and decision points that you\'ll make when creating a Logic App.\\n\\n### Connecting to other services\\n\\nNow let\'s pause for a second to talk about all of these services that you can connect your Logic Apps workflow to. A _connector_ is a component that provides an interface to an external service. For example, the Twitter connector allows you to send and retrieve tweets, while the Office 365 Outlook connector lets you manage your email, calendar, and contacts.\\n\\nThere are literally hundreds of connectors from Microsoft and 3rd party vendors that you can use to build your workflows with.\\n\\nA connector uses the external service\'s REST API to do its work. When you use the connector in your Logic App workflow, the connector calls the service\'s underlying API for you.\\n\\n![A diagram of how a connector works](./6-connector.png)\\n\\nIf you can\'t find a connector that suits your needs? You can build one yourself! It\'s called a custom connector, and this [series](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) of [articles](https://learn.microsoft.com/connectors/custom-connectors/create-logic-apps-connector?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) will show you how to make your REST API into a connector!\\n\\n### Kicking off the logic\\n\\nThe very first decision you\'ll need to make when creating a Logic App is to decide what type of event, or _trigger_ will start the workflow running. The trigger specifies the condition to meet before any actions defined in the Logic App execute. Each time the trigger fires, the Logic Apps runtime creates and runs the workflow instance.\\n\\nThere are a ton of different triggers you can choose from. A workflow can be started with events as varied as a new email arriving to a new message arriving in an Azure Storage queue.\\n\\n![A screenshot showing the 2 different triggers for an Azure Storage Queue](./5-queue-triggers.png)\\n\\n### Performing actions\\n\\nIf a trigger kicks off a workflow, then an action performs a specific task while the workflow is running.\\n\\nA connector can be composed of many actions and triggers. For example, the Dropbox connector has triggers to monitor for when a file is created or modified. And it has actions to create a file, list files in a folder, and so on.\\n\\n![Diagram showing the Dropbox connector triggers and actions](./7-dropbox-connector-details.png)\\n\\nYou string together actions, after the triggering event, to perform the business logic of your Logic App. But what if your logic had branches or conditions in it?\\n\\n### Controlling actions\\n\\nA control action routes the execution within a workflow based on conditions.\\n\\nConsider the Azure DevOps connector\'s Build Complete trigger kicking off a workflow. If the build status is _failed_, then a text message could be sent using the Azure Communication Service\'s connector. Otherwise if the build status is successful, a message could be posted to a chat in Microsoft Teams using its connector.\\n\\nThe _if_ statement is a conditional action. There are others controlling actions such as _switch_ statements, _for each_ and _until_ loops.\\n\\n## Logic Apps compared to Power Automate\\n\\nNow, you may be thinking to yourself - Logic Apps sound a lot like Power Automate. And you\'re not wrong, they\'re both workflow-based services that work with connectors to other services.\\n\\nIn fact, Power Automate is built upon Azure Logic Apps!\\n\\n### UI\\n\\nThey both have a user-friendly design surface to create your workflow on quickly. The difference is that Logic Apps allows you to build a bit more complex integration solutions and utilize advanced development tooling like Visual Studio or VS Code. Logic Apps has a recently refreshed designer, whereas Power Automate still uses the previous designer and is only accessible via the Power Automate portal.\\n\\n### Connectors\\n\\nOn the connectors level, there are some differences. To make it a bit more clear for you, I have split the connectors section up in two parts:\\n\\n#### Logic Apps only connectors\\n\\nLogic Apps has the following connectors that are only available for Logic Apps:\\n\\n* Azure Functions\\n* IBM 3270/MQ Series\\n* SAP\\n* Data Transformation\\n* Inline Code\\n\\nLogic Apps offers a bunch of rich integrations with enterprise systems like IBM 3270 & MQ. Logic Apps also has a fairly advanced SAP connector which supports RFC, BAPI & IDOC actions. It also receives messages from SAP, which the SAP ERP connector from Power Automate can\'t. Next to the enterprise system connectors, it also offers extra features like Azure Functions integration, Data Transformation & Inline Code.\\n\\n#### Power Automate only connectors\\n\\nPower Automate also has connectors that are only available for Power Automate:\\n\\n* AI Builder\\n* Approvals\\n* Desktop flows\\n* Power Apps\\n* Power Virtual Agents\\n* SAP ERP\\n\\nPower Automate offers rich integration with Power Platform products like AI Builder, Approvals, Desktop flows (Robotic Process Automation aka RPA), Power Apps & Power Virtual Agents. It also has a SAP ERP connector which supports RFCs and BAPIs. It also has  [nice templates](https://powerautomate.microsoft.com/blog/announcing-deeper-sap-integration-for-the-power-platform/?WT.mc_id=dotnet-82212-masoucou) available that they have built since the [Clear Software acquisition](https://cloudblogs.microsoft.com/powerplatform/2021/10/22/microsoft-acquires-clear-software-to-enhance-connectivity-to-systems-of-record/?WT.mc_id=dotnet-82212-masoucou).\\n\\n### Licensing\\n\\nThe licensing model is also different, I\'ve listed the characteristics below:\\n\\n#### Power Automate\\n\\nPower Automate is licensed on a per-user, per-flow or Pay-as-you-Go basis.\\n\\n* The per user model is the all you can eat model for Power Automate. You can create & use as much flows as you want, as long as your Dataverse storage is big enough & you haven\'t reached your [service limits](https://learn.microsoft.com/power-platform/admin/api-request-limits-allocations#licensed-user-request-limits?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou). It has a version with and without attended Robotic Process Automation (RPA).\\n* The per flow model is a model that gives you the possibility to let an unlimited number of people within your organization run a flow.\\n* The pay-as-you-go model has been introduced not too long ago, and this is where you pay per flow run.\\n\\n#### Logic Apps Consumption & Logic Apps Standard\\n\\nThere are two types of Logic Apps:\\n\\n* Logic Apps Consumption\\n* Logic Apps Standard\\n\\nLogic Apps Consumption is the type of Logic App that has been around for a while and it\'s the type of Logic App that Power Automate is based on. You pay per execution. And on top of that, you can pay a fixed fee for an Integration Services Environment. A Logic App can contain only one workflow.\\n\\nLogic Apps Standard is a different type of Logic App. You pay a static monthly charge instead of per execution. With Logic Apps Standard, you can have multiple stateful and stateless workflows. You can also host Logic Apps Standard yourself, for instance in a Docker container.\\n\\n### Built-In VNET\\n\\nLogic Apps also has built-in Virtual Network (VNET) configuration included. This is something that Power Automate doesn\'t offer.\\n\\n## Resources\\n\\n* Take a [self-paced training course](https://learn.microsoft.com/training/modules/intro-to-logic-apps/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou) on Azure Logic Apps!\\n* [Azure Logic Apps documentation](https://learn.microsoft.com/azure/logic-apps/?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou)\\n* [Power Automate documentation](https://learn.microsoft.com/power-automate/getting-started?WT.mc_id=dotnet-82212-masoucou&WT.mc_id=dotnet-82522-masoucou)"},{"id":"2023-day9-build","metadata":{"permalink":"/hubv2/blog/2023-day9-build","source":"@site/blog/2023-lcf/2023-02-09/part-1.md","title":"9a. Build a Custom Connector","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","date":"2023-02-09T12:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"connectors","permalink":"/hubv2/blog/tags/connectors"},{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":10.335,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day9-build","date":"2023-02-09T12:00","title":"9a. Build a Custom Connector","authors":["nitya","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","power platform","openAPI","connector","azure logic apps","power automate","power apps","power platform creator kit"],"image":"https://microsoft.github.io/Low-Code/img/og/30-09-01.png","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","tags":["connectors","low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"8. Serverless Low Code","permalink":"/hubv2/blog/2023-day8"},"nextItem":{"title":"9b. Use the Custom Connector","permalink":"/hubv2/blog/2023-day9-use"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-build\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"9a. Build a Custom Connector\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-09-01.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-build\\" />\\n</head>\\n\\nWelcome to `Day 09` of #30DaysOfAzureAI!\\n\\nIt\'s **Integrations Week**! So far, we\'ve talked about Power Platform Connectors - from [built-in options](/blog/2023-day6) to [serverless computing solutions](/blog/2023-day8) with automated workflows triggered by connectors. But what if prebuilt connectors don\'t support _your_ requirements? That\'s where **custom connectors** come in. Join us today for a 2-part tutorial as we take you step-by-step through the process of _building, testing, and using_ a custom connector! \\n\\n:::info SEE US LIVE AT POWERFUL DEVS!\\nJoin us Feb 15 at the #PowerfulDevs conference where Daniel and Nitya will walk through the steps of building the connector and application - and more!\\n[**Register Here**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi)\\n:::\\n\\n\\n## What We\'ll Cover\\n * **Motivation** - Why are custom connectors needed?\\n * **Scenario** - Let\'s build a dev.to Connector!\\n * **Process** - Building from an OpenAPI specification\\n * **Testing** - Validate it works!\\n * **Exercise**: [Training: Build custom connectors for Power Automate](https://learn.microsoft.com/training/paths/build-custom-connectors/?WT.mc_id=javascript-82212-ninarasi&ns-enrollment-type=Collection&ns-enrollment-id=xz6ehr2mx031y0)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Building a Custom Connector](./../../../static/img/og/30-09-01.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Why Custom Connectors?\\n\\nFrom [the earlier post](/blog/2023-day6) we know Connectors are wrappers around APIs that make it easier for low-code developers to take actions and trigger workflows based on API-supported operations. And we know there are [900+ pre-built connectors](https://learn.microsoft.com/connectors/connector-reference/?WT.mc_id=javascript-82212-ninarasi)  for Power Platform.\\n\\n_So why would I want to build a custom connector?_ We can think of three reasons:\\n 1. **The API exists, but connector does not** - and you need to work with the API!\\n 2. **The connector exists, but it\'s not perfect** - you need a more customized or complete version.\\n 3. **The API is being built by you** - and you want to build a connector in parallel, to drive usage.\\n\\nAs a JavaScript Cloud Advocate, this was exactly the situation I faced when I wanted to explore the low-code ecosystem from a pro-developer perspective. I had a specific scenario I wanted to implement and the API existed **but the connector did not**! \\n\\nSo I reached out to my colleague Daniel (Power Platform Cloud Advocate) and his response was immediate: _Let\'s build a custom connector!!_. Alright then!\\n\\n## Our Target Scenario\\n\\nYou might know that there is an [Azure publication on dev.to](https://dev.to/azure), a community-driven content portal where cloud advocates publish tutorials, tips and best practices for developers. We have 100+ contributors on that publication, and each post can have up to 4 tags. We wanted to view the content in different ways, but the default dev.to dashboard only shows us a chronological view. So here\'s our scenario:\\n\\n:::info USER SCENARIO\\nAs a user, I want to see a list of articles from dev.to\\n - for the Azure organization\\n - for a specific user\\n - for a specific tag\\n\\nwhere each item should provide {publication date, author, tags, description, link}.\\n:::\\n\\nThe good news? The dev.to site is built on a platform called Forem - [which has an API](https://developers.forem.com/) that provides _exactly_ the kinds of operations (e.g., `/articles`) that can help us build this dashboard scenario. But there is no _prebuilt connector_ for this API, so it was time to build one!\\n\\n\\n## The Build Lifecycle\\n\\nThe Power Platform [documentation](https://learn.microsoft.com/connectors/custom-connectors/#lifecycle?WT.mc_id=javascript-82212-ninarasi) describes this 5-step process for building a custom connector:\\n\\n![](https://learn.microsoft.com/connectors/custom-connectors/media/index/authoring-steps.png)\\n\\n 1. **Build & Secure it** - applicable only if you are building the API itself. We are not, so we can skip it.\\n 2. **Define it** - this is where you describe the methods and metadata in the API. You can hand-craft this _or_ use standardized options (OpenAPI file or Postman collection) to build from.\\n 3. **Use it** - create a connection to your Connector from a client, and validate it works!\\n 4. **Share it** - make the connector available to people within your organization to use.\\n 5. **Certify it** - submit it for Microsoft certification if you want this available to all users.\\n\\n\\n## Let\'s Build the Connector!\\n\\nWe\'ll follow the guidelines in [this tutorial](https://learn.microsoft.com/connectors/custom-connectors/#tutorial?WT.mc_id=javascript-82212-ninarasi). \\n\\n### 1. Pre-Requisites\\n\\nTo get started, you will need the following:\\n * **Subscription** - to Azure (if using Azure Logic Apps), Power Automate, or Power Apps.\\n * **Familiarity** - with core concepts of Logic Apps, Power Automate flows, or Power Apps.\\n * **API Key** - to the Forem API, if using authenticated endpoints\\n\\nNote that currently Power Plaform supports only [OpenAPI v2.0](https://learn.microsoft.com/connectors/custom-connectors/define-openapi-definition#prerequisites?WT.mc_id=javascript-82212-ninarasi) - and the dev.to API uses OpenAPI 3.x.  We can work around this in two ways:\\n 1. Use a converter that downgrades API to v2.0 (knowing you may lose some functionality)\\n 2. Manually re-create API in Custom Connector wizard (using OpenAPI spec as reference)\\n\\nWe\'ll talk briefly about the first option in this post, and encourage you to join us for our [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) where Daniel will walk through the steps for the second option!\\n\\n### 2. Get The DevPlan\\n\\nDon\'t have a Power Apps or Power Automate subscription (see pre-requisites)? Just sign up for the [Power Apps Developer Plan](https://aka.ms/ai-april/devplan) and get a free development environment that will work for this purpose. Anyone with a work or school email address (backed by Azure AD) can sign up. Read our earlier post on [**DevTools and Onboarding**](/blog/2023-day3) options to get yourself set up with a sandbox subscription and test tenant.\\n\\n### 3. Connector Wizard\\n\\nVisit the [Power Apps](https://make.powerapps.com/) portal and sign in. You should see something like this:\\n\\n![](./build/1-signin.png)\\n\\nSelect `Data > Custom Connectors` to enter the Custom Connector Wizard. Click the `New custom connector` drop-down to see the different starting options as shown below. Use the **Create from blank** option to build the custom connector manually. We walk through this approach in our [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) on Feb 15 so don\'t miss it!\\n\\n![Screenshot of new connector options](./build/2-options.png)\\n\\n\\n### 4. OpenAPI Converter\\n\\nFor completeness, let\'s also see what happens if we were to try using the _Import an OpenAPI file_ option. First **[download the dev.to OpenAPI file](https://developers.forem.com/api/v1)** to your local drive. Then use the _Import_ option in the wizard to upload this file to the portal. (Note: in my case I used a converter tool to convert the OpenAPI YAML to a JSON file before this step).\\n\\n![Screenshot of OpenAPI error](./build/3-openapi.png)\\n\\nNot surprisingly, we get this error message indicating that the dev.to OpenAPI file uses the v3 specification which is not _yet_ supported. What do we do now?\\n\\nIf you\'re a JavaScript developer, you\'ll likely check npm for a handy converter. And guess what? [**You\'d find one!**](https://www.npmjs.com/package/api-spec-converter) that does exactly what you need. You can even use this directly on the YAML file downloaded from the dev.to API site!\\n\\n![Screenshot of converter README page](./build/4-converter.png)\\n\\nNow use the _Import_ option again but with the converted file and - SUCCESS! \ud83c\udf89 You should be taken into the first step of the Custom Connector creation workflow.\\n\\n### 5. Creation Workflow\\n\\nThe wizard walks you through the 5 key steps of the workflow (see tabs):\\n 1. **General** - defines the metadata for the Connector. Pay attention to the `Host` and `Base URL` fields. These will need to be corrected to align with the API definition. However, importing the file should have filled in details like the `Description`. Customize this by adding your own icon and background color preferences. _Then move to next tab_.\\n 2. **Security** - is the panel where you enter credentials (e.g., API key) required to access the API\\n 3. **Definition** - is the main tab defining the API. We\'ll look at this in the next section.\\n 4. **Code** - The connector can act as a proxy between API and low-code clients. This section allows you to define code that _transforms_ requests or responses in custom ways.\\n 5. **Test** - This pane helps validate your definition with simple in-wizard tests as we see later.\\n\\nFor our current purpose, let\'s dive into the _Definition_ tab for more detail.\\n\\n![Screenshot of Custom Connector Wizard](./build/5-wizard.png)\\n\\n### 6. Edit Definition\\n\\nThe good news is that importing an OpenAPI file will fill in most of the definition details for you. Here, **Actions** are the requests you can make on API (endpoints) - we can see that the default dev.to API endpoints are already defined. Because we downgraded to OpenAPI v2, you may find certain actions throwing _error_ flags.\\n\\n![Screenshot of Definition tab](./build/6-definition.png)\\n\\nYou can use your judgement to delete or edit them manually, till the complete definition is error-free. As a pro-developer, I was particularly happy to see the option to switch to a _Swagger editor_ as shown below. Changes in this editor are kept in sync with the definition, so you can easily move between the wizard UI or this editor, without losing context. The editor view lets you see the raw details of the OpenAPI spec, and the _swagger-ui_ rendered version (at right) for easy debugging.\\n\\n![Screenshot of Swagger Editor](./build/6-swagger.png)\\n\\nOnce you\'ve completed the definition to your satisfaction, take a minute to click _Update connector_ to make sure the changes are saved to the environment. We aren\'t doing any code transformations, so let\'s skip that step and go directly to testing!\\n\\n## Let\'s Test the Connector!\\n\\nAt this point, we\'ve come to the [Step 5: Test the connector](https://learn.microsoft.com/connectors/custom-connectors/define-blank#step-5-test-the-connector?WT.mc_id=javascript-82212-ninarasi) step of the tutorial. **Testing is currently available only in Power Automate and Power Apps**.\\n\\n### 1. Create Connection\\n\\nThe connector is just the wrapper around the API. Before we can use it, we need to associate this with a _Connection_ that provides the required **credentials** (e.g., API key) required to actually use the deployed API endpoint.\\n\\nYou can create a new connection either from the _Connections_ page (see sidebar) or from the Test tab of the wizard itself. Once the Connection is created, you should be taken to the Connections page to verify that it was created correctly. Now we\'re ready to test!\\n\\n![Screenshot of Connections UI](./build/7-connection.png)\\n\\n### 2. Test Connector\\n\\nSwitch back to the Custom Connectors page, select the connector you were working on, and move to the _Test_ tab. You should see something like this - where you can now select the newly created connector as the default Connection for the test.\\n\\n![Screenshot of Testing UI](./build/7-test.png)\\n\\nAt this point, you can simply select the _Action_ (request), provide any necessary parameters, and click `Test operation` to see if you get the correct response. For example, in the screenshot below, you can see the default response for `getUserArticles` returns the last article I published on dev.to! \\n\\n![Screenshot of Test Run response](./build/7-response.png)\\n\\nThis test tab also provides helpful feedback - for instance _schema validation_ - that can help you further debug and fix any issues in the definition, before you share the connector with others.\\n\\n![Screenshot of Schema Validation output](./build/7-schema.png)\\n\\n:::success CONGRATULATIONS \ud83e\udd73\\nYou just built and tested your first custom connector using the dev.to API!\\n:::\\n\\nNote that testing within the wizard helps with improving the _definition_ but it can be laborious to test everything that your intended application will use. Instead, you might be able to test the connector _from an application_ by **using the connector in a Power Apps or Power Automate** implementation.\\n\\n## Next: Use The Connector!\\n\\nWow - we covered a lot today! Here\'s a helpful visual recap for your convenience. We defined our scenario, built our connector, tested it within the Custom Connector wizard, and learned about options for sharing it widely. What\'s next? **Using the connector** in a real-world context, to deliver the rich interactive experience we described in our scenario. **Read Part-2 to see how we used the connector within Power Apps!**.\\n\\n![Building a custom connector](./build/Build-Custom-Connector.png)\\n\\n## Exercise\\n\\nTry building a custom connector yourself, either for the same dev.to API, or for any other OpenAPI-compliant API that you might want to use. And don\'t forget to [**join us Feb 15 for the PowerfulDevs Conference**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) where we walk through the process and demo in under 30 mins!\\n\\n## Resources\\n\\n - [**Training: Build custom connectors for Power Automate**](https://learn.microsoft.com/training/paths/build-custom-connectors/?WT.mc_id=javascript-82212-ninarasi&ns-enrollment-type=Collection&ns-enrollment-id=xz6ehr2mx031y0) - also in our [Cloud Skills Challenge](https://aka.ms/ai-april/challenge)\\n - [**Documentation: Custom Connectors**](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=javascript-82212-ninarasi) - on Microsoft Learn\\n - [**Examples: Custom Connectors**](https://github.com/Microsoft/PowerPlatformConnectors/tree/master/custom-connectors) - GitHub Repository\\n - [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi): Enable millions of low code devs by building custom connectors\\n - [**Learn Collection** ](https://aka.ms/ai-april/collection) LowCode February\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day9-use","metadata":{"permalink":"/hubv2/blog/2023-day9-use","source":"@site/blog/2023-lcf/2023-02-09/part-2.md","title":"9b. Use the Custom Connector","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","date":"2023-02-09T13:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"connectors","permalink":"/hubv2/blog/tags/connectors"},{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":14.79,"hasTruncateMarker":false,"authors":[{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day9-use","date":"2023-02-09T13:00","title":"9b. Use the Custom Connector","authors":["nitya","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","power platform","openAPI","connector","azure logic apps","power automate","power apps","power platform creator kit"],"image":"https://microsoft.github.io/Low-Code/img/og/30-09-02.png","description":"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","tags":["connectors","low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"9a. Build a Custom Connector","permalink":"/hubv2/blog/2023-day9-build"},"nextItem":{"title":"10. Secure Connectors with APIM","permalink":"/hubv2/blog/2023-day10"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-use\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"9b. Use the Custom Connector\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Want to build a Power Platform connector for an API? Or extend an existing one to support new capabilities? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-09-02.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day9-use\\" />\\n</head>\\n\\nWelcome to `Day 09` of #30DaysOfAzureAI!\\n\\nIn the [**first part of the blog**](part-1.md), Nitya showed you how to build a custom connector for the Forem v0 API. From now, I (Daniel) will take it over and show you what you can do with the custom connector in the Power Platform. \\n\\nIf you don\'t want to follow the whole tutorial, but you **want to just see the solution**, make sure to go the the bottom of the page for a [**link to the resources**](#completed-solution) that you can import and explore on your own!\\n\\n:::info SEE US LIVE AT POWERFUL DEVS!\\nJoin us Feb 15 at the #PowerfulDevs conference where Daniel and Nitya will walk through the steps of building the connector and application - and more!\\n[**Register Here**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi)\\n:::\\n\\n\\n\\n## What We\'ll Cover\\n\\n* Custom Connectors in the Power Platform\\n* Build a front end with Power Apps\\n* Speed up development with the Creator Kit\\n* Add the Forem v0 connector to your app\\n* Add the Creator Kit components to your app\\n* Publish your app\\n* Completed solution\\n\\n![Building a Custom Connector](./../../../static/img/og/30-09-02.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Custom connectors in the Power Platform\\n\\nWhen custom connectors are deployed, you will find them in multiple places. And, because the Power Platform is not just a bunch of products together, but also really advocates the \'better together\' story, it gives you the possibility to even use data from the custom connector in places where the connector doesn\'t appear.\\n\\nLet me explain that: You can find custom connectors in Power Automate, where you can automate processes.\\n\\n![Image of the forem connector in Power Automate](Part2-1-Forem-Power-Automate.png)\\n\\nYou can also find custom connectors in Power Apps. Power Apps is the product of the Power Platform where you build apps.\\n\\n![Image of the forum connector in Power Apps](Part2-2-Forem-Power-Apps.png)\\n\\nBut, because the products work very well together, it\'s also possible to for instance:\\n\\n* Trigger a Power Automate workflow from a Power BI visual\\n* Trigger a Power Automate workflow from a Power Virtual Agents chatbot\\n* Embed a Power App inside of a Power BI report/dashboard\\n\\nWhich gives you the possibility to use the connector in places even when they don\'t have a custom connector experience out of the box.\\n\\n## Build a front end with Power Apps\\n\\nPower Apps consists of multiple types of apps: canvas apps and model-driven apps. Canvas apps are the apps that give you the possibility to design them how you want. You have the possibility to change everything on the screen. You can even build Power Apps Component Framework components if you want to build your own components with custom code.\\n\\nModel-driven apps are a different type of app. It\'s based on data. First, you start building your data model, and when you\'re done with that, you start building the forms and views in your app. Lastly, you create the app to pull it all together. It doesn\'t offer the design freedom canvas apps have, but it gives you a bunch of functionality out of the box in exchange for that. You have responsive design out of the box and you don\'t have to think much about the controls and formula\'s that canvas has, because it will do a lot of the heavy lifting for you.\\n\\nIn this blog, I will focus on building a canvas app, but I wanted to make sure everyone knew about both types of apps.\\n\\n### Create a canvas app\\n\\nIn this blog, I\'m not gonna talk about how to create a canvas app from scratch, because there is a [great Microsoft Learn article](https://learn.microsoft.com/power-apps/maker/canvas-apps/create-blank-app?WT.mc_id=power-82212-dlaskewitz) about that. For this example, I created a canvas app in tablet mode.\\n\\nWhen you have created your canvas app in tablet mode, you will see Power Apps Studio:\\n\\n![An overview of the Power Apps maker studio with a purple bar at the top, a command bar below that with actions you can perform for this app and a canvas to create your app with](./Part2-3-Power-Apps-Create.png)\\n\\nPower Apps Studio is the place where you can design, build and manage your canvas app. If you want to learn more about all that you see here, make sure to check out [this article](https://learn.microsoft.com/power-apps/maker/canvas-apps/power-apps-studio) which gives you a great explanation about what all the parts of Power Apps Studio.\\n\\n## Speed up development with the Creator Kit\\n\\nThere are tons of components available out of the box, like text inputs, date pickers, camera controls, etc. These controls offer you a lot of flexibility, but, if you want to make it yourself really easy, it\'s a good idea to use the [Creator Kit](https://learn.microsoft.com/power-platform/guidance/creator-kit/overview?WT.mc_id=power-82212-dlaskewitz). The Creator Kit is a solution which you can import into your environment. The solution contains a [set of components](https://learn.microsoft.com/power-platform/guidance/creator-kit/components?WT.mc_id=power-82212-dlaskewitz) that are based on the [Fluent UI framework](https://developer.microsoft.com/fluentui?WT.mc_id=power-82212-dlaskewitz).\\n\\nThere is excellent guidance on how to [install the Creator Kit](https://learn.microsoft.com/power-platform/guidance/creator-kit/setup?WT.mc_id=power-82212-dlaskewitz) and how to [add the code components to a canvas app](https://learn.microsoft.com/power-platform/guidance/creator-kit/creator-kit-explained?WT.mc_id=power-82212-dlaskewitz#learn-how-to-add-components-to-an-app).\\n\\nIn the app, I use the following code components:\\n\\n* Details list ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist))\\n* Pivot ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/pivot))\\n* Search box ([link](https://learn.microsoft.com/power-platform/guidance/creator-kit/searchbox))\\n\\nThe end result will look like this:\\n\\n![Dev.to Power App which shows a menu at the top, a search box and a list of dev.to articles](Part2-4-Power-App-Finished.png)\\n\\n## Add the Forem v0 connector to your app\\n\\nTo work with the forem connector, you first need to add that to your app. Go to Power Apps Studio and select the `Data` icon in the left menu. Next, add the connector to your app by selecting the `Add data` button. Search for `Forem` and click on your custom connector. If you already have a connection, feel free to select that. If not, add a connection here by adding the API key you need for the [Forem API](https://developers.forem.com/api/v1#getting-an-api-key).\\n\\nAfter connecting the custom connector to your app, the data tab should look like this:\\n\\n![](Part2-5-Connector-Added.png)\\n\\nTo test out if the connector works, we can easily create a collection (local data that\'s saved in the app) by going to the tree view (layers icon in the left menu), selecting `App` and changing the `OnStart` property to:\\n\\n```powerappsfl\\nClearCollect(\\n    Articles, \\n    Foremv0.GetArticles(\\n      { \\n        page: 1, \\n        per_page: 100\\n      }\\n    )\\n)\\n```\\n\\nThis `ClearCollect` formula will create a collection with the name _Articles_. The collection will be filled with whatever comes next. In this case, it\'s a call to the custom connector `Foremv0` and specifically, a call to the `GetArticles` action in the connector. Inside of the call, the parameters `page` and `per page` are used to make sure we get 100 items returned.\\n\\n## Add the Creator Kit components to your app\\n\\nIn the earlier chapter, I already wrote about installing and using the Creator Kit. To build this app, you should have the following code components added to your app:\\n\\n![Screenshot of code components section with Fluent command bar, details list, pivot and search box](Part2-6-Components-Added.png)\\n\\nIf you don\'t have those code components available make sure to add them like described in [the documentation](https://learn.microsoft.com/power-platform/guidance/creator-kit/creator-kit-explained?WT.mc_id=power-82212-dlaskewitz#learn-how-to-add-components-to-an-app).\\n\\nLet\'s start building the app!\\n\\nFirst, let\'s make sure our app `OnStart` property has the right content. The `OnStart` property of the app should have a couple of formulas:\\n\\n```csharp\\nSet(\\n    AppTheme,\\n    {\\n        palette: {\\n            themePrimary: \\"#000000\\",\\n            themeLighterAlt: \\"#898989\\",\\n            themeLighter: \\"#737373\\",\\n            themeLight: \\"#595959\\",\\n            themeTertiary: \\"#373737\\",\\n            themeSecondary: \\"#2f2f2f\\",\\n            themeDarkAlt: \\"#252525\\",\\n            themeDark: \\"#151515\\",\\n            themeDarker: \\"#0b0b0b\\",\\n            neutralLighterAlt: \\"#faf9f8\\",\\n            neutralLighter: \\"#f3f2f1\\",\\n            neutralLight: \\"#edebe9\\",\\n            neutralQuaternaryAlt: \\"#e1dfdd\\",\\n            neutralQuaternary: \\"#d0d0d0\\",\\n            neutralTertiaryAlt: \\"#c8c6c4\\",\\n            neutralTertiary: \\"#595959\\",\\n            neutralSecondary: \\"#373737\\",\\n            neutralPrimaryAlt: \\"#2f2f2f\\",\\n            neutralPrimary: \\"#000000\\",\\n            neutralDark: \\"#151515\\",\\n            black: \\"#0b0b0b\\",\\n            white: \\"#ffffff\\"\\n        }\\n    }\\n);\\n```\\n\\nThe above formula sets the `AppTheme` variable we are going to use in the Creator Kit components. The last part of the OnStart property should be as follows:\\n\\n```csharp\\nClearCollect(\\n    colArticles,\\n    SortByColumns(\\n        AddColumns(\\n            Foremv0.GetArticles(\\n                {\\n                    page: 1,\\n                    per_page: 1000,\\n                    tags:\\"powerplatform, powerapps, dotnet, azure\\"\\n                }\\n            ),\\n            \\"author_name\\",\\n            user.name,\\n            \\"org_name\\",\\n            organization.name,\\n            \\"formatted_date\\",\\n            Text(\\n                DateTimeValue(\\n                    Substitute(\\n                        published_at,\\n                        \\"Z\\",\\n                        \\"\\"\\n                    )\\n                ),\\n                ShortDateTime\\n            )\\n        ),\\n        \\"created_at\\",\\n        Descending\\n    )\\n)\\n```\\n\\nThe above `ClearCollect` formula creates a collection called `colArticles`. The `GetArticles` action of the custom connector will be used to grab the last 1000 articles with the tags `powerplatform, powerapps, dotnet, azure`. Wrapped around that call we have two other formulas: the `Addcolumns` formula to flatten the result of the API and add some columns, and the `SortByColumns` formula to sort the articles by created date.\\n\\nThat\'s it for our app `OnStart` formula. Next, let\'s create the header. The header consists of the following three parts:\\n\\n* Logo (image)\\n* Pivot (pivot from the Creator Kit)\\n* SearchBox (search box from the Creator Kit)\\n\\n### Logo\\n\\nFor the logo, click on the `plus` icon on the left side, which opens up the `Insert` menu. Search for _image_ in the search box. Click on `Image` that shows up in the insert menu. At the right side of your screen you can see the properties of your control. This is where you can find properties, like in this case the property `Image`, which enables you to upload an image or choose one that\'s already added to your app. Click on the dropdown next to `Image` where it shows `None` and add an image file. I added the dev.to logo here, since this app will connect to dev.to.\\n\\nDrag your image to the top-left of the screen and make sure to add a padding of `10` to the top, bottom, left & right of the image.\\n\\nThis should result in properties looking like this (changed properties in red):\\n\\n![Screenshot of the image properties](Part2-7-Image-Properties.png)\\n\\n### Pivot\\n\\nNext, add the `Fluent Pivot` component via the `Insert` menu. Set the `X` property to `100`, the `Height` property to `50` and the `Width` property to `600`. For the `Y` property, we will use a different way of changing a property. For this we have to:\\n\\n1. Press the `Y` in the properties panel of the Pivot component\\n1. Change the value of the `Y` property to `Self.Height/2` in the formula bar.\\n\\n![](Part2-8-Pivot-Properties-1.png)\\n\\nThis will place the pivot on the right side of the dev.to logo you just added. Change the `Theme` property to `AppThemeJson` so that it will get the theme you have set in the app `OnStart`.\\n\\nNow we have a pivot, but it doesn\'t do anything. To change this we need to change the following properties:\\n\\n* **Items**:\\n\\nChange this property to the following table:\\n\\n```csharp\\nTable(\\n    {\\n        ItemKey: \\"Home\\",\\n        ItemDisplayName: \\"Home\\",\\n        ItemIconName: \\"Home\\"\\n    },\\n    {\\n        ItemKey: \\"Azure\\",\\n        ItemDisplayName: \\"Azure\\",\\n        ItemIconName: \\"AzureLogo\\"\\n    },\\n    {\\n        ItemKey: \\"DotNet\\",\\n        ItemDisplayName: \\".NET\\",\\n        ItemIconName: \\"Code\\"\\n    },\\n    {\\n        ItemKey: \\"PowerPlatform\\",\\n        ItemDisplayName: \\"Power Platform\\",\\n        ItemIconName: \\"PowerApps\\"\\n    },\\n    {\\n        ItemKey: \\"MyUnpublishedArticles\\",\\n        ItemDisplayName: \\"My Unpublished Articles\\",\\n        ItemIconName: \\"Contact\\"\\n    }\\n)\\n```\\n\\nThis table contains a couple of items, which all have three properties:\\n\\n1. `ItemKey` - this is the internal key of the item, we will use it later on in the OnSelect to find out which item has been selected.\\n1. `ItemDisplayName` - this is the name that will be displayed in the pivot.\\n1. `ItemIconName` - this is the icon name that will be displayed in the pivot.\\n\\nFor more info on the workings of the pivot, go to [the documentation](https://learn.microsoft.com/power-platform/guidance/creator-kit/pivot?WT.mc_id=power-82212-dlaskewitz).\\n\\n* **SelectedKey**\\n\\nChange this property in the formula bar to the following:\\n\\n```csharp\\nSelf.Selected.ItemKey\\n```\\n\\nThis setting will make sure the pivot component will show a line below the currently selected item.\\n\\n* **OnSelect**\\n\\n```csharp\\nSwitch(\\n    Self.SelectedKey,\\n    \\"Azure\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        username: \\"azure\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"DotNet\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tag: \\"dotnet\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"Home\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tags: \\"powerplatform, powerapps, dotnet, azure\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    ),\\n    \\"MyUnpublishedArticles\\",\\n    ClearCollect(\\n        colArticles,\\n        Foremv0.GetMyUnpublishedArticles()\\n    ),\\n    \\"PowerPlatform\\",\\n    ClearCollect(\\n        colArticles,\\n        SortByColumns(\\n            AddColumns(\\n                Foremv0.GetArticles(\\n                    {\\n                        page: 1,\\n                        per_page: 1000,\\n                        tag: \\"powerplatform\\"\\n                    }\\n                ),\\n                \\"author_name\\",\\n                user.name,\\n                \\"org_name\\",\\n                organization.name,\\n                \\"formatted_date\\",\\n                Text(\\n                    DateTimeValue(\\n                        Substitute(\\n                            published_at,\\n                            \\"Z\\",\\n                            \\"\\"\\n                        )\\n                    ),\\n                    ShortDateTime\\n                )\\n            ),\\n            \\"created_at\\",\\n            Descending\\n        )\\n    )\\n)\\n```\\n\\nThe above formula is very long, this is because here I use a `Switch` formula to have different behavior per selected item. In this case, you can see that when the item with the `MyUnpublishedArticles` key is selected, it\'s doing a different call (GetMyUnpublishedArticles) than when the item with the `PowerPlatform` key is selected (GetArticles, with tag parameter with the value powerplatform). The rest of the item selections are pretty much the same.\\n\\n### Search Box\\n\\nLet\'s add the `Fluent SearchBox` component via the `Insert` menu. Set the following properties:\\n\\n|Property|Value|\\n|--------------|-----------|\\n|Theme|AppThemeJson|\\n|X|700|\\n|Y|30|\\n|Width|600|\\n|Height|30|\\n\\nNow, we are done with the header. Let\'s move on with the details list, which we\'ll use to show all the articles.\\n\\n### Details List\\n\\nThe details list is where all the articles are shown. Add the `Fluent Details List`. Set the following properties:\\n\\n|Property|Value|\\n|--------------|-----------|\\n|Theme|AppThemeJson|\\n|X|0|\\n|Y|140|\\n|Width|1366|\\n|Height|628|\\n\\nNow the details list has the right dimensions and position, but it doesn\'t have the right content and settings, for that we need to change the following properties:\\n\\n* **OnChange**:\\n\\nThe following formula is documented in the documentation of the [details list](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist#manual-sorting). This is to make sure the local collection can be sorted the way we want to sort it.\\n\\n```csharp\\nIf(Self.EventName=\\"Sort\\", \\nUpdateContext({\\n                ctxSortCol:Self.SortEventColumn,\\n                ctxSortAsc:If(Self.SortEventDirection=\'PowerCAT.FluentDetailsList.SortEventDirection\'.Ascending,true,false)\\n })\\n);\\n```\\n\\n* **Items**:\\n\\nIn the `Items` property, use an `if` condition to make sure our search box works. In this case, the `if` condition checks if the length of the SearchText in the search box is greater than or equal than 3. If that\'s the case, a `Search()` formula will be kicked off, that will search within the `colArticles` collection for the title, tags and the author name. If a match is found, it will show it in the details list. If not, the details list will become empty.\\n\\nIf the condition is not met, it will show just the `colArticles`. In both cases it will perform sorting as well.\\n\\n```csharp\\nIf(\\n    Len(SearchBox1.SearchText) >= 3,\\n    SortByColumns(\\n        Search(\\n            colArticles,\\n            SearchBox1.SearchText,\\n            \\"title\\",\\n            \\"tags\\",\\n            \\"author_name\\"\\n        ),\\n        ctxSortCol,\\n        If(\\n            ctxSortAsc,\\n            SortOrder.Ascending,\\n            SortOrder.Descending\\n        )\\n    ),\\n    SortByColumns(\\n        colArticles,\\n        ctxSortCol,\\n        If(\\n            ctxSortAsc,\\n            SortOrder.Ascending,\\n            SortOrder.Descending\\n        )\\n    )\\n)\\n```\\n\\n* **Fields**:\\n\\n![Image of the properties that need to be added](Part2-9-Details-List-Properties-1.png)\\n\\nSelect the `edit` button next to the `Fields` property and click `Add field`. Make sure to add the following fields:\\n\\n* title\\n* author_name\\n* org_name\\n* formatted_date\\n* comments_count\\n* public_reactions_count\\n* tags\\n\\nNow we have the fields available to us, but they don\'t show yet in the details list. For that, we need to change the `Columns` property.\\n\\n* **Columns**:\\n\\nAdd the following formulas to the `Columns` property:\\n\\n```c#\\nSwitch(\\n    Pivot1.Selected.ItemKey,\\n    \\"MyUnpublishedArticles\\",\\n    Table(\\n        {\\n            ColDisplayName: \\"\ud83d\udcf0 Title\\",\\n            ColName: \\"title\\",\\n            ColBold: true,\\n            ColWidth: Parent.Width-100,\\n            ColRowHeader: true,\\n            ColResizable: true\\n        }\\n    ),\\n    Table(\\n        {\\n            ColDisplayName: \\"\ud83d\udcf0 Title\\",\\n            ColName: \\"title\\",\\n            ColBold: true,\\n            ColWidth: 700,\\n            ColRowHeader: true,\\n            ColResizable: true\\n        },\\n        {\\n            ColDisplayName: \\"\u270d\ufe0f Author\\",\\n            ColName: \\"author_name\\",\\n            ColResizable: true,\\n            ColWidth: 200,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83c\udfe2 Org\\",\\n            ColName: \\"org_name\\",\\n            ColResizable: true,\\n            ColWidth: 100,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\u23f0 Published\\",\\n            ColName: \\"formatted_date\\",\\n            ColResizable: true,\\n            ColWidth: 150,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83d\udcac\\",\\n            ColName: \\"comments_count\\",\\n            ColResizable: true,\\n            ColSortable: true,\\n            ColWidth: 50,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\u2764\ufe0f\\",\\n            ColName: \\"public_reactions_count\\",\\n            ColResizable: true,\\n            ColSortable: true,\\n            ColWidth: 50,\\n            ColRowHeader: true\\n        },\\n        {\\n            ColDisplayName: \\"\ud83c\udff7\ufe0f\\",\\n            ColName: \\"tags\\",\\n            ColWidth: 250,\\n            ColFirstMultiValueBold: true,\\n            ColMultiValueDelimiter: \\" \\"\\n        }\\n    )\\n)\\n```\\n\\nThe above formulas ensure that when the \\"MyUnpublishedArticles\\" item is selected in the pivot, it only shows the title column. If that item is not selected, it will show a lot more columns. All the columns are added to a table in both cases, and have properties like:\\n\\n* ColDisplayName: the display name of the column\\n* ColName: the name of the field\\n* ColBold: if the column needs to be bold or not\\n* ColWidth: the width of the column\\n\\nIf you want to know all possible properties, make sure to check out the [docs](https://learn.microsoft.com/power-platform/guidance/creator-kit/detailslist#columns-properties?WT.mc_id=power-82212-dlaskewitz).\\n\\n## Publish your app\\n\\nWith that, our app is ready for publishing. Select the save icon on the top right corner of the screen or use the `ctrl + S` or `cmd + S` shortcut to save your app. Publish your app by selecting the icon in the top right corner of the screen or use the `ctrl + shift + P` or `cmd + shift + P` shortcut to save your app.\\n\\nThere\'s also a share icon in the same row as the save and publish icons. You can use that to share the app with your colleagues:\\n\\n![Share app experience where you can share the app with a colleague, add an email message and an image](Part2-10-Share.png)\\n\\n## Completed solution\\n\\nThe custom connector and the canvas app are available as a solution via [this link](../../../../resources/custom-connector-solution/Forem_1_0_0_0.zip). You can import the solution via the import solution functionality that is described [here](https://learn.microsoft.com/power-apps/maker/data-platform/import-update-export-solutions).\\n\\nAnd that also concludes this blog, hopefully this helps you when you start developing with Power Apps. Don\'t forget to check out the resources below!\\n\\n## Resources\\n\\n* [**Create a canvas app from scratch**](https://learn.microsoft.com/power-apps/maker/canvas-apps/create-blank-app?WT.mc_id=power-82212-dlaskewitz)\\n* [**Creator Kit**](https://learn.microsoft.com/power-platform/guidance/creator-kit/overview?WT.mc_id=power-82212-dlaskewitz)\\n* [**Creator Kit components**](https://learn.microsoft.com/power-platform/guidance/creator-kit/components/?WT.mc_id=power-82212-dlaskewitz)\\n* [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=power-82212-dlaskewitz): Enable millions of low code devs by building custom connectors\\n* [**Learn Collection**](https://aka.ms/ai-april/collection) LowCode February\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day10","metadata":{"permalink":"/hubv2/blog/2023-day10","source":"@site/blog/2023-lcf/2023-02-10/index.md","title":"10. Secure Connectors with APIM","description":"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors.","date":"2023-02-10T00:00:00.000Z","formattedDate":"February 10, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"28-days-of-lowcode","permalink":"/hubv2/blog/tags/28-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":15.97,"hasTruncateMarker":false,"authors":[{"name":"Justin Yoo","title":"Senior Cloud Advocate (.NET)","url":"https://github.com/justinyoo","imageURL":"https://github.com/justinyoo.png","key":"justin"},{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"}],"frontMatter":{"slug":"2023-day10","title":"10. Secure Connectors with APIM","authors":["justin","julia"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","custom-connector","api-management","apim","security","authn","authentication","authorization"],"image":"https://microsoft.github.io/Low-Code/img/og/30-10.png","description":"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors.","tags":["low-code-february","28-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"9b. Use the Custom Connector","permalink":"/hubv2/blog/2023-day9-use"},"nextItem":{"title":"11. Azure Integration Patterns","permalink":"/hubv2/blog/2023-day11"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" content=\\"https://microsoft.github.io/Low-Code/blog/2023-day10\\" />\\n  <meta name=\\"twitter:title\\" content=\\"Providing Power Platform custom connector with additional security via Azure API Management\\" />\\n  <meta name=\\"twitter:description\\" content=\\"Throughout this post, let\'s discuss how Azure API Management can offer extra security to Power Platform custom connectors\\" />\\n  <meta name=\\"twitter:image\\" content=\\"https://microsoft.github.io/Low-Code/img/og/30-10.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" content=\\"@justinchronicle\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" href=\\"https://microsoft.github.io/Low-Code/blog/2023-day10\\" />\\n</head>\\n\\nWelcome to `Day 10` of #30DaysOfAzureAI!\\n\\nThe theme for this week is **backend**. Yesterday we talked about building custom connectors. Today we\'ll explore the topic of _providing Power Platform custom connectors with additional security via [Azure API Management][az apim]_. Ready? Let\'s go!\\n\\n## What We\'ll Cover\\n\\n- [**Authentication Types**](#power-platform-custom-connector-authentication-types) for Custom Connectors\\n- [**Prerequisites**](#prerequisites)\\n- [**Deploying**](#deploying-sample-apps) Sample Apps\\n  1. [API Key Auth](#1-api-key-auth)\\n  2. [Basic Auth](#2-basic-auth)\\n  3. [OAuth2 \u2013 Authorisation Code Auth](#3-oauth2--authorisation-code-auth)\\n  4. [BFF (Backends-for-Frontends) \u2013 Combine API Key Auth & Basic Auth](#4-bff-backends-for-frontends--combination-of-api-key-auth-and-basic-auth)\\n- [**Exercise**](#exercise--try-it-yourself) \u2013 Try it yourself!\\n- [**Resources**](#resources--for-self-study) \u2013 For self-study!\\n\\n![Empty Banner Placeholder](./../../../static/img/og/30-10.png)\\n\\n\\n## Custom Connector Authentication Types\\n\\nPower Platform custom connectors currently support [four authentication flow options &ndash; No Auth flow, API Key Auth flow, Basic Auth flow and OAuth2 Authorisation Code Auth flow][az pp cuscon authn]. \\"No Auth flow\\" is definitely not an option this time, but let\'s focus on the other three options throughout this post. You also need to be aware that those authentication types are mutually exclusive. In other words, you CANNOT combine two or more authentication scenarios on one custom connector. Also, if you want to use the API Key auth flow, you CANNOT use the other two authentication types within the custom connector. I\'ll discuss that later in this post.\\n\\n\\n## Prerequisites\\n\\nFor this post, you need to have the following signed up:\\n\\n- [Microsoft 365 Developer Program][m365 dev]\\n- [Power Platform Developer Program][pp dev]\\n- [Free Microsoft Azure subscription][az free]\\n- [Free GitHub account][gh free]\\n\\n\\n## Deploying Sample Apps\\n\\nLet\'s deploy the sample apps for this post. Fork [this repository][gh sample] and follow the detailed instruction on its README to provision and deploy the sample apps. Once everything is done, you will have one [API Management][az apim] instance and three [Azure Functions][az fncapp] app instances representing authentication scenarios like API Key Auth, Basic Auth and OAuth2 Auth, respectively.\\n\\n![Azure resources provisioned](./image-01.png)\\n\\nEach function app has already been integrated with API Management. Let\'s take a look at each authentication type.\\n\\n\\n### 1. API Key Auth\\n\\nThe first option is using an API key to provide extra security. Using Azure API Management, you can choose between:\\n\\n- A concept called [subscription][az apim subscription], where you use the subscription key through a HTTP request header of `Ocp-Apim-Subscription-Key`\\n- Or you can use a HTTP request query string of `subscription-key`.\\n\\nBoth options add another security layer to your API, in addition to your Azure Function app\'s `x-functions-key` in the request header or `code` in the request querystring.\\n\\n1. Let\'s take a look at the [API policy configurations][az apim policies] in API Management.\\n\\n    ![API Key Auth - API policy](./image-02.png)\\n\\n   Through this policy, the function app\'s API key is integrated. Therefore, you don\'t need to worry about the function app\'s API key.\\n\\n1. Now, you want to add the API Management\'s API key. First, make sure your API settings have enabled the subscription. Also, ensure that no user authorization is enabled by selecting \\"None\\" against the \\"User authorization\\" option.\\n\\n    ![API Key Auth - enable subscription](./image-03.png)\\n\\n1. Export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option. Then you will be able to download an OpenAPI document.\\n\\n    ![API Key Auth - export OpenAPI document](./image-04.png)\\n\\n   You might have a question here.\\n\\n   > What does the \\"Create Power Connector\\" menu do? Isn\'t that for this API key auth?\\n\\n   That\'s actually a valid question. The only difference between exporting the OpenAPI document and creating the connector directly through the menu is that which tenant you want to export the connector to. If you want to only use within your tenant, the \\"Create Power Connector\\" is a simple and easy way to generate a custom connector. However, if your connector is not only for your tenant, but also other tenant, you should export the OpenAPI document and use it in the other tenants.\\n\\n   Therefore, throughout this post, you\'re assuming to use this custom connector in general purpose, rather than tied with your tenant.\\n\\n1. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use the API key through `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        }\\n      },\\n      \\"security\\": [\\n        {\\n          \\"apiKeyHeader\\": []\\n        },\\n        {\\n          \\"apiKeyQuery\\": []\\n        }\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Alright. Let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![API Key Auth - custom connector by OpenAPI file](./image-05.png)\\n\\n1. It automatically identifies the authentication type to \\"API Key\\", the API key parameter name of `Ocp-Apim-Subscription-Key` and the parameter location of \\"Header\\".\\n\\n    ![API Key Auth - custom connector authentication type](./image-06.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. Then, it requires the API key. Enter the API key generated from the API Management.\\n\\n    ![API Key Auth - custom connector connection](./image-07.png)\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![API Key Auth - custom connector test](./image-08.png)\\n\\nWe\'ve added extra security to the custom connector with API Management\'s API key.\\n\\n\\n### 2. Basic Auth\\n\\nThe second option is to use the basic auth flow. It\'s important to know that **API Management doesn\'t support this basic auth flow out-of-the-box**. Although it\'s a limitation, you can still apply this flow for the Power Platform custom connectors by slightly modifying the OpenAPI document.\\n\\n1. Let\'s take a look at the API policy, which is basically the same as the one in the previous section &ndash; integrate the function app\'s API key with API Management.\\n\\n    ![Basic Auth - API policy](./image-09.png)\\n\\n1. Make sure that you\'re not going to use the subscription key at this time. Therefore, disable the subscription key. By doing so, you no longer need the API key for this API.\\n\\n    ![Basic Auth - disable subscription](./image-10.png)\\n\\n   > **WARNING**: If you disable the subscription key for this exercise, your API endpoint works as like a public API &ndash; not secure at all. Therefore, you MUST implement the logic in your function app that validates the basic authentication header sent through API Management. As mentioned above, it\'s required to disable the subscription key because API Management doesn\'t natively support the basic auth feature. Therefore, if you want to use this approach, please use it with extra care.\\n\\n1. Once you\'re ready, export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option.\\n\\n    ![Basic Auth - export OpenAPI document](./image-11.png)\\n\\n1. Then, you will be able to download an OpenAPI document. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use either `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n   However, you MUST replace both with the basic auth because you will not use the API key auth this time.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'basicAuth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"basicAuth\\": {\\n          \\"type\\": \\"basic\\"\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'basicAuth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      },\\n      \\"security\\": [\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"apiKeyHeader\\": []\\n        },\\n        {\\n          \\"apiKeyQuery\\": []\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'basicAuth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"basicAuth\\": []\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'basicAuth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Once you update the OpenAPI document, let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![Basic Auth - custom connector by OpenAPI file](./image-12.png)\\n\\n1. It automatically identifies the authentication type as \\"Basic authentication\\", \\"username\\", and \\"password\\".\\n\\n    ![Basic Auth - custom connector authentication type](./image-13.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. Then, it requires the username and password. The username and password in this sample app are for [Atlassian Jira][atlassian jira]. Therefore, get your email address as the username and API token as the password from there.\\n\\n    ![Basic Auth - custom connector connection](./image-14.png)\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![Basic Auth - custom connector test](./image-15.png)\\n\\nWe\'ve added extra security to the custom connector with basic auth.\\n\\n\\n### 3. OAuth2 - Auth Code\\n\\nThe third option is to use [OAuth2][oauth2]. There are many authentication flows in OAuth2, but Power Platform custom connector only supports the [Authorisation code auth flow][az ad authn authcodeauth] at this time of writing. Therefore, let\'s focus on that. The basic idea of using any OAuth2 auth flow is to get the access token and the resources you want. It\'s safe to assume that the function app is able to understand the access token and process it.\\n\\n1. To use OAuth2 auth flow, you need to first [register an app][az ad register app] in [Azure Active Directory][az ad]. After registering a new app, it will give the ability to get the access codes. I\'m not going into too many details here, but it\'s worth taking a look at [this document][gh sample authcodeauth readme]. Once you create the app, you will have the following information:\\n\\n    - Tenant ID\\n    - Client ID\\n    - Client secret\\n    - Endpoint URL for authorization\\n    - Endpoint URL for the access token\\n    - Endpoint URL for the refresh token\\n\\n1. With this information, you need to integrate it with API Management. Go to Azure Portal, open the API Management instance, and navigate to the \\"OAuth 2.0 + OpenID Connect\\" blade. Add a new OAuth2 service under the \\"OAuth 2.0\\" tab.\\n\\n    ![Auth Code Auth - new OAuth2 service](./image-16.png)\\n\\n1. Enter the following details in the fields and create the service.\\n\\n    - Display name: `AuthCode Auth`\\n    - Client registration page URL: `http://localhost`\\n    - Authorization grant types: tick only on \\"Authorization code\\"\\n    - Authorization endpoint URL: endpoint URL for authorization noted from the above\\n    - Token endpoint URL: endpoint URL for access token noted from the above\\n    - Default scope: `https://graph.microsoft.com/.default`\\n    - Client ID: client ID noted from the above\\n    - Client secret: client secret noted from the above\\n\\n    After that, you will have both redirect URLs:\\n\\n    - `null/signin-oauth/code/callback/authcode-auth`\\n    - `null/signin-oauth/implicit/callback`\\n\\n    Replace `null` with your API Management instance URL like `https://{{APIM_NAME}}.azure-api.net`, where `{{APIM_NAME}}` is your API Management instance name.\\n\\n1. Add both redirect URLs to your registered app on Azure AD as redirect URLs.\\n\\n1. Check out the API policy, which is basically the same as in the previous sections &ndash; integrate the function app\'s API key with API Management.\\n\\n    ![Auth Code Auth - API policy](./image-17.png)\\n\\n1. Make sure you will not use the subscription key this time. Therefore, disable the subscription key. By doing so, you no longer need the API key for this API. In addition to this, because you\'re using OAuth2 authorization, choose the \\"OAuth 2.0\\" option and select the OAuth 2.0 server of \\"AuthCode Auth\\" that you just created right before.\\n\\n    ![Auth Code Auth - disable subscription](./image-18.png)\\n\\n    It\'s also worth noting that because the custom connector sends the OAuth2 access token to the function app through API Management, it\'s safe to assume that the function app is able to understand the token and process it.\\n\\n1. Once you\'re ready, export the OpenAPI document by selecting the \\"Export\\" menu and choosing the \\"OpenAPI v2 (JSON)\\" option.\\n\\n    ![Auth Code Auth - export OpenAPI document](./image-19.png)\\n\\n1. Then, you will be able to download an OpenAPI document. Let\'s take a look at the document. It might look like the following JSON document, saying that you MUST use either `Ocp-Apim-Subscription-Key` in the request header or `subscription-key` in the request querystring.\\n\\n   However, you MUST remove both because you will not use the API key auth this time. Make sure you MUST replace `{{TENANT_ID}}` with your tenant ID.\\n\\n    ```jsonc\\n    {\\n      \\"swagger\\": \\"2.0\\",\\n      ...\\n      \\"securityDefinitions\\": {\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"apiKeyHeader\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"Ocp-Apim-Subscription-Key\\",\\n          \\"in\\": \\"header\\"\\n        },\\n        \\"apiKeyQuery\\": {\\n          \\"type\\": \\"apiKey\\",\\n          \\"name\\": \\"subscription-key\\",\\n          \\"in\\": \\"query\\"\\n        },\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Keep \'oauth2AuthCode Auth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        \\"oauth2AuthCode Auth\\": {\\n          \\"type\\": \\"oauth2\\",\\n          \\"scopes\\": {\\n            \\"https://graph.microsoft.com/.default\\": \\"\\"\\n          },\\n          \\"flow\\": \\"accessCode\\",\\n          \\"authorizationUrl\\": \\"https://login.microsoftonline.com/{{TENANT_ID}}/oauth2/v2.0/authorize\\",\\n          \\"tokenUrl\\": \\"https://login.microsoftonline.com/{{TENANT_ID}}/oauth2/v2.0/token\\"\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Keep \'oauth2AuthCode Auth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      },\\n      \\"security\\": [\\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"apiKeyHeader\\": [],\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        },\\n        {\\n          \\"apiKeyQuery\\": [],\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Remove both \'apiKeyHeader\' and \'apiKeyQuery\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n    \\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Add \'oauth2AuthCode Auth\' \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f\\n        {\\n          \\"oauth2AuthCode Auth\\": [\\n            \\"https://graph.microsoft.com/.default\\"\\n          ]\\n        }\\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Add \'oauth2AuthCode Auth\' \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f\\n      ],\\n      \\"paths\\": {\\n        ...\\n      }\\n      ...\\n    }\\n    ```\\n\\n1. Once you update the OpenAPI document, let\'s import this OpenAPI document for a custom connector. Go to either `https://make.powerapps.com` for Power Apps or `https://make.powerautomate.com` for Power Automate, and create a custom connector by importing an OpenAPI file.\\n\\n    ![Auth Code Auth - custom connector by OpenAPI file](./image-20.png)\\n\\n1. It automatically identifies the authentication type to \\"OAuth 2.0\\" and the Identity Provider of \\"Generic OAuth 2\\". Then, enter the Client ID, Client secret, and the Refresh URL noted above. Using a different registered app here is OK if it\'s under the same tenant.\\n\\n    ![Auth Code Auth - custom connector authentication type](./image-21.png)\\n\\n1. After creating the connector, let\'s create a connection for the connector. As you\'ve already provided the client ID and secret, you will immediately create the connection.\\n\\n1. Test the connector to see whether it works OK or not.\\n\\n    ![Auth Code Auth - custom connector test](./image-22.png)\\n\\nWe\'ve added extra security to the custom connector with OAuth2 - authorization code auth.\\n\\n\\n### 4. BFF - Combine Auth\\n\\nMany organisations nowadays have requirements using the [BFF (Backends-for-frontends) pattern][az patterns architecture bff] through API Management, mainly if your organisation adopts microservice architecture. It\'s not uncommon that APIs use different authentication approaches for different APIs &ndash; one uses the API key auth, another uses the basic key auth, and the other uses the OAuth2 auth.\\n\\nIf you are about to build a BFF with those APIs using different authentication methods, what would you do? What could you do if you\'re even about to create the BFF for the Power Platform custom connector? There are many different combinations of authentication methods, but let\'s focus on following two &ndash; API key auth and basic auth:\\n\\n1. First of all, you MUST choose which authentication type you will use for the main one for the Power Platform custom connector. If you want to use basic auth as the main one, the custom connector doesn\'t have to know the API key and vice versa. In other words, the other authentication method MUST be handled by the API Management policy of the BFF API.\\n\\n1. Let\'s take a look at [this OpenAPI document][gh sample openapi bff] for BFF. It combines both apps using the API key auth and basic auth, respectively.\\n\\n    ```yaml\\n    openapi: 3.0.1\\n    ...\\n    paths:\\n      /greeting:\\n        get:\\n          tags:\\n            - greeting\\n          summary: Greeting\\n          operationId: Greeting\\n          ...\\n          security:\\n            - apiKeyHeader: [ ]\\n            - apiKeyQuery: [ ]\\n      /profile:\\n        get:\\n          tags:\\n            - profile\\n          summary: Profile\\n          operationId: Profile\\n          ...\\n          security:\\n            - apiKeyHeader: [ ]\\n            - apiKeyQuery: [ ]\\n            - basicAuth: [ ]\\n    ...\\n    components:\\n      ...\\n      securitySchemes:\\n        apiKeyHeader:\\n          type: apiKey\\n          name: Ocp-Apim-Subscription-Key\\n          in: header\\n        apiKeyQuery:\\n          type: apiKey\\n          name: subscription-key\\n          in: query\\n        basicAuth:\\n          type: http\\n          scheme: basic\\n    ```\\n\\n   It defines API key auth and basic auth in the document and applies them to each endpoint.\\n\\n1. Import this OpenAPI to API Management. Then check out the settings. Make sure you MUST activate the subscription.\\n\\n    ![BFF - enable subscription](./image-23.png)\\n\\n1. Add the [`authentication-basic` as an inbound policy][az apim policies basicauth] that sets the basic auth token to the request header. After this, API Management automatically injects this basic auth token into every request header.\\n\\n    ![BFF - basic authentication policy](./image-24.png)\\n\\n1. Export the OpenAPI document. As you use the API key auth, follow the [1. API Key Auth](#1-api-key-auth) pattern.\\n\\n1. In the Power Platform custom connector, you only need the API key provided by API Management to create the connection because API Management has already encapsulated the basic auth token.\\n\\n1. Test the connector to see whether it works OK or not. As you can see, both endpoints work perfectly fine.\\n\\n    ![BFF - custom connector test](./image-25.png)\\n\\nWe\'ve created a BFF by combining APIs that use API key auth and basic auth, and the BFF has been used for the Power Platform custom connector. However, as mentioned earlier in this post, we have to choose only one authentication type due to the restriction of authentication types in the Power Platform custom connector. Therefore, if you need more than one authentication type for your connector, you MUST choose one, and API Management MUST encapsulate all the others.\\n\\nTheoretically, there are three possible combinations for BFF:\\n\\n- API key auth and basic auth\\n- API key auth and OAuth2 auth code auth\\n- Basic auth and OAuth2 auth code auth\\n\\nThroughout this post, we\'ve walked through the first combination. After that, you can try the other two combinations on your end!\\n\\n\\n## Exercise &ndash; Try it yourself!\\n\\nIf you haven\'t joined the following programs, it\'s time to do so for further learning!\\n\\n- [Microsoft 365 Developer Program][m365 dev]\\n- [Power Platform Developer Program][pp dev]\\n- [Free Microsoft Azure subscription][az free]\\n- [Free GitHub account][gh free]\\n\\nThen, follow the steps below. After that, you will be the one who knows better security on Power Platform custom connectors!\\n\\n- Fork this [GitHub repository][gh sample] to provision and deploy the sample apps.\\n- Read and follow the instructions for each scenario:\\n  - [API Key Auth][gh sample apikeyauth readme]\\n  - [Basic Auth][gh sample basicauth readme]\\n  - [Authorisation Code Auth][gh sample authcodeauth readme]\\n  - [BFF][gh sample bff readme]\\n\\n\\n## Resources &ndash; Self-Study\\n\\n- [Cloud architecture pattern &ndash; BFF (Backends-for-frontends)][az patterns architecture bff]\\n- [Azure AD application model][az ad register app]\\n- [Azure API Management authentication and authorisation][az apim security authn]\\n- [Power Platform custom connector parameters][az pp cuscon authn]\\n- [Creating Microsoft 365 Developer Environment][m365 dev create]\\n\\n\\n[gh sample]: https://github.com/devkimchi/power-platform-connector-via-apim\\n[gh sample apikeyauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/ApiKeyAuthApp/README.md\\n[gh sample basicauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/BasicAuthApp/README.md\\n[gh sample authcodeauth readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/AuthCodeAuthApp/README.md\\n[gh sample bff readme]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/src/BffApp/README.md\\n[gh sample openapi bff]: https://github.com/devkimchi/power-platform-connector-via-apim/blob/main/infra/apim-openapi-bff.yaml\\n\\n[az patterns architecture bff]: https://learn.microsoft.com/azure/architecture/patterns/backends-for-frontends?WT.mc_id=dotnet-82212-juyoo\\n\\n[az ad]: https://learn.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-82212-juyoo\\n[az ad authn authcodeauth]: https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow?WT.mc_id=dotnet-82212-juyoo\\n[az ad register app]: https://learn.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-82212-juyoo\\n\\n[az apim]: https://learn.microsoft.com/azure/api-management/api-management-key-concepts?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies]: https://learn.microsoft.com/azure/api-management/api-management-howto-policies?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies setheader]: https://learn.microsoft.com/azure/api-management/set-header-policy?WT.mc_id=dotnet-82212-juyoo\\n[az apim policies basicauth]: https://learn.microsoft.com/azure/api-management/authentication-basic-policy?WT.mc_id=dotnet-82212-juyoo\\n[az apim subscription]: https://learn.microsoft.com/azure/api-management/api-management-subscriptions?WT.mc_id=dotnet-82212-juyoo\\n[az apim security authn]: https://learn.microsoft.com/azure/api-management/authentication-authorization-overview?WT.mc_id=dotnet-82212-juyoo\\n\\n[az fncapp]: https://learn.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-82212-juyoo\\n\\n[az pp cuscon authn]: https://learn.microsoft.com/connectors/custom-connectors/connection-parameters?WT.mc_id=dotnet-82212-juyoo\\n\\n[atlassian jira]: https://www.atlassian.com/software/jira\\n[oauth2]: https://oauth.net/2/\\n\\n[m365 dev]: https://learn.microsoft.com/office/developer-program/microsoft-365-developer-program?WT.mc_id=dotnet-82212-juyoo\\n[m365 dev create]: https://learn.microsoft.com/power-platform/developer/create-developer-environment\\n[pp dev]: https://learn.microsoft.com/power-apps/maker/developer-plan?WT.mc_id=dotnet-82212-juyoo?WT.mc_id=dotnet-82212-juyoo\\n[az free]: https://azure.microsoft.com/free/?WT.mc_id=dotnet-82212-juyoo\\n[gh free]: https://github.com/signup"},{"id":"2023-day11","metadata":{"permalink":"/hubv2/blog/2023-day11","source":"@site/blog/2023-lcf/2023-02-11/index.md","title":"11. Azure Integration Patterns","description":"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve business challenges more efficiently.","date":"2023-02-11T00:00:00.000Z","formattedDate":"February 11, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"28-days-of-lowcode","permalink":"/hubv2/blog/tags/28-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":8.86,"hasTruncateMarker":false,"authors":[{"name":"Linda Nichols","title":"Principal Solution Spec GBB","url":"https://github.com/lynnaloo","imageURL":"https://github.com/lynnaloo.png","key":"linda"},{"name":"Stephanie Lemus","title":"Principal Solution Spec GBB","url":"https://github.com/stephle00","imageURL":"https://github.com/stephle00.png","key":"stephanie"}],"frontMatter":{"slug":"2023-day11","title":"11. Azure Integration Patterns","authors":["linda","stephanie"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","azure","fusion teams","integration patterns","low code"],"image":"https://microsoft.github.io/Low-Code/img/og/30-11.png","description":"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve business challenges more efficiently.","tags":["low-code-february","28-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"10. Secure Connectors with APIM","permalink":"/hubv2/blog/2023-day10"},"nextItem":{"title":"12. Recap - Integrations Week \u2728","permalink":"/hubv2/blog/2023-day12"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day11\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"11. Low Code + Azure Integration Patterns\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve busienss challenges more efficiently.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-10.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@lynnaloo\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day11\\" />\\n</head>\\n\\nWelcome to `Day 11` of #30DaysOfAzureAI!\\n\\nThe theme for this week is **backend integration**. Yesterday we talked about building secure connectors with Azure API Management. Today we\'ll explore some real world use cases that integrate Azure with Power Platform to help you resolve busienss challenges more efficiently. Let\'s talk about **Low Code and Azure Integration Patterns!**.\\n\\n## What We\'ll Cover\\n * Why Power Platform and Azure together?\\n * Access data beyond a low code platform\\n * Use Azure API Management use low code development\\n * Low Code + Azure Integration Patterns\\n\\n\\n![Speaker Card for Feb 11](./../../../static/img/og/30-11.png)\\n\\n\\n## Why Power Platform and Azure together?\\n\\nBy using Microsoft Azure to extend the capabilities of Power Platform, you can help solve the App Gap challenge. \\n\\nSimply put, the app gap is a condition where there is an increasing need for custom applications, but you don\'t have enough developers to build the applications in the business units\u2019 backlog. \\n\\nFor many businesses today, the *app gap* is already very real and getting worse.  Current estimates are that the world is currently short some 4m developers \u2026 with an estimated 500 million new apps needing to be built by 2025. This challenge emphasizes the need to find creative and efficient ways to deliver more custom applications to meet the needs of the business with fewer developers.\\n\\n**So how do we build more apps, faster?**\\n\\nWe can accelerate app development by letting pro developers do what they do best: traditional development and increasing the availability of organizational services & data.\\n\\nWe then simultaneously empower low code developers to solve some of their business problems themselves by giving them a low code development platform and controlled access to the right data, APIs & service endpoints.\\n\\nThis is at the heart of the fusion team development concept \u2013 joining professional & low code developers together to:\\n\\n-\\tClose the app gap\\n-\\tBuild applications faster to reduce the organizational app backlog\\n-\\tCreate new developers from untraditional places\\n-\\tIncubate a culture of innovation\\n\\n\\n**Resources:**\\n* [Expedite application delivery with low-code and fusion teams](https://learn.microsoft.com/events/build-2022/odbrk45-expedite-application-delivery-with-low-code-fusion-teams/?WT.mc_id=javascript-82212-ninarasi)\\n* [Fusion Development Ebook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## How do I access data from Microsoft Azure & beyond from a low code platform?\\n\\nPower Platform uses the concept of connectors - wrappers around the OpenAPI specifications - the industry standard for documenting REST APIS. \\n\\nConnectors abstract away the details of the underlying API while still offering a low code interface within Power Platform. Using connectors, low code developers can interact with APIs without having to have coding ability or extensive knowledge of the underlying API or backend systems. Connectors also give a consistent experience when authenticating to APIs without added custom code.\\n\\nPower Platform provides >1000 built-in connectors which enables easy integration with a wide variety of systems & services.  Pre-built connectors include Dynamics 365, Salesforce, SAP and  Microsoft Teams among many others \u2013 in addition to seamless connection to Microsoft Azure services.  \\n\\nTo connect to internal organizational APIs or solutions where there isn\u2019t an existing connector, Power Platform includes the ability to create custom connectors, which can be used as wrappers to APIs exposed through an API Gateway. \\n\\n**Resources:**\\n* [Connectors overview](https://learn.microsoft.com/connectors/connectors/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom Connectors overview](https://learn.microsoft.com/connectors/custom-connectors/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Why use Azure API Management (APIM) with low code development?\\n\\nAzure API Management is a cloud-based platform for creating, managing & publishing APIs.  It supports fusion development patterns through:\\n\\n-\\tDecoupling: Abstracting APIs from their backend implementation and hosting them under a single domain/IP address.  The API layer is decoupled from a specific user interface so the same API can be used in both traditional & low code applications.\\n-\\tGovernance: APIM adds an additional control plane for low code development by allowing access only to specified apps & users and not exposing APIs directly.\\n-\\tMonitoring and debugging: Use Azure Application Insights to debug, monitor traffic & configure analytics.\\n-\\tChange Management: Versioning & revision control to manage breaking changes for traditional & low code developers.\\n-\\tInternal Documentation: Creates a catalog of available APIs with downloadable Open API specifications via the Developer Portal.\\n-\\tIntegration with Power Platform: Pushing custom connectors directly to Power Platform environments makes them available at once for use in apps & automation flows.\\n\\n**Resources:**\\n* [What is API Management?](https://learn.microsoft.com/azure/api-management/api-management-key-concepts/?WT.mc_id=javascript-82212-ninarasi)\\n* [Export custom connectors from API Management](https://learn.microsoft.com/azure/api-management/export-api-power-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [APIM Hands-on Lab](https://azure.github.io/apim-lab/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Low Code + Azure Integration Patterns\\n\\nThe following technology patterns are generalized with regards to specific use cases but are drawn from real-world customer scenarios using Azure with Power Platform, aka \u201cfusion development.\u201d \\n\\nA common part of many of these fusion architecture patterns is the use of custom connectors that are exported & controlled from Azure API Management.\\n\\n![Feb11](./picture-1.png)\\n\\n \\n**IT Democratization**\\n\\nThis is the most basic pattern for fusion development.  This pattern allows for low code developers, without a coding background, to build applications using their organization\u2019s data. This architecture uses APIs written by pro developers to amplify existing data and expose it to low code developers using an API gateway. \\n\\nThe Azure API Management Developer Portal provides an enterprise catalog which aggregates the data & APIs available to low code & professional developers alike.\\n \\n![Feb11](./it.png)\\n \\n\\n**Resources:**\\n* [Fusion Development Ebook](https://learn.microsoft.com/power-apps/guidance/fusion-dev-ebook/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**AI/ML integrations**\\n\\nAzure includes a rich suite of managed AI and machine learning services, including Azure Cognitive Services and Azure Machine Learning, to more easily build & deploy AI models. \\n\\nBy combining Azure\u2019s AI/ML capabilities with Power Platform, you can build intelligent solutions that bring together the best of both worlds.  For example:\\n\\n*\\tBuilding custom machine learning models in Azure AI services front-ended by a low code app that consumes the resulting models to deliver insights about images & videos uploaded by end users.\\n*\\tAfter using AI/ML on the backend to process large amounts of data, Power Automate workflows can watch the resulting output, triggering custom actions & notifications based on the content.\\n*\\tCreating a low code user interface for data labeling, making it easier for your business subject matter experts to label their datasets for use in training new custom Azure machine learning experiments.\\n\\n![Feb11](./aiml.png)\\n \\n\\n**Resources:**\\n* [Azure Cognitive Services overview](https://azure.microsoft.com/products/cognitive-services/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Azure Machine Learning](https://azure.microsoft.com/products/machine-learning/#product-overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Azure Open AI](https://azure.microsoft.com/products/cognitive-services/openai-service/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom Vision + Power Apps Demo](https://github.com/appdevgbb/power-apps-custom-vision/?WT.mc_id=javascript-82212-ninarasi)\\n* [Power Apps and Azure Cognitive Services Demo](https://www.youtube.com/watch?v=ka_yY77b-0M/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**IoT/Event-driven Systems** \\n\\nIoT systems can generate large amounts of data from connected devices. By integrating Power Platform with Azure IoT, you can build custom low code apps & workflows that act on the IoT device data. \\n\\nFor example:\\n\\n*\\tAzure IoT Hub can collect & process data from IoT Devices, while Power Apps + Power BI can be used to build custom dashboards to supply insights & visualizations of the data.\\n*\\tDesigning Power Automate workflows that are only triggered based on specific events or conditions which then send notifications to other systems, like Microsoft Teams.\\n*\\tBuilding fast, low-code interfaces for remote command & control of IoT edge devices.\\n\\n ![Feb11](./iot.png)\\n\\n**Resources:**\\n* [Azure IoT Hub overview](https://azure.microsoft.com/products/iot-hub/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Messaging Services on Azure Overview](https://azure.microsoft.com/solutions/messaging-services/#overview/?WT.mc_id=javascript-82212-ninarasi)\\n* [Tornado Warning System Demo](https://github.com/appdevgbb/tornado-watchdog/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**On-prem data with Azure and Power Platform**\\n\\nSometimes organizations have security requirements that require isolated communication between resources in the cloud and on-premises. By using Azure with on-premises systems, you can create a dedicated and private connection and bypass the public internet. \\n\\nBy using API Management in an Azure VNET (Virtual Network), you can also create secure connections between APIs and their backend services. Access to these APIs can be restricted to only allowing access to designated, trusted interfaces, such as Power Platform. This pattern has some of the same accessibility benefits of IT Democratization, but while respecting the security & isolation requirements of the business.\\n\\n\\n![Feb11](./onprem.png)\\n\\n**Resources:**\\n* [Connect to a VNET using APIM](https://learn.microsoft.com/azure/api-management/api-management-using-with-vnet?tabs=stv2/?WT.mc_id=javascript-82212-ninarasi)\\n* [Export a Custom connector from APIM](https://learn.microsoft.com/azure/api-management/export-api-power-platform/?WT.mc_id=javascript-82212-ninarasi)\\n* [Custom connector for Azure AD-protected Apps](https://learn.microsoft.com/connectors/custom-connectors/create-custom-connector-aad-protected-azure-functions/?WT.mc_id=javascript-82212-ninarasi)\\n* [Protect APIM with Azure AD](https://learn.microsoft.com/azure/api-management/api-management-howto-protect-backend-with-aad/?WT.mc_id=javascript-82212-ninarasi)\\n\\n**Azure Communication Services + Power Platform**\\n\\nAzure Communication Services allows you to add voice, video, and messaging capabilities to your applications. By integrating Power Platform with Azure Communication Services, you can build custom low code applications that easily incorporate these communication capabilities.\\n\\nCommon communication & low code scenarios include:\\n\\n*\\tCreate a flow using Power Automate to send out omnichannel notifications via email, SMS, and chat.\\n*\\tUsing Power Automate to create Event Grid triggered flows to process inbound communication events such as incoming calls or SMS messages.\\n*\\tUsing Azure Cognitive services, Azure Communication Services, and Power Automate together to do sentiment analysis that empowers support personnel to create contextual, personalized responses for end users.\\n*\\tCreate a Power App low code UI to trigger communication workflows and manage communication related metadata, like chat/SMS history.\\n \\n ![Feb11](./acs.png)\\n\\n**Resources:**\\n*\\t[Azure Communication Services overview](https://learn.microsoft.com/azure/communication-services/overview/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[SMS Connector](https://powerautomate.microsoft.com/connectors/details/shared_azurecommunicationservicessms/azure-communication-services-sms/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Email Connector](https://powerautomate.microsoft.com/connectors/details/shared_acsemail/azure-communication-services-email/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Chat Connector](https://powerautomate.microsoft.com/connectors/details/shared_acschat/azure-communication-services-chat/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Identity Connector](https://powerautomate.microsoft.com/connectors/details/shared_acsidentity/azure-communication-services-identity/?WT.mc_id=javascript-82212-ninarasi)\\n*\\t[Integrate sentiment analysis with SMS](https://aka.ms/lowCode/sentimentanalysis)\\n\\n**Mainframe Modernization and Extension**\\n\\nAzure integration services unlocks the ability to access & use Mainframe data.  Old green screen mainframe apps can be modernized to use modern technologies such as advanced data analytics & AI/ML services. \\n\\nBy combining Power Platform with mainframe application data, you can unlock data and democratize development that was previously limited to only professional developers. You can build low code user-friendly interfaces for accessing and working with Mainframe data, making it easier for non-technical users to interact with data. For example:\\n\\n\u2022\\tIngesting real-time data, like telemetry & system alerts, that trigger Power Automate flows and send notifications to Microsoft Teams. \\n\u2022\\tUsing Power Apps to create user interfaces that allow users to view, manage, and create visualizations for Mainframe application data.\\n\\n![Feb11](./mainframe.png) \\n\\n**Resources:**\\n* [Low-Code Meets Mainframe: Kyndryl data pipeline](https://ignite.microsoft.com/sessions/691884e3-273a-46eb-99ee-a0c761c86a1e?source=sessions/?WT.mc_id=javascript-82212-ninarasi)\\n\\n## Conclusion\\n\\nThese Azure low code patterns are just a few of the many integration patterns that bring together the best of both worlds. \\n\\nThe combination of Azure & Power Platform supplies a comprehensive set of tools for building internal APIs to access your organization\'s data, designing AI experiments, and programming IoT devices.  \\n\\nOur low code platform\u2019s capabilities help you quickly solve complex business problems & address the app gap problem with the fusion development process. \\n\\n** Get Started Today?** \\n\\n - [**Cloud Skills Challenge**](https://aka.ms/ai-april/challenge): Sign up for a month-long challenge and clime up the leaderboard\\n - [**PowerfulDevs Session**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi): Enable millions of low code devs by building custom connectors\\n - [**Learn Collection** ](https://aka.ms/ai-april/collection): #30DaysOfAzureAI resources center"},{"id":"2023-day12","metadata":{"permalink":"/hubv2/blog/2023-day12","source":"@site/blog/2023-lcf/2023-02-12/Feb12.md","title":"12. Recap - Integrations Week \u2728","description":"Let\'s recap Week 2 of #30DaysOfAzureAI focused on Backend Integrations with emphasis on data, security, serverless, connectors and usage patterns - join us at #AiApril https://aka.ms/ai-april","date":"2023-02-12T00:00:00.000Z","formattedDate":"February 12, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"recap","permalink":"/hubv2/blog/tags/recap"}],"readingTime":6.66,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-day12","title":"12. Recap - Integrations Week \u2728","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30-12.png","description":"Let\'s recap Week 2 of #30DaysOfAzureAI focused on Backend Integrations with emphasis on data, security, serverless, connectors and usage patterns - join us at #AiApril https://aka.ms/ai-april","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","recap"]},"prevItem":{"title":"11. Azure Integration Patterns","permalink":"/hubv2/blog/2023-day11"},"nextItem":{"title":"13. Build a Canvas App","permalink":"/hubv2/blog/2023-day13"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day12\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"12. Recap - Integrations Week \u2728\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s recap Week 2 of #30DaysOfAzureAI focused on Backend Integrations with emphasis on data, security, serverless, connectors and usage patterns - join us at #AiApril https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-12.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day12\\" />\\n</head>\\n\\nWelcome to `Day 12` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * **Look Back**: Recap Backend Integrations Week\\n * **Save the Date**: Powerful Dev Conference, Learn Live and Webinar for Power Platform and GitHub\\n * **Skill Up**: Self-Study Resources & Cloud-Skills Challenge\\n * **Look Ahead**: Are you ready for the Interface Week?!\\n * **Activity** Sign up for the [**Powerful Dev Conference**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) on Feb 15!\\n * **Resources**: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n![Speaker Card for Feb 12](./../../../static/img/og/30-12.png)\\n\\n\\n## **Look Back**: Week 2 Recap\\n\\nWow, how quickly time flies! We can hardly believe that we\'re almost halfway through our journey. How have you been enjoying the experience so far? We truly hope that you have found value in the carefully selected blogs, videos, workshops, and events that have been put together just for you. Our goal is for you to feel empowered to apply the knowledge you\'ve gained in various aspects of your life.\\n\\nFrom the bottom of our hearts, we want to say THANK YOU for supporting us on this journey. If you have any thoughts or feedback, please don\'t hesitate to reach out to us through [**GitHub Discussions**](https://github.com/microsoft/Low-Code/discussions). We value your input and look forward to hearing from you! \u2764\ufe0f\\n\\n\\n![Roadmap Image for Week 2](./../../../static/img/og/30-roadmap-week2.png)\\n\\n\\nHere are the highlights for week 2! If you\'re new to us, welcome to the party! You won\'t want to miss the amazing content we have in store for you in this week\'s [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog): \\n\\nWelcome to our series of blogs on low code development! This series is designed to help you understand the full potential of Power Platform and how it can transform the way you work. This week, our discussions spanned from introducing connectors, dataverse and serverelss apps to testing and constructing your own connector, as well as exploring various integration patterns. So, hang tight and get ready to dive into the exciting world of low-code and integration!\\n\\n* [**Connectors 101: Let\'s Make Some Connections!**](https://microsoft.github.io/Low-Code/blog/2023-day6)\\n\\nAre you new to connectors and curious about how they can enhance the functionalities of Power Platform? This blog provides a comprehensive overview of connectors and how they interact with data from various services. You\'ll get a 360 degree view of connectors and understand how they can be leveraged to streamline your work.\\n\\n* [**Do more with your Data for less - Dataverse!**](https://microsoft.github.io/Low-Code/blog/2023-day7)\\n\\nDo you want to create and manage your data and insights with ease to support your applications and more? Our second blog this week provides a walkthrough of Dataverse, from introduction to managing low-code to pro-code integration as well as controlling advanced business logic in a compliant manner.\\n\\n* [**Serverless Low Code**](https://microsoft.github.io/Low-Code/blog/2023-day8)\\n\\nDid you know that you can create serverless applications with low-code technology? Our third blog walks you through how Azure Logic Apps bring low-code technology to serverless computing. You\'ll learn how to build and deploy serverless applications with ease, leveraging the power of low-code.\\n\\n* [**Build and Use Custom Connectors**](https://microsoft.github.io/Low-Code/blog/2023-day9-build)\\n\\nWe also provide hands-on tutorials to help you put your knowledge into practice. Our fourth and fifth blogs [**Build a Custom Connector**](https://microsoft.github.io/Low-Code/blog/2023-day9-build) and [**Use the Custom Connector**](https://microsoft.github.io/Low-Code/blog/2023-day9-use) show you step-by-step how to build and consume custom connectors in the Power Platform environment - using a real-world OpenAPI specification and application scenario!\\n\\n* [**Secure Connectors with Azure API Management**](https://microsoft.github.io/Low-Code/blog/2023-day10)\\n\\nAzure API Management is one of the most commonly used tools for custom connectors in the Power Platform. Our sixth blog covers how to add additional security and control to your custom connectors with Azure API Management. You\'ll learn about different authentication types for custom connectors and how to deploy different authentication scenarios with various sample applications.\\n\\n* [**Low-Code + Azure Integration Patterns**](https://microsoft.github.io/Low-Code/blog/2023-day11)\\n\\nLast but not least, we end the week with a hands-on approach by showcasing key integration patterns that can elevate your work to the next level. It explores how low-code technology can be combined with Azure to tackle real-world challenges and provide practical solutions. We understand that people learn best from real-life examples, and this blog is designed to do just that.\\n\\n\\n## **#SaveTheDate**: Events\\n\\n* [**Powerful Devs Conference: Feb 15**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) Get ready to be amazed! In 3 days, the highly-anticipated Powerful Dev Conf is happening on February 15th. This signature event is packed with exciting content, where you\'ll hear from some of the top experts, including authors from this series, about the amazing features and practical usage of the Power Platform. With a fantastic speaker lineup, you won\'t want to miss this opportunity to take your knowledge and skills to the next level. So, check out the [scheduled sessions](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) and visit the site to reserve your spot today!\\n\\n  ![feb12](./Powerful%20Dev%20Social-Simple1.png)\\n\\n* [**Learn Live!**](https://aka.ms/ai-april/LearnLive) Do you have questions about the Microsoft Learn modules or the Cloud Skills Challenge? Then don\'t miss out on our \\"Learn Live\\" sessions! These sessions are the perfect opportunity to hear tips and insights from experts in the field, so join in and ask your questions: \\n  1. \ud83c\udf99 [**Feb 13**](https://aka.ms/ai-april/LearnLive) - Integrate OpenAPI-enabled Web APIs with Azure API Management\\n  2. \ud83c\udf99 [**Feb 27**](https://aka.ms/ai-april/LearnLive) - Manage Microsoft Power Platform deployments\\n\\n  ![feb12](./LearnLive.png)\\n\\n* [**Webinar: Power Platform & Azure Deploys with GitHub: Feb 14**](https://mktoevents.com/Microsoft+Event/383091/157-GQE-382) In this webinar, you\'ll learn about the capabilities that Power Platform opens up for GitHub, and discover the inner and outer loop functions that are available with Power Platform and GitHub. You\'ll also see how to author CI/CD pipelines and hear customer success stories from the retail and manufacturing industries. \\n\\n  ![feb12](./webinar.png)\\n\\n\\n* [**Ask The Experts!**](http://localhost:3000/Low-Code/ai-april/Video-Live#ask-the-experts) Have questions about Power Platform, low code development, or recent events and conferences? Then don\'t miss out on our \\"Ask the Experts\\" sessions! These are your chance to have a face-to-face discussion with our leaders and get all your questions answered.\\n    1. \ud83c\udf99 [**Feb 23, 9AM PST**](https://aka.ms/ATE0223/RSVP ) - Join this session for Q&A from the **Powerful Devs Conference** team. The Powerful Devs Conference is all about showing how code-first developers can integrate with the Power Platform to innovate faster. Our experts will be available to answer questions about full code and low code integration.\\n\\n    ![feb12](./ate_powerfuldev.png)\\n\\n    2. \ud83c\udf99 [**Mar 09, 9AM PST**](https://aka.ms/ATE0309/RSVP) - Join this session for Q&A from the **Low Code February** team, including authors of this #30DaysOfAzureAI series. We will have experts in code-first integration with the Power Platform live to answer questions related to the content of the Low Code February events.\\n\\n    ![feb12](./ate_lowcodefeb.png)\\n\\n## **Resources:** For Self-Study\\n\\nUnable to keep up with the daily pace? No problem! Check out these our self-study materials designed to help you learn at your own convenience:\\n1. [**Resource Collection**](https://aka.ms/ai-april/collection): Bookmark the collection for a 1-stop resource containing all relevant links to documentation and training, as covered in the #30DaysOfAzureAI blogs. \\n2. [**Hands-on Workshops**](https://aka.ms/ai-april/workshop): learn by doing! These labs help you gain hands-on experience from intro to advanced, whereever you\'re in the learning path. \\n3. [**Cloud skills Challenge**](https://aka.ms/ai-april/challenge): gives you a free curated set of learning modules to jumpstart your learning journey into Low Code and Fusion development. \\n\\n## **Look Forward**: Week 3\\n\\nDuring week 3 of the learning journey, you\'ll get the chance to delve deep into the user interface and explore everything from building a canvas app, to understanding the basics of PowerFx, using the Power Component Framework controls, and even creating your own PCF control. And as a special treat, you\'ll be taken on a journey from #ZeroToHero with a blog that showcases the integration of the **Power Platform and ChatGPT**\u2728. This is an opportunity not to be missed!\\n\\n\\nDon\'t forget to bookmark the [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog) page, then follow along to read the daily blog post, ask questions, and connect with other learners. _Get empowered_ with low code development!\\n\\n![Week 3 Roadmap](./../../../static/img/og/30-week3.png)"},{"id":"2023-day13","metadata":{"permalink":"/hubv2/blog/2023-day13","source":"@site/blog/2023-lcf/2023-02-13/index.md","title":"13. Build a Canvas App","description":"Today\u2019s blog will begin your User Interface development journey with actionable insights and resources that will get you started building amazing UI with Canvas Apps.","date":"2023-02-13T00:00:00.000Z","formattedDate":"February 13, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"canvas-apps","permalink":"/hubv2/blog/tags/canvas-apps"}],"readingTime":7.065,"hasTruncateMarker":false,"authors":[{"name":"Gomolemo Mohapi","title":"Cloud Advocate","url":"https://github.com/gomomohapi","imageURL":"https://github.com/gomomohapi.png","key":"gomolemo"},{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"}],"frontMatter":{"slug":"2023-day13","title":"13. Build a Canvas App","authors":["gomolemo","april"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","onboarding","power platform fundamentals","30DaysOfLowCode","canvas apps"],"image":"https://microsoft.github.io/Low-Code/img/og/30-13.png","description":"Today\u2019s blog will begin your User Interface development journey with actionable insights and resources that will get you started building amazing UI with Canvas Apps.","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","canvas-apps"]},"prevItem":{"title":"12. Recap - Integrations Week \u2728","permalink":"/hubv2/blog/2023-day12"},"nextItem":{"title":"14. Intro to Power Fx","permalink":"/hubv2/blog/2023-day14"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day13\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"13. Build a Canvas App\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Today\u2019s blog will begin your User Interface development journey with actionable insights and resources that will get you started building amazing UI with Canvas Apps.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-13.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day13\\" />\\n</head>\\n\\nWelcome to `Day 13` of #30DaysOfAzureAI!\\n\\nMore often than not, a well thought out, consistent, eye-catching but functional user experience can define the success of your app. This is why we\u2019ve decided to dedicate this week to the **User Interface (UI)**. Today\u2019s blog will begin that journey with actionable insights and resources that will get you started building amazing UI with Canvas Apps.\\n\\n## What We\'ll Cover\\n * What are Canvas Apps?\\n * Ways to build Canvas Apps\\n * Working with Express Design\\n * **Activity**: Sign up for your [Power Apps Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Exercises**: Try it Yourself! \\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Speaker Card](../../../static/img/og/30-13.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## What are Canvas Apps?\\n\\nAs mentioned in an [earlier blog post](https://microsoft.github.io/Low-Code/blog/2023-day2/#what-does-the-power-platform-provide), Power Apps is a tool for \u201ccreating custom applications for web and mobile that can be integrated with a variety of systems and services\u201d. There are two types of Power Apps, namely Model-Driven Apps and Canvas Apps.\\n\\nModel-Driven apps require a Microsoft Dataverse database. They\'re built on top of the data that\'s modelled in that database environment. As a result of this, the views and screens are based on a specific data structure and offer a more consistent appearance and behaviour from one screen to the next.\\n\\nBut with Canvas Apps, you start with a blank screen \u2013 like an artist\u2019s canvas. You have complete control over the placement of each image, textbox, form, icon, and other elements on that canvas. Power Apps offers you a graphical, intuitive interface with a pixel perfect visual app designer which enables you to build and deploy professional looking Canvas Apps faster with tailor-made UI.\\n\\n![Canvas App UI being edited inside of the Power Apps Studio](./Figure1.png)\\n\\n## Ways to build Canvas Apps\\n\\nNow there are many starting points when building Canvas Apps. We\u2019ve already established that you can start from a _blank canvas_ and build out your app from there however we have other methods for getting you to where you want to be faster.\\n\\nWhether it\u2019s your first time and you want to start from a template just to get familiar with the building experience, or you already have data and you want to build your Canvas App on top of that data or even if you have an initial design and you want to start from that design and add data later on \u2013 we\u2019ve got you covered. \\n\\nWhatever method you choose, you\u2019ll always end up in the Power Apps Studio. This is the space where you\u2019ll design, build, and manage your Canvas App. If you want to understand the various parts of the Power Apps Studio before you get your hands dirty; I highly recommend reading [this article](https://aka.ms/LCF/PowerAppsStudio) which gives a really good insight into the various parts of it.\\n\\n### Start from a template\\n\\nIf it\u2019s your first time, you might want to start from a template just so you can get familiar with Canvas Apps. Power Apps provides multiple templates for all types of scenarios. \\n\\n![Image showing a few Canvas Apps templates](./Figure2.png)\\n\\nYou can simply select a template from our vast gallery and then run the app to understand its default behaviour. Feel free to add some additional functionality and make it your own. For a full breakdown of how to create an app from a template, check out [this article](https://aka.ms/LCF/CanvasFromTemplate) to learn more. \\n\\n### Start from data\\n\\nMaybe you already have some business data to work with and you\u2019d like to build an app that connects to this data directly.  It doesn\u2019t matter where your data lives \u2013 you can create a working 3-screen app in just a few clicks and choose to customise it however you want. \\n\\nThe generated 3-screen app includes:\\n\\n1. **Browse Screen**: Lets the user browse through data. It also includes search, sort, and data refresh all out of the box.\\n2. **Details Screen**: This screen just shows the extended details of a single record. It also has the option of deleting that record as well. \\n3. **Edit Screen**: This allows users to edit a single record to change any of its values. \\n\\n![Image showing generated 3-screen Canvas App](./Figure3.png)\\n\\nThis process takes care of the data connection for you so that you can focus on the functionality and UI straight away. Whether your data lives in [SharePoint](https://aka.ms/LCF/CanvasFromSharepoint), [Excel](https://aka.ms/LCF/CanvasFromExcel), [Azure SQL](https://aka.ms/LCF/CanvasFromSQL) or even [Dataverse](https://aka.ms/LCF/CanvasFromDataverse), you can get started building Canvas Apps, from data, today. \\n\\n## Working with Express Design\\n\\nExpress design is a new way to quickly get started with Canvas Apps by instantly transforming any visual design artifact into an app. Every app starts with a design phase where some form of initial sketch would have been made. You may have sketched some basic UI on a piece of paper or on a whiteboard or if you\u2019re a professional \u2013 you may have designed some assets in Figma.\\n\\nWhatever your method is, Power Apps is now applying advanced cognitive AI models to generate app UI using two methods.\\n\\n### Image to App\\n\\nAll you have to do is take a picture or screenshot of whatever wireframe, sketch, or visual design that you have, upload it into Power Apps and then follow the steps in the guided interface to tag the relevant UI components and set up your data. This will then auto-magically generate an app for you to jumpstart your app development process. See [this article](https://aka.ms/LCF/AppFromImage) for more information and step-by-step guidance on how to generate Canvas Apps from an image!\\n\\nAlso, check out this [AMAZING TikTok](https://aka.ms/LCF/ExpressDesignTikTok) that shows you the whole Image to App process in under 60 seconds! Don\u2019t forget to follow us while you\u2019re there \ud83d\ude09 \\n\\n![Image showing the Image to App fucntionality in Power Apps](./Figure4.png)\\n\\n### Figma to App\\n\\nNow the Image to App process will do it\u2019s best to match your drawing or image however if you are looking for an exact, pixel-perfect match then you should consider creating your design in Figma using the [Create Apps from Figma UI Kit](https://aka.ms/LCF/FigmaKit). Afterwards, you will then convert your design file into a Canvas App and then add more functionality using the Power Apps Studio. More details on this process can be [found here](https://aka.ms/LCF/Figma) so be sure to try it out for yourself and let us know how it went!\\n\\n![Image showing the Figma to App fucntionality in Power Apps](./Figure5.png)\\n\\n## Exercises\\n\\nSo now that you\'ve taken the time to delve into this blog post, you\'re essentially a pro at finding whatever your starting point is! Go ahead, give yourself a pat on the back AND why don\u2019t you try and build some Canvas Apps UI yourself? It\u2019s easier than you think, and we\u2019ve got some training materials to help you get started as well. \\n\\n* **Training**: [Use the UI and controls in a canvas app in Power Apps](https://aka.ms/LCF/CanvasUIPath) is a Learning Path up on Microsoft Learn which takes you through the process of building a functional UI for your Canvas App. It highlights app navigation, themes, icons, images, personalization, different form factors, and so many more controls that you can take advantage of. \\n\\n## What\'s next?\\n\\nBe sure to keep yourself posted with this week\u2019s blog posts and discover all that there is to know about working with User Interface in the Power Platform. From Power Fx to the Power Component Framework, we have so much planned for you. \\n\\nAlso consider -\\n\\n 1. Signing up for the free **[Power Apps Developer Plan](https://aka.ms/ai-april/devplan)** so you have access to the Power Platform.\\n 2. Enrolling in the **[Cloud Skills Challenge](https://aka.ms/ai-april/challenge)** to skill up on key cloud technologies with free, self-guided learning courses, and start climbing the leaderboard!\\n 3. Registering for the **[Powerful Devs Conference](https://aka.ms/ai-april/PowerfulDevsConf2023)** to learn from experts how you, as a developer, can leverage the Power Platform to build applications faster and with far less effort.\\n\\n## Resources\\n\\n* Low Code February **[Learn Collection](https://learn.microsoft.com/users/nityan/collections/xz6ehr2mx031y0?WT.mc_id=javascript-82212-ninarasi)**: Collection of resources to go from learning Power Platform Fundamentals, to understanding the Dataverse and working in Fusion Development teams.\\n* Power Apps **[Canvas Apps Documentation](https://aka.ms/LCF/CanvasDocs)**\\n* On-Demand Viewing: **[Building the UI in Power Apps](https://aka.ms/LCF/UILearnLive)**"},{"id":"2023-day14","metadata":{"permalink":"/hubv2/blog/2023-day14","source":"@site/blog/2023-lcf/2023-02-14/powerfx.md","title":"14. Intro to Power Fx","description":"Want to add logic to your low code apps in Power Apps? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","date":"2023-02-14T12:00:00.000Z","formattedDate":"February 14, 2023","tags":[{"label":"powerfx","permalink":"/hubv2/blog/tags/powerfx"},{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":3.55,"hasTruncateMarker":false,"authors":[{"name":"April Dunnam","title":"Power Platform Advocacy Lead","url":"https://github.com/AprilDunnam","imageURL":"https://github.com/AprilDunnam.png","key":"april"}],"frontMatter":{"slug":"2023-day14","date":"2023-02-14T12:00","title":"14. Intro to Power Fx","authors":["april"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["powerfx","low code","power platform","power apps","formulas"],"image":"https://microsoft.github.io/Low-Code/img/og/30-14.png","description":"Want to add logic to your low code apps in Power Apps? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april","tags":["powerfx","low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform"]},"prevItem":{"title":"13. Build a Canvas App","permalink":"/hubv2/blog/2023-day13"},"nextItem":{"title":"15. \ud83d\ude80 OpenAI & Microsoft Power Platform","permalink":"/hubv2/blog/2023-day15"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day14-build\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"14. Intro to Power Fx\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Want to add logic to your low code apps in Power Apps? Join us on #30DaysOfAzureAI to learn how - https://aka.ms/ai-april\\"  />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-14.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@aprildunnam\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day14-build\\" />\\n</head>\\n\\nWelcome to `Day 14` of #30DaysOfAzureAI!\\n\\nIt\'s **Valentine\'s Day**, a celebration of love in many regions of the world! Hopefully you\'re developing a love for the Power Platform as you make your way through Low Code February!\\n\\nYesterday, we explored how to get started building apps with Power Apps Canvas apps. Today, we\'re going to look at how we add logic to our Power Apps by exploring the low code programming language that it uses, Power Fx.\\n\\n## What We\'ll Cover\\n * **What** - What is Power Fx?\\n * **Where** - Where can we use it?\\n * **How** - How do we use it?\\n * **Exercise**: [Training: Understand Power Fx](https://aka.ms/ai-april/PowerFxExercise)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Intro to Power Fx](./../../../static/img/og/30-14.png)\\n\\n## What is Power Fx?\\n\\nWhat if you could build an app as easily as you build out a worksheet in Excel?\\n\\nPower Apps and Power Fx makes this a reality.\\n\\nWhile there\'s a lot we can do without having to write any code in the Power Platform, we need a programming language to enable the full spectrum of development and that\'s where Power Fx comes in.\\n\\nPower Fx is the low-code language for the Power Platform. It\'s a strongly-typed, declarative and functional programming language that is based off of the Microsoft Excel formula language that is designed to be easy to use for everyone; from those who have never programmed before to seasoned professionals.\\n\\n\\n## Where can we use Power Fx?\\n\\nPower Fx started as the low code language that we use to add logic to our Power Apps canvas applications, however, it is expanding to be used across the Power Platform.\\n\\nCurrently, we can use Power Fx with the following:\\n\\n- Power Apps Canvas Apps\\n- [Dataverse Calculated Columns](https://aka.ms/ai-april/PowerFxDataverse)\\n- Model Driven App Modern Commanding\\n- Power Apps Ideas (AI assisted formulas)\\n\\nAnd more to come!\\n\\n## How does Power Fx work?\\n\\nAll programming languages, including Power Fx have expressions which are a way to represent a calculation over numbers, string or other data types.\\n\\nPower Fx, however, is inspired by Excel and in Excel we don\'t just write expressions, we write formulas or \\"recipes\\" for how to calculate a specific cell\'s value. \\n\\nB1 = C2 * 5 is an example of a formula that defines the value of B1 and is recalculated automatically as C2 changes. Power Fx follows this same formula pattern except \\"cells\\" are replaced with properties of controls and objects.\\n\\nHere\'s an example of a Power Fx formula in action:\\n\\n![Power Fx Formula Gif](./powerfx-last-word.gif)\\n\\nBecause Power Fx is a declarative formula language, it offers many things including:\\n\\n- **Excel syntax translation** : Because it\'s based on excel, most of the Excel syntax is used and available in Power Fx.\\n- **Asynchronous**: All data operations in Power Fx are asynchronous!\\n- **Relational Data**: With Power Fx we can use simple dot notation to access the entire graph of relationships from a record.\\n- **Local and Remote**: Power Fx automatically delegates what it can to the server to process filters and sorts more efficiently.\\n- **Always Live**: Power Fx formulas are always live and changes are reflected instantaneously.\\n\\n## Pro Code Integration\\n\\nIf you\'re a professional developer, you can work with Power Fx in your professional developer tooling like Visual Studio and Visual Studio code. Power Fx formulas can be stored in YAML source files which are easy to edit in any text editor.\\n\\n![Pro Code Gif](./pro-code-vscode.gif)\\n\\nPower Fx has recently been made open source. You can see more and contribute here: [Power Fx Github](https://github.com/microsoft/power-fx)\\n\\n## Exercise\\n\\nTry the exercise in [this Learn Module](https://aka.ms/ai-april/PowerFxExercise) on creating your first Power App as a traditional developer. It has some hands on Power Fx examples.\\n\\n## Resources\\n\\n - [**Exercise**: Training: Understand Power Fx](https://aka.ms/ai-april/PowerFxExercise)\\n - [**Documentation: Power Fx Operations**](https://aka.ms/ai-april/PowerFxOperators) - on Microsoft Learn\\n - [**PowerfulDevs Conference**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi): Learn More about Power Platform integration\\n - [**Learn Collection** ](https://aka.ms/ai-april/collection) LowCode February\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day15","metadata":{"permalink":"/hubv2/blog/2023-day15","source":"@site/blog/2023-lcf/2023-02-15/index.md","title":"15. \ud83d\ude80 OpenAI & Microsoft Power Platform","description":"Throughout this post, let\'s discuss how developers can leverage OpenAI\'s APIs to build next-gen application using Microsoft Power Apps. We will use DALL\xb7E 2 (a new AI system model) to create realistic images and art from a description in natural language.","date":"2023-02-15T00:00:00.000Z","formattedDate":"February 15, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"open-ai","permalink":"/hubv2/blog/tags/open-ai"}],"readingTime":6.135,"hasTruncateMarker":false,"authors":[{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"}],"frontMatter":{"slug":"2023-day15","title":"15. \ud83d\ude80 OpenAI & Microsoft Power Platform","authors":["julia"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","custom-connector","api-management","apim","authn","openAI","GPT","dalle","natural-language","ai"],"image":"https://microsoft.github.io/Low-Code/img/og/30-15.png","description":"Throughout this post, let\'s discuss how developers can leverage OpenAI\'s APIs to build next-gen application using Microsoft Power Apps. We will use DALL\xb7E 2 (a new AI system model) to create realistic images and art from a description in natural language.","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","open-ai"]},"prevItem":{"title":"14. Intro to Power Fx","permalink":"/hubv2/blog/2023-day14"},"nextItem":{"title":"16. Intro to PCF Control","permalink":"/hubv2/blog/2023-day16"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog2023-day15\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"Build next-gen apps with OpenAI and Microsoft Power Platform\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Throughout this post, let\'s discuss how developers can leverage OpenAI\'s APIs to build next-gen application using Microsoft Power Apps. We will use DALL\xb7E 2 (a new AI system model) to create realistic images and art from a description in natural language.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-15.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@jujujuliakasper\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://techcommunity.microsoft.com/t5/apps-on-azure-blog/build-next-gen-apps-with-openai-and-microsoft-power-platform/ba-p/3742289\\" />\\n</head>\\n\\nWelcome to `Day 15` of #30DaysOfAzureAI!\\n\\nThe theme for this week is **OpenAI and Microsoft Power Platform**. Over the past few weeks, social-media feeds and newsletters have been filled with stories and conversations about artificial intelligence (AI). ChatGPT and OpenAI were often center of these conversations and today we will take a look at an exciting OpenAI and Power Platform scenario. We will discuss how developers can leverage OpenAI\'s APIs to build next-gen application using Microsoft Power Apps. For our scenario, we will use DALL\xb7E 2 (a new AI system model) to create realistic images and art from a text description in natural language.\\n\\n\\n## What We\'ll Cover\\n\\n * [What is OpenAI](#what-is-openai)\\n * [Scenario - Power Apps integration with GitHub and API Management Authorizations](#scenario---power-apps-integration-with-openai-and-azure-api-management)\\n * [Scenario Overview](#scenario---power-apps-integration-with-openai-and-azure-api-management)\\n * [Prerequisites](#prerequisites)\\n * [Step 1: Add OpenAI\'s API into your Azure API Management instance](#step-1-add-openais-api-into-your-azure-api-management-instance)\\n * [Step 2: Configure a policy in Azure API Management](#step-2-configure-a-policy-in-azure-api-management)\\n * [Step 3: Create a custom connector via Azure API Management](#step-3-create-a-custom-connector-via-azure-api-management)\\n * [Step 4: Call your web API via your Power App](#step-4-call-your-web-api-via-your-power-app)\\n * [Resources](#resources)\\n\\n![Speaker Card](../../../static/img/og/30-15.png)\\n\\n\\n## What is OpenAI\\n\\nOpenAI is an AI research and deployment company. Developers can use OpenAI\'s APIs and build applications using their different trained [models](https://platform.openai.com/docs/models/models). OpenAI offers a spectrum of models with different levels of understanding or generating natural language or code. These models can be used for everything from content generation to semantic search and classification. Their current most popular model is [GPT-3](https://platform.openai.com/docs/models/gpt-3) that can understand and generate natural language. For today\'s scenario, we will use [DALL\xb7E 2](https://openai.com/blog/dall-e/) (a new AI system model) to create realistic images and art from a text description in natural language.\\n\\n> *Note: Like GPT-3, DALL\xb7E is a transformer language model. DALL\xb7E is a 12-billion parameter version of GPT-3 trained to generate images from text descriptions, using a dataset of text\u2013image pairs.*\\n\\n## Scenario - Power Apps integration with OpenAI and Azure API Management\\n\\n### Scenario Overview\\n\\nWe want to build a Power App and leverage OpenAI\'s trained model DALL\xb7E 2 to create a realistic image from only a text description. All of this can be done by just a simple API call for OpenAI\'s [image creation](https://platform.openai.com/docs/api-reference/images/create). We will use [Azure API Management](https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts) to help us securely expose OpenAI\'s API to the Microsoft Power Platform.\\n\\n### Azure API Management\\n\\nWeb APIs have experienced an exponential increase in popularity and usage in the past few years.\xa0APIs exist at the intersection of business, products, and technologies and have transformed the way businesses interact with each other and the way they provide value to their customers. The need for organizations to securely manage, deploy, monitor and share APIs has increased as well. Azure API Management helps to create consistent and modern API gateways for existing back-end services hosted anywhere, secure and protect them from abuse and overuse, and get insights into usage and health.\\n\\n### Prerequisites\\n- A running API Management instance. Complete the following\xa0[Quickstart: Create a new Azure API Management service instance by using the Azure portal](https://learn.microsoft.com/en-us/azure/api-management/get-started-create-service-instance).\\n- Make sure you have a Power Apps or Power Automate [environment](https://learn.microsoft.com/en-us/power-apps/powerapps-overview#power-apps-for-developers).\\n\\n### Step 1: Add OpenAI\'s API into your Azure API Management instance\\n\\n1. Sign into Azure portal and go to your API Management instance.\\n2. In the left menu, select\xa0**APIs > + Add API** and select **HTTP**.\\n![Add API](media/addapi.png)\\n\\n3. Enter the following settings. Then select\xa0**Create**.\\n\\n  | Settings  | Value |\\n  | ------------- | ------------- |\\n  | Display name  | *openAIAPI*  |\\n  | Name  | *openaiapi*  |\\n  | Web service URL  | *https://api.openai.com/v1*  |\\n  | API URL suffix  | *openaiapi*  |\\n\\n4. Navigate to the newly created API and select\xa0**Add Operation**. Enter the following settings and select\xa0**Save**.\\n\\n  | Settings  | Value |\\n  | ------------- | ------------- |\\n  | Display name  | *createimage*  |\\n  | URL for **POST**  | */images/generations*  |\\n\\n5. Select your newly created operation and edit **Frontend**.\\n\\n![Edit Front End](media/editfrontend.png)\\n\\n6. Next, we need to add a **Request Body** to our API. For this, within our Frontend section scroll down and select **Request**. Now **Add representation** and insert the following information:\\n\\n  | Representations  |  |\\n  | ------------- | ------------- |\\n  | CONTENT TYPE  | application/json  |\\n  | DEFINITION  | {\\"prompt\\":\\"A cute baby sea otter\\",\\"n\\":1,\\"size\\":\\"512x512\\"}  |\\n\\n![Add Representation](media/addrepresentation.png)\\n\\n7. Next, we will add a Response to our API. Select **Responses** and insert the following information via **+ Add response** for **200 OK**:\\n\\n  | Representations  |  |\\n  | ------------- | ------------- |\\n  | CONTENT TYPE  | application/json  |\\n  | DEFINITION  | {\\"created\\": 1589478378,\\"data\\": [{\\"url\\": \\"https://...\\"},{\\"url\\": \\"https://...\\"}]} |\\n\\n![Add Response](media/addresponse.png)\\n\\n8. Select **Save**.\\n\\n### Step 2: Configure a policy in Azure API Management\\n\\n1. Next, we need to assign a policy to our API to make sure we are passing along an API key for authentication. \\n\\n> *Note: OpenAI API uses API keys for authentication. Visit your [API Keys](https://platform.openai.com/account/api-keys) page to retrieve the API key you\'ll use in your requests.*\\n\\n2. Select your operation and in the\xa0**Inbound processing**\xa0section, select the (`</>`) (code editor) icon.\\n\\nInbound policy:\\n\\n```html\\n<policies>\\n    <inbound>\\n        <base />\\n        <set-header name=\\"Authorization\\" exists-action=\\"override\\">\\n            <value>Bearer YOUR_API_KEY</value>\\n        </set-header>\\n    </inbound>\\n    <backend>\\n        <base />\\n    </backend>\\n    <outbound>\\n        <base />\\n    </outbound>\\n    <on-error>\\n        <base />\\n    </on-error>\\n</policies>\\n```\\n\\n3. Select **Save** and we can now test our API in Azure API Management:\\n - Select your operation.\\n - Go to the **Test** tab.\\n - Select **Send**.\\n\\n![Test ](media/test.png)\\n\\n### Step 3: Create a custom connector via Azure API Management\\n\\nAs soon as your API was tested successfully, you are now able to export your web API to the Microsoft Power Platform. Please find a detailed guide here: [Export APIs from Azure API Management to the Power Platform](https://learn.microsoft.com/en-us/azure/api-management/export-api-power-platform).\\nIf you want to add additional security to your API, check out our blog post on [10. Secure Connectors with APIM](https://microsoft.github.io/Low-Code/blog/2023-day10).\\n\\n![Create Power](media/createpower.png)\\n\\n### Step 4: Call your web API via your Power App\\n\\nNext, we want to integrate our newly create custom connector in our Power App and make an API call.\\n\\n1. In your Power App, add your custom connector to your Power App via the tab **data > + Add data**.\\n\\n![Custom Connector Power](media/customconnectorpower.png)\\n\\n2. Next, we modify a **Generate Picture** Button with the following PowerFX formula:\\n\\n```\\nClearCollect(_datacollection, OpenAIAPI.createimage({prompt:TextInput1.Text,n:1,size:\\"512x512\\"}).data); \\nReset(TextInput1)\\n```\\n\\n![Power Apps Input](media/powerappsinput1.png)\\n\\n\\n3. Next, we modify an **Image** with the following PowerFX formula:\\n\\n```\\n$\\"{First(_datacollection).url}\\"\\n```\\n\\n![Power Apps Input](media/powerappsinput2.png)\\n\\n4. Now, you are able to test your Power App and create a picture via your text input parameters. This picture will be generated using OpenAI\'s DALL\xb7E model. Enjoy generating some fun pictures like me:\\n\\n\\n> Let us know what you think! [@Julia Kasper](https://www.linkedin.com/in/jukasper/)\\n\\n> Don\'t forget to [Sign up for the Powerful Dev 2023](https://aka.ms/PowerfulDevsConf2023)!\\n\\n## Resources\\n\\n[Sign up for Powerful Dev 2023](https://aka.ms/PowerfulDevsConf2023)\\n\\nMicrosoft Power Platform:\\n- [Overview of creating apps in Power Apps](https://learn.microsoft.com/en-us/power-apps/maker/)\\n- [Microsoft Power Platform developer documentation](https://learn.microsoft.com/en-us/power-platform/developer/)\\n- [Custom connectors](https://learn.microsoft.com/en-us/connectors/custom-connectors/)\\n\\nAzure API Management:\\n- [What is Azure API Management?](https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts)\\n- [Azure API Management connector on the Power Platform](https://powerapps.microsoft.com/en-us/blog/azure-api-management-connector-on-the-power-platform/)"},{"id":"2023-day16","metadata":{"permalink":"/hubv2/blog/2023-day16","source":"@site/blog/2023-lcf/2023-02-16/index.md","title":"16. Intro to PCF Control","description":"Power Component Framework can be used to enhance the user experience for users working with data on forms, views, dashboards, and even canvas app screens. Learn more in #AiApril.","date":"2023-02-16T00:00:00.000Z","formattedDate":"February 16, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"pcf","permalink":"/hubv2/blog/tags/pcf"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":6.91,"hasTruncateMarker":false,"authors":[{"name":"Gomolemo Mohapi","title":"Cloud Advocate","url":"https://github.com/gomomohapi","imageURL":"https://github.com/gomomohapi.png","key":"gomolemo"}],"frontMatter":{"slug":"2023-day16","title":"16. Intro to PCF Control","authors":["gomolemo"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power platform","low code","power component framework","tutorial"],"image":"https://microsoft.github.io/Low-Code/img/og/30-16.png","description":"Power Component Framework can be used to enhance the user experience for users working with data on forms, views, dashboards, and even canvas app screens. Learn more in #AiApril.","tags":["low-code-february","30-days-of-lowcode","pcf","power-platform"]},"prevItem":{"title":"15. \ud83d\ude80 OpenAI & Microsoft Power Platform","permalink":"/hubv2/blog/2023-day15"},"nextItem":{"title":"17. Build a PCF Control","permalink":"/hubv2/blog/2023-day17"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day16\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"16. Intro to PCF Control\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Power Component Framework can be used to enhance the user experience for users working with data on forms, views, dashboards, and even canvas app screens. Learn more in #AiApril.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-16.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day16\\" />\\n</head>\\n\\nWelcome to `Day 16` of #30DaysOfAzureAI!\\n\\nThe theme for this week is **User Interface**! Yesterday, [Julia](https://github.com/juliajuju93) spoiled us with a blog that highlighted [OpenAI and the Power Platform](https://microsoft.github.io/Low-Code/blog/2023-day15). Today we\'ll explore the topic of the *Power Apps Component Framework*! \\n\\n## What We\'ll Cover\\n * What is the *Power Apps Component Framework (PCF)*?\\n * Why would you want to *use* PCF?\\n * What are the *advantages*?\\n * The *composition* of a PCF component\\n * **Exercise**: Training - [Build a Power Apps component](https://aka.ms/LCF/BuildPCF)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Speaker Card Feb 15](../../../static/img/og/30-16.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## What is the Power Apps Component Framework?\\n\\nPower Apps Component Framework (PCF) empowers professional or traditional developers and app makers to create reusable code components for Power Apps. What\'s great about these code components is that they work for both [Canvas Apps](https://aka.ms/LCF/Components4Canvas) and [Model-Driven Apps](https://aka.ms/LCF/Components4ModelDriven) and they can be used to enhance the user experience for users working with data on forms, views, dashboards, and even canvas app screens. \\n\\n## Why would you want to use PCF?\\n\\nSometimes, as app makers, we might reach certain limitations when it comes to building consistent, eye-catching but functional user experiences. The out-of-the-box controls within Power Apps might not fit all of our needs or maybe, we just want to stretch Power Apps\' capabilities a little further. With PCF, you can build code components which are essentially visual controls that help you create a more customised user interface.\\n\\n![A gif showing PCF Code Components in action](./code-components.gif)\\n\\n### Types of PCF Components\\n\\nThese code components also allow for the integration of business logic which complements the visualisation for unique scenarios. There are two main types of components that you can create:\\n\\n * **Field**: A custom control for a field on a form. If you have a numeric value, instead of a simple text box with a number, you can represent it as a slider code component.\\n * **Dataset**: A custom control to display rows of data. If you would like to go the more advanced route, you could take a boring dataset and represent that as a specialised interactive graph instead of a normal table. \\n\\n## What are the advantages of using PCF?\\nWith the PCF\'s ability to tailor-make your apps to fit your specific needs and requirements, there must be other advantages to take note of, right? Of course! These include;\\n\\n * When it comes to **integration**, you have access to a rich set of framework APIs, 3rd-party libraries, and services that lets you incorporate external functionality and exposes capabilities like component lifecycle management, contextual data, and metadata.\\n * Drastically improve and enhance the **user experience** with seamless server access via Web API, utility and data formatting methods; device features like camera, location, and microphone; and easy-to-invoke user experience elements like dialogs, lookups, and full-page rendering.\\n * The **reusability** aspect because PCF components can be easily reused across multiple Power Apps reducing the development time and cost associated with creating custom functionality for each individual app.\\n * Components built with PCF are optimised for **performance** due to the fact that they are designed to be lightweight ensuring that they do not slow down the overall application.\\n * Use of **responsive** web design principles to provide an optimal viewing and interaction experience for any screen size, device, or orientation.\\n\\n### Web Resources vs PCF\\n\\nBefore the PCF existed, HTML web resources were used to provide any type of custom presentation to a Power Apps\' form. However, with the introduction of PCF, code components can now be bundled into a single solution file and rendered as part of the same context at the same time as any other components, providing a seamless experience for the user.\\n\\n## The composition of a PCF component\\n\\nA [solution](https://aka.ms/LCF/SolutionConcepts) can have code components, which can then be imported into a Dataverse environment. Professional / Traditional developers and app makers can then specify columns, subgrids, views, and dashboard subgrids to use in place of default components after importing the solution containing the code components. These coding elements can be added to Canvas Apps as well as Model-Driven Apps.\\n\\nCode Components consists of 3 elements;\\n* Manifest\\n* Component implementation\\n* Resources\\n\\n![Image showing the 3 main key areas of a PCF Component](./PCF-KeyAreas.png)\\n\\n### Manifest\\nThe manifest (`ControlManifest.Input.xml`) is the file that defines the metadata and configuration of a code component. It is an XML document that describes:\\n* **name**: The name of the component, which is used to identify it within the Power Apps authoring tools.\\n* **description**: A brief description of the component, which helps users understand what it does.\\n* **version**: The version number of the component, which is used to track changes and updates.\\n* **resource files**: A list of resource files that the component needs.\\n\\nThe manifest is an important file for a PCF code component because it is used by the Power Apps authoring tools to register and manage the component. This also includes the kind of data which is to be configured (field or dataset) and any other properties that can be configured in the application when the component is added.\\n\\n### Component implementation\\nThe component implementation in (PCF) refers to the code that defines the behaviour and appearance of the component. The component implementation is typically written in TypeScript or JavaScript and is compiled into a single solution that is loaded into the Power Apps authoring and runtime environments.\\n\\nThe [Power Platform CLI](https://aka.ms/LCF/PowerCLI) will auto-generate an `index.ts` file that includes stubbed implementations for methods described in the code component interface. These methods control the lifecycle of the code component and can include, but is not limited to;\\n\\n* **init**: This is the entry point for the component and is called when the component is first loaded. The initialization function is responsible for setting up the component and registering any event listeners or other functionality.\\n* **updateView**: This function is called whenever the component\'s properties or state changes. It is responsible for re-rendering the component\'s user interface to reflect the updated state.\\n* **getOutputs**: Called by the framework prior to a component receiving new data. \\n* **destroy**:  This method is invoked when the component is to be removed from the DOM tree. Use it for the cleanup and to release any memory that the component is using.\\n\\nOverall, the component implementation is responsible for defining the functionality and appearance of the component, and for integrating it into the Power Apps environment so that it can be used by app makers.\\n\\n### Resources\\nWith PCF components, resources refer to the files and assets that are used to support the component implementation to implement its visualization. Resources can include things like images, icons, stylesheets, and other files that are necessary for the component to function properly. These are typically organized into a separate folder within the component project and are referenced by the component implementation code as needed.\\n\\n## Exercise\\n\\nTry the exercise in this [learn module](https://aka.ms/LCF/BuildPCF) where you will learn how to build your very first custom PCF component, create a code component solution package, and then test and debug the code component.\\n\\nAlso be sure to look out for tomorrow\'s blog where we will be building another PCF code component in a detailed step-by-step fashion. \\n\\n## Resources\\n\\n* **Exercise**: Training - [Build a Power Apps component](https://aka.ms/LCF/BuildPCF)\\n* **Documentation**: [Power Apps Component Framework Overview](https://aka.ms/LCF/PCFDocs)\\n* **Watch**: [The Low Code Revolution Show](https://learn.microsoft.com/shows/the-low-code-revolution/?wt.mc_id=82054_collection_webpage_ece&ns-enrollment-type=Collection&ns-enrollment-id=8q5jhr1y0jeqj6)\\n* Low Code February [Learn Collection](https://learn.microsoft.com/users/nityan/collections/xz6ehr2mx031y0?WT.mc_id=javascript-82212-ninarasi): Collection of resources to go from learning Power Platform Fundamentals, to understanding the Dataverse and working in Fusion Development teams.\\n\\nAlso consider -\\n\\n* Signing up for the free [Power Apps Developer Plan](https://aka.ms/ai-april/devplan) so you have access to the Power Platform.\\n* Enrolling in the [Cloud Skills Challenge](https://aka.ms/ai-april/challenge) to skill up on key cloud technologies with free, self-guided learning courses, and start climbing the leaderboard!\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day17","metadata":{"permalink":"/hubv2/blog/2023-day17","source":"@site/blog/2023-lcf/2023-02-17/index.md","title":"17. Build a PCF Control","description":"Build a PCF code component step by step","date":"2023-02-17T00:00:00.000Z","formattedDate":"February 17, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"pcf","permalink":"/hubv2/blog/tags/pcf"},{"label":"power apps component frameworkpower-platform","permalink":"/hubv2/blog/tags/power-apps-component-frameworkpower-platform"}],"readingTime":11.895,"hasTruncateMarker":false,"authors":[{"name":"Gomolemo Mohapi","title":"Cloud Advocate","url":"https://github.com/gomomohapi","imageURL":"https://github.com/gomomohapi.png","key":"gomolemo"}],"frontMatter":{"slug":"2023-day17","title":"17. Build a PCF Control","authors":["gomolemo"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power platform","low code","power component framework","tutorial"],"image":"https://microsoft.github.io/Low-Code/img/og/30-17.png","description":"Build a PCF code component step by step","tags":["low-code-february","30-days-of-lowcode","pcf","power apps component frameworkpower-platform"]},"prevItem":{"title":"16. Intro to PCF Control","permalink":"/hubv2/blog/2023-day16"},"nextItem":{"title":"18. Power Pages for ProDevs","permalink":"/hubv2/blog/2023-day18"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-17.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"17. Build a PCF Control\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how to build a PCF code component step by step. Learn more in #AiApril, #30DaysOfAzureAI\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-17.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-17.png\\" />\\n</head>\\n\\n\\nWelcome to `Day 17` of #30DaysOfAzureAI!\\n\\nThe theme for this week is **User Interface** and we\'re ending it off with a quick tutorial on PCF Components! Yesterday, I wrote about the [Power Apps Component Framework](https://microsoft.github.io/Low-Code/blog/2023-day16) and highlighted why you would want to use it, what the advantages are, as well as the composition of a PCF Component. Today, as promised, we\'ll be building a simple code component step-by-step.\\n\\n## What We\'ll Cover\\n * Power Apps Component Framework Recap\\n * What are we building today?\\n * Let\'s make a Code Component!\\n * Test and Run your component \\n * Where to from here?\\n * **Exercise**: Training - [Use advanced features with Power Apps component framework](https://aka.ms/LCF/BuildMorePCF)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Feb 17](../../../static/img/og/30-17.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Power Apps Component Framework Recap\\nAs mentioned in yesterday\'s blog, Power Apps Component Framework (PCF) empowers professional or traditional developers and app makers to create reusable code components for Canvas Apps and Model-Driven Apps. Sometimes, as app makers, we might reach certain limitations when it comes to building consistent, eye-catching but functional user experiences. The out-of-the-box controls within Power Apps might not fit all of our needs or maybe, we just want to stretch Power Apps\' capabilities a little further. With PCF, you can build code components which are essentially visual controls that help you create a more customised user interface.\\n\\n![A gif showing PCF Code Components in action](./code-components.gif)\\n\\n## What are we building today? \\nSo, with Power Apps, there is generally a large amount of data that end users input into the app via a Text Input control. However, as we can see in this [reference page](https://aka.ms/LCF/TextInputControl), there is no \\"auto height\\" property. What I mean is whenever you use a Text Input, and you have a lot of text, the text input does not inherently have the ability to increase its own height based on the amount of text that you have. The normal behaviour here is that the Text Input will have a scrollbar that you can use to navigate through the large amount of text.\\n\\n![An image showing the scroll bar on a Power Apps text input control](./Scrollbar.png)\\n\\nThis is the perfect opportunity for a professional developer to use their skills to solve this \\"low code\\" problem. And just to make sure, I\'m not saying that a low code developer does not have the ability to create some sort of walkaround for this problem - we are just looking at this from the perspective of a professional developer and how they can contribute to Power Platform Solutions. Also, by creating a code component, app makers will be able to use this throughout all of their Power Apps. \\n\\n## Let\'s Make a Code Component!\\nTime to get started building with the Power Apps Component Framework, but first - \\n \\n### Pre-Requisites\\n> **Note**: This tutorial was completed using a Windows 11 Machine.\\n\\nBefore we get started, we will need to install the following:\\n1. Install [**Visual Studio Code (VS Code)**](https://aka.ms/LCF/VSCode) and ensure that the \\"Add to PATH\\" option is selected during installation.\\n2. Install [**Node.js**](https://nodejs.org/en/download/) (comes with npm). I recommend that you use a LTS (Long-Term Support) version.\\n3. Once VS Code is installed, go ahead and download and install the [**Power Platform Tools**](https://aka.ms/LCF/InstallPowerCLI) VS Code extension.\\n\\n### Configure Power Apps Environment\\n\\nSince we are building a code component for Power Apps, we need to make sure our Power Apps environment is prepared and configured. \\n\\n1. If you don\'t have a [ **Power Apps Developer Plan** ](https://aka.ms/ai-april/devplan)yet \ud83d\udc40, go ahead and sign up for one. It\'s FREE. \\n2. Once that\'s done, log into the **[Power Platform Admin Center](https://admin.powerplatform.microsoft.com)** \\n\\t* Select \\"**Environments**\\" on the left-hand side \\n\\t* Click on the development environment that you\'ve just created above. This will usually have the name: ***[Your Name]\'s Environment**.*\\n\\n  ![An image showing instructions to get to the Developer Environment](./Image1.png)\\n\\n  3. Select \\"**Settings**\\" from the top command bar and navigate to Product > Features > Power Apps component framework for canvas apps. \\n4. Activate the Toggle On setting for the **Allow publishing of canvas apps with code components** feature.\\n\\n![An image showing the toggle on setting for PCF Components in Power Apps](./Image2.png)\\n\\n5. Scroll down and select **Save**. \\n\\nNow we\'re good to go! \ud83d\ude03\\n\\n### Create a Component Folder\\nWe will need a working folder to store our Code Component solution. For ease of use, I usually create a folder in a place where I can easily access from a Command Prompt. On my computer, I\'ve created a new folder called **LowCodeFeb** directly in the C:\\\\ drive. So, I will be using `C:\\\\LowCodeFeb`.\\n\\n### Create a New Component Project\\n1. Start **Visual Studio Code**\\n2. Select **Terminal** and select **New Terminal**.\\n3. Change directory to your working folder.\\n\\n```bash\\ncd C:\\\\LowCodeFeb\\n```\\n4. From your LowCodeFeb directory, create a directory named **dynamicTextInput-pcf**.\\n\\n```bash\\nmkdir dynamicTextInput-pcf\\n```\\n5. Change directory to **dynamicTextInput-pcf**.\\n```bash\\ncd dynamicTextInput-pcf\\n```\\n6. Initialize your component project by using Power Platform CLI with the following command:\\n```bash\\npac pcf init --namespace SampleNamespace --name DynamicInputPCF --template field\\n```\\nThis image shows an example of the output you should see:\\n\\n\\n![An image showing the output of initializing your component with the Power Platform CLI](./Image3.png)\\n\\n7. Install the project build tools by using the command `npm install`. Don\'t worry about any warnings you may see at this point. \\n```bash\\nnpm install\\n```\\n8. Once completed, run the command below to open the component project in Visual Studio Code.\\n```csharp\\ncode -a .\\n```\\nYour opened project should look like this so far:\\n\\n![An image showing the code component VS Code project structure](./IMAGE4.png)\\n\\n### Update Code Component\'s Manifest\\nRemember, from yesterday\'s blog - we established that the manifest is an XML file that defines the metadata and configuration of a code component. The manifest is an important file for a PCF code component because it is used by the Power Apps authoring tools to register and manage the component. This also includes the kind of data which is to be configured (field or dataset) and any other properties that can be configured in the application when the component is added.\\n\\n1. Expand the **DynamicInputPCF** folder and open the **ControlManifest.Input.xml** file.\\n2. Near the top of the file, Change the version to **1.0.0** and description-key to **Dynamic Input**.\\n\\n![An image showing the edited control tag in the project manifest](./Image5.png)\\n\\n3. Locate the **<property ... />** node and replace it with this:\\n\\n```xml\\n<property name=\\"TextValue\\" display-name-key=\\"TextValue\\" description-key=\\"TextValueDescription\\" of-type-group=\\"strings\\" usage=\\"bound\\" required=\\"true\\" />\\n<property name=\\"AutoHeightValue\\" display-name-key=\\"AutoHeightValue\\" description-key=\\"AutoHeightValueDescription\\" of-type=\\"Whole.None\\" usage=\\"bound\\" required=\\"true\\" />\\n\\n<type-group name=\\"strings\\">\\n\\t<type>SingleLine.Text</type> \\n\\t<type>SingleLine.TextArea</type> \\n\\t<type>Multiple</type> \\n</type-group> \\n```\\n4. Locate the **<resources ... />** node and include a reference to a CSS file named DynamicInputPCF.css that you\'ll soon create.\\n\\n```xml\\n<css path=\\"css/DynamicInputPCF.css\\" order=\\"1\\" />\\n```\\n\\n5. Save your changes by selecting **File** and then **Save**.\\n\\n![An image showing the process of saving your work.](./Image6.png)\\n\\n### Add styling to your code component\\n\\nNow we\'re going to be adding some basic styling to our component. Just to get a feel of what the process is like and how you can further customise code components.\\n\\n1. Make sure you still have the **ControlManifest.Input.xml** file selected and then select **New Folder**.\\n\\n![An image showing the process of adding a new folder in VS Code.](./Image7.png)\\n\\n2. Name the new folder **css** and then select the **css** folder you\'ve created and select **New File**.\\n\\n![An image showing the process of adding a new file in VS Code.](./Image8.png)\\n\\n3. Name the new file **DynamicInputPCF.css**\\n4. Open DynamicInputPCF.css and paste the following CSS:\\n\\n```css\\n.DynamicInputPCF textarea { \\n\\tpadding: 5px; \\n\\tbox-sizing: border-box;\\n\\twidth: 100%; \\n}\\n\\t\\t\\t\\n.DynamicInputPCF textarea:focus, .DynamicInputPCF textarea:enabled:hover { \\n\\tborder: 2px solid black;\\n} \\n```\\n\\n5. Select **File** and select **Save**.\\n\\n### Build your code component\\nIn order to ensure that the right TypeScript types are generated to match the properties in your ControlManifest.xml document, we need to run a build on our component. \\n\\nReturn to the terminal and perform a build b using the following command:\\n\\n```bash\\nnpm run build\\n```\\n\\nOnce the build is successful, you\'ll notice in the project folder, that the component is compiled into the **out/controls/DynamicInputPCF** directory. The results of this compilation are:\\n* **css** folder\\n* **bundle.js**  - Bundled component source code\\n* and the **ControlManifest.xml** which is the actual component manifest file that is uploaded to the Microsoft Dataverse organization\\n\\nWith those artifacts generated, we can now start implementing our component logic.\\n\\n### Implement Component\'s Logic\\nLet\'s get straight into it. \\n\\n1. Open the **index.ts** file and insert the following variables above the constructor method.\\n```ts\\n// The PCF context object\\nprivate context: ComponentFramework.Context<IInputs>;\\n\\n// The wrapper div element for the component\\nprivate container: HTMLDivElement;\\n\\n/* The callback function to call whenever your code \\nhas made a change to a bound or output property */\\nprivate notifyOutputChanged: () => void;\\n\\n//Variable to track the height of the control\\nheight: number; \\n    \\ntextarea: HTMLTextAreaElement; \\ndefaultLoaded = false; \\n```\\n\\n2. Find the **init** method and replace its contents with this:\\n\\n```ts\\n//Track all elements\\nthis.container = container;\\nthis.context = context;\\nthis.notifyOutputChanged = notifyOutputChanged;\\nthis.textarea = document.createElement(\\"textarea\\");\\nthis.textarea.rows = 1;\\nthis.textarea.style.resize = \'none\';\\nthis.textarea.style.overflowY = \'hidden\';\\nthis.textarea.oninput = this.onTextAreaInput;\\nthis.textarea.onchange = this.onTextAreaChanged;\\nthis.container.appendChild(this.textarea);\\n```\\nAfter pasting the code above, you may have a couple of errors. No need to worry - we\'ll be defining a few methods, in a moment, which will clear these errors.\\n\\n3. Underneath the **init** method, add the following: \\n\\n```ts\\n/* These methods are responsible for telling the framework \\nthat there is a new value in the text input and then it \\nstarts calculating the new height */\\nonTextAreaInput = (): void => {\\n\\tthis.autoSizeTextArea();\\n}\\n\\nonTextAreaChanged = (): void => {\\n\\tthis.notifyOutputChanged();\\n}\\n\\nautoSizeTextArea(): void {\\n\\tthis.textarea.style.height = \'auto\';\\n\\tconst newHeight = (this.textarea.scrollHeight) + \'px\';\\n\\tconst heightChanged = newHeight !== this.textarea.style.height;\\n\\tthis.textarea.style.height = newHeight;\\n\\tif (heightChanged) { this.notifyOutputChanged(); }\\n}\\n```\\n4. Look for the **updateView** method and add the following:\\n\\n```ts\\nconst value = context.parameters.TextValue;\\n\\tlet disabled = context.mode.isControlDisabled;\\n\\tlet masked = false;\\n\\tif (value && value.security) {\\n\\t\\tmasked = !value.security.readable;\\n\\t\\tdisabled = disabled || masked || !value.security.editable;\\n\\t}\\n\\n// Update text value if input value changes\\nif (!this.defaultLoaded || context.updatedProperties.indexOf(\\"TextValue\\") > -1) {\\n\\tthis.defaultLoaded = true;\\n\\tconst newValue = masked ? \\"****\\" : value.raw as string;\\n\\tthis.textarea.value = newValue;\\n\\tthis.autoSizeTextArea();\\n}\\n```\\n5. And one of the last major things we need to do is find and update the **getOutputs** method with the following code:\\n\\n```ts\\n/* This provides the output/bound properties back to \\nthe PCF after notifyOutputChanged() has been called. */\\nconst  height = Number.parseInt(this.textarea.style.height);\\nreturn {\\n\\tTextValue:  this.textarea.value,\\n\\tAutoHeightValue:  height\\n}\\n```\\n6. Go ahead and **Save** everything. \\n\\n## Test and Run your Component \\nNow that we have configured and built out the component logic, let\'s give it a go! Now is a great time to test your component *before* you import it into Power Apps. \\n\\n1. Let\'s return to the **Terminal** and rebuild our component. \\n\\n```bash\\nnpm run build\\n```\\nIf you\'ve followed everything correctly, the build should succeed. If not, feel free to take some time and check if you\'ve copied all code correctly. \\n\\nNow we get to run and test our component in a *test harness* that simulates the Power Apps runtime, so you get to see how your component behaves. \\n\\n2. In the **Terminal** once more, run the following command: \\n```bash\\nnpm start\\n```\\n\\nA new browser window should automatically load the test harness. \\n\\n![An image showing the Power Apps Test Harness](./Image9.png)\\n\\nGo ahead and write some text directly into the text input (1) on the right. Be sure to press the **Enter** key a couple of times to see the text input automatically resizing. You can also play with the pre-set width and height properties (2) to find how the text input behaves under various conditions. Also, you\'ll notice that the AutoHeightValue (3) dynamically changes as you\'re writing as well. \\n\\n![An image showing the Power Apps Test Harness after changes](./Image10.png)\\n\\n## Where to from here? \\nAt face value, it doesnt seem like much however I wanted to give you a just a taste of what is possible when professional developers use their skills and their tools to contribute to Power Platform Solutions. Once a code component is built and you\'ve verified that it works. The next step is to create a solution package and import that into the Power Apps Environment.\\n\\nSee [this article](https://learn.microsoft.com/power-apps/developer/component-framework/import-custom-controls?WT.mc_id=javascript-82212-ninarasi) for guidance on how to package a code component and then when you want to add your code component to a Power App, you can read the guidance for [Canvas Apps](https://learn.microsoft.com/power-apps/developer/component-framework/component-framework-for-canvas-apps?WT.mc_id=javascript-82212-ninarasi) and/or [Model-Driven Apps](https://learn.microsoft.com/power-apps/developer/component-framework/code-components-model-driven-apps?WT.mc_id=javascript-82212-ninarasi).\\n\\n## Exercise\\nTry the exercise in this [learn module](https://aka.ms/LCF/BuildMorePCF) where you will get to learn EVEN MORE about code components. You\'ll be able to get details on how to address more complex scenarios as it applies to the PCF. What makes this exciting is that it covers how to use client frameworks such as React and Angular within a component, along with how to address scenarios such as file upload, localization, and integration with the Microsoft Dataverse Web API.\\n\\n## Resources\\n* **Exercise**: Training - [Use advanced features with Power Apps component framework](https://aka.ms/LCF/BuildMorePCF)\\n* **Documentation**: [Power Apps Component Framework Overview](https://aka.ms/LCF/PCFDocs)\\n* **Watch**: [The Low Code Revolution Show](https://learn.microsoft.com/shows/the-low-code-revolution/?wt.mc_id=82054_collection_webpage_ece&ns-enrollment-type=Collection&ns-enrollment-id=8q5jhr1y0jeqj6?WT.mc_id=javascript-82212-ninarasi)\\n* **Watch** all of the [Powerful Devs Conference](https://www.youtube.com/live/4VK1CJYR2W4)  sessions on demand to learn from experts how you, as a developer, can leverage the Power Platform to build applications faster and with far less effort.\\n* Low Code February [Learn Collection](https://learn.microsoft.com/users/nityan/collections/xz6ehr2mx031y0?WT.mc_id=javascript-82212-ninarasi): Collection of resources to go from learning Power Platform Fundamentals, to understanding the Dataverse and working in Fusion Development teams.\\n\\nAlso consider -\\n\\n* Signing up for the free [Power Apps Developer Plan](https://aka.ms/ai-april/devplan) so you have access to the Power Platform.\\n* Enrolling in the [Cloud Skills Challenge](https://aka.ms/ai-april/challenge) to skill up on key cloud technologies with free, self-guided learning courses, and start climbing the leaderboard!\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day18","metadata":{"permalink":"/hubv2/blog/2023-day18","source":"@site/blog/2023-lcf/2023-02-18/01 - Power Pages loves Fusion Dev teams.md","title":"18. Power Pages for ProDevs","description":"Power Pages for ProDevs","date":"2023-02-18T00:00:00.000Z","formattedDate":"February 18, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"power pages","permalink":"/hubv2/blog/tags/power-pages"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"}],"readingTime":6.785,"hasTruncateMarker":false,"authors":[{"name":"Neeraj Nandwana","title":"Senior Program Manager","url":"https://github.com/neerajnandwana-msft","imageURL":"https://github.com/neerajnandwana-msft.png","key":"neeraj"}],"frontMatter":{"slug":"2023-day18","title":"18. Power Pages for ProDevs","authors":["neeraj"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power platform","low code","power pages"],"image":"https://microsoft.github.io/Low-Code/img/og/30-18.png","description":"Power Pages for ProDevs","tags":["low-code-february","30-days-of-lowcode","power pages","fusion-teams","power-platform"]},"prevItem":{"title":"17. Build a PCF Control","permalink":"/hubv2/blog/2023-day17"},"nextItem":{"title":"19. Recap - Interface Week \u2728","permalink":"/hubv2/blog/2023-day19"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-18.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"18. Power Pages for ProDevs\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Leverage Power Pages and fusion teams to quickly build public or internal facing websites. Learn more in #AiApril, #30DaysOfAzureAI\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-18.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-18.png\\" />\\n</head>\\n\\nWelcome to `Day 18` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * Power Pages \u2764\ufe0f Fusion Dev teams\\n * No Code & Configuration\\n * Low Code & Pro Code\\n * Supporting the large teams\\n * **Activity**: Sign up for your [Power Apps Developer Plan](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [Low Code February Collection](https://aka.ms/ai-april/collection)\\n\\n![Speaker Card for Feb 18](./../../../static/img/og/30-18.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Power Pages loves Fusion Dev teams\\nPower Pages provides rich features and supports a variety of tools that enable fusion teams with technology and domain expertise to collaborate on developing professional websites. \\n\\nPower Pages is unique in Power Platform as it address various audiences for your application that are **external and internal to your organization**. With Power Pages you can build websites that are completely public without users having to login or have users login via wider range of Identity Providers. \\n\\n![Power Pages differentiation in Power Platform](./01%20-%20PowerPages.png)\\n\\nPower Pages makes it easy for low code makers to get started and launch sites quickly. Power Pages also enables Pro-developers with Web Development & Design background and help Fusion team shine by adding their skills to the project. For IT admins we alleviate worry about infrastructure without giving up trust with security and governance tools.\\n\\nThousands of customers across the global have been building and shipping solutions on Power Pages for years. PwC is one such customer who used their professional developer team skills, familiar tooling, and fusion team capabilities in Power Pages to deliver a compelling solution migrated from a full stack web application. Read more about it on [Microsoft Customer Story : PwC builds multitenant enterprise decision support site with Power Pages](https://customers.microsoft.com/story/1558972627174665363-pricewaterhousecoopers-banking-and-capital-markets-power-pages)\\n\\n## Supporting Fusion teams \\nFusion teams usually consist of members with varying skills \u2013 \\n1) There are **domain experts**, business users, subject matter experts who possess the functional knowledge and understanding of the uses cases of the websites they\u2019d want to build for their business or organization and can usually contribute to the development via no-code / low-code configuration. \\n2) There are **professional developers** who can write code and use advanced tools for developing pixel-perfect user experiences and implement complex functional requirements required for the website. \\n\\nHere is a diagram detailing features and capabilities from no code to pro code:\\n\\n![Low Code to Pro Code Capabilities](01%20-%20LowCode_to_ProCode_capabilities.png)\\n\\nWe\u2019ll get into more details of the ways in which Power Pages can support both ends of the Fusion team and their respective needs.   \\n\\n## No Code & Configuration \\nMakers can jumpstart the design of a site with out-of-the box site templates and customize with Power Pages Studio to meet their requirements. \\n\\nPower Pages studio is designed for low-code makers to rapidly build and style data centric business sites. It provides different workspaces for authoring, styling, data modelling and site configurations.\\n\\n* **Pages** workspace - enables maker to design and build Web Pages with component like Forms, Lists, Power BI, Power BI Embedded and Power Virtual Agents. \\n* **Styling** workspace - enables makers to create and apply global site styling. \\n* **Data** workspace - enables makers to model, visualize and mange Dataverse tables, columns and their respective views and forms without leaving the studio. \\n* **Setup** workspace - enables makers and admins to configure site settings/security. Security is an important consideration when building public facing websites and ensure that critical business information  is only accessible by the correct stakeholders.\\n    * Configure [Web roles]( https://learn.microsoft.com/en-us/power-pages/security/create-web-roles), [Table Permissions]( https://learn.microsoft.com/en-us/power-pages/security/table-permissions) and [Page Permissions]( https://learn.microsoft.com/en-us/power-pages/security/page-security) to provide and protect access to business information. \\n    * Administrators can use [Power Apps portals admin center]( https://learn.microsoft.com/en-us/power-pages/admin/coe-portals) to manage their sites and environments. Administrators can configure custom domains, Restrict IP addresses and enable application integrations. \\n    * Configure and enable [Identity Providers]( https://learn.microsoft.com/en-us/power-pages/security/configure-portal-authentication) like OpenID Connect, SAML 2.0, OAuth 2.0, Azure AD, LinkedIn, Facebook, Google, Twitter.  \\n    * Enable site performance managed with [CDN](https://learn.microsoft.com/en-us/power-apps/maker/portals/configure/configure-cdn)\\n    * Enable [Azure Web Application Firewall (WAF)](https://learn.microsoft.com/en-us/power-pages/security/web-application-firewall) to safeguard against common threats or setup IP Range to bring your own WAF or limit the site access\\n    * Set [Site Visibility](https://learn.microsoft.com/en-us/power-pages/security/site-visibility) while the project team is working on initial stages of the solution without potential of exposing it outside of the working team\\n    * Enable and setup [Progressive Web Application (PWA) configuration](https://learn.microsoft.com/en-us/power-pages/configure/progressive-web-apps) \\n    * Integrate reporting using [Power BI AAD and Power BI Embedded (with RLS)](https://learn.microsoft.com/en-us/power-apps/maker/portals/admin/set-up-power-bi-integration) features\\n    * Use [Go live checklist]( https://learn.microsoft.com/en-us/power-pages/go-live/checklist#go-live-checklist-in-the-set-up-workspace) to make sure your website is ready for production use.\\n\\n## Low Code & Pro Code\\nPower Pages also provides dedicated pro-developer tooling for fusion team members who are **technology experts** and want to customize the experience based on the specific business needs that are not supported via low code/no code experience.\\n\\n### Support for code editor: Visual Studio Code & Visual Studio Code for web\\nRight in the same Power Pages Studio makers can switch between Studio low code experience to **[Visual Studio Code for Web](https://learn.microsoft.com/en-us/power-pages/configure/visual-studio-code-editor)** an Online code editor for web pro-developer experience in case they want to do advance customization. Alternatively, makers can go into advanced configuration via Portal Management Apps.\\n\\n![Visual Studio Code for web animation](01%20-%20VSCode%20for%20web%20blog%20demo%2001.gif)\\n\\nMakers who prefer working with **Visual Studio Code desktop** can use [Power Platform Tools extension]( https://learn.microsoft.com/en-us/power-apps/maker/portals/vs-code-extension) to unlock many Power Pages specific features like Autocomplete support, [Power Apps CLI](https://learn.microsoft.com/en-us/power-apps/maker/portals/power-apps-cli) support, Power Pages file icon theme and more. \\n\\n![Visual Studio Code for desktop animation](01%20-%20VSCode%20for%20desktop.gif)\\n\\n### Extend power pages site with web development technologies\\nFamiliar web development technologies like JavaScript, CSS and HTML to build custom design and interaction experience. Power Pages also provide extensibility points which pro-developers can leverage for their use case.\\n\\n*\\tTailor to the branding needs the stylesheet via CSS \\n*\\tAdd just the right custom business logic via JS Script \\n*\\tWrite custom UI or use any UI framework (React, Angular, etc)\\n*\\tAdd dynamic content using [Liquid]( https://learn.microsoft.com/en-us/power-apps/maker/portals/liquid/liquid-overview)\\n*\\tUse [Power Pages Web APIs](https://learn.microsoft.com/en-us/power-apps/maker/portals/web-api-overview) to bind data in custom UI or perform more complex data operations safely using Power Pages security model \\n*\\tCreate re-usable Code Components or use existing [Code Component (PCF)](https://learn.microsoft.com/en-us/power-apps/maker/portals/component-framework) allowing your team to use similar skills from other areas of Power Platform \\n*\\tIntegrate with external data sources using Virtual tables\\n\\n### CLI support\\nDevelopers can also **download the Website as local files** via [Power Platform Command Line Interface (aka PAC CLI)]( https://learn.microsoft.com/en-us/power-apps/maker/portals/power-apps-cli) translated into physical files, so popular tools like desktop Visual Studio or Visual Studio Code can be used and it\u2019s easy to work with files in source control. \\n\\n![Use Power Platform CLI for Power Pages](01%20-%20PowerPagesSupport_for_PAC_CLI.png)\\n\\nPAC CLI downloads Power Pages website customization into files and makes website friendly for source control. So, teams can use GitHub actions, Azure DevOps to standardize their deployment workflow and improve productivity.\\n\\n## Supporting the large teams \\nIt is important to set up automated CI/CD (continuous integration and continuous delivery) pipelines when a large team is working on a project. So, teams can catch bugs in the initial stages. This improves the project quality and increases team productivity by reducing the manual steps to perform these activities. \\n\\nPower pages supports tooling required for CI/CD setup. And this includes\\n*\\tNative integration with [GitHub Actions and Azure DevOps](https://learn.microsoft.com/en-us/power-pages/configure/portals-alm)\\n*\\tSupport for [deployment profile](https://learn.microsoft.com/en-us/power-apps/maker/portals/power-apps-cli#use-deployment-profile) which can be used for custom deployment on Dev/Test/Production environments.\\n*\\tEasy to use any web test framework (Example: Selenium)\\n\\n## What\u2019s Next?\\n* Signing up for the free **[Power Apps Developer Plan](https://aka.ms/ai-april/devplan)** so you have access to the Power Platform and you can try [Microsoft Power Pages](https://powerpages.microsoft.com)\\n\\n* Watch the Power Pages session from [Powerful Devs 2023 Conference](https://learn.microsoft.com/events/learn-events/Powerful-Devs-2023/?WT.mc_id=javascript-82212-ninarasi)\\n\\n* Watch the Power Pages session from Microsoft Ignite 2022 from [Power Pages: Low-Code Web Development | BRK40 - YouTube](https://www.youtube.com/watch?v=eOV3aXolYWs)\\n\\n## Resources\\n\\n* [**Video**: Getting started videos](https://learn.microsoft.com/power-pages/training-videos/?WT.mc_id=javascript-82212-ninarasi)\\n* [**Training**: Power Pages training](https://learn.microsoft.com/training/paths/power-pages-get-started/?WT.mc_id=javascript-82212-ninarasi)\\n* [**Documentation**: Microsoft Power Pages documentation](https://learn.microsoft.com/power-pages/?WT.mc_id=javascript-82212-ninarasi)\\n* [**Blog**: Microsoft Power Pages Blog](https://powerpages.microsoft.com/blog/)\\n* [**Community**: Microsoft Power Pages Community](https://powerusers.microsoft.com/t5/Microsoft-Power-Pages-Community/ct-p/MPPCommunity)"},{"id":"2023-day19","metadata":{"permalink":"/hubv2/blog/2023-day19","source":"@site/blog/2023-lcf/2023-02-19/feb19.md","title":"19. Recap - Interface Week \u2728","description":"Let\'s recap Week 3 of #30DaysOfAzureAI focused on builing user interface quickly with power platform - join us at #AiApril https://aka.ms/ai-april","date":"2023-02-19T00:00:00.000Z","formattedDate":"February 19, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"recap","permalink":"/hubv2/blog/tags/recap"}],"readingTime":5.16,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-day19","title":"19. Recap - Interface Week \u2728","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","user interface","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30-19.png","description":"Let\'s recap Week 3 of #30DaysOfAzureAI focused on builing user interface quickly with power platform - join us at #AiApril https://aka.ms/ai-april","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","recap"]},"prevItem":{"title":"18. Power Pages for ProDevs","permalink":"/hubv2/blog/2023-day18"},"nextItem":{"title":"20. ALM For Power Platform","permalink":"/hubv2/blog/2023-day20"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day19\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"19. Recap - Interface Week \u2728\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s recap Week 3 of #30DaysOfAzureAI focused on builing user interface quickly with power platform - join us at #AiApril https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-19.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day19\\" />\\n</head>\\n\\nWelcome to `Day 19` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * **Look Back**: Recap User Interface Week\\n * **Recap events**: Powerful Dev Conference, Learn Live and Webinar for Power Platform and GitHub\\n * **Skill Up**: Self-Study Resources & Cloud-Skills Challenge\\n * **Look Ahead**: Are you ready for the Developer Experience Week?!\\n * **Resources**: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n![Speaker Card for Feb 19](./../../../static/img/og/30-19.png)\\n\\n## **Look Back**: Week 3 Recap\\n\\nHey there! Week 3 is a wrap! We had a blast exploring the user interface of Power Apps together. First up, we took a deep dive into canvas apps 101 and got familiar with the low code programming language - Fx. We also got to play around with the PCF (Power Apps Component Framework) control and learned how to build stunning, eye-catching front-ends. To top it off, we even built a PCF control together! \\n\\nIn our ZeroToHero blog post, we provided a detailed step-by-step guide on how to create a highly flexible and interactive app using the powerful combination of OpenAI, API Management, and Power Apps. Last but not the least, we also discussed how professional developers can take advantage of Power Pages to quickly build enterprise-ready internal and external websites. \\n\\n![Roadmap Image for Week 3](./../../../static/img/og/30-roadmap-week3.png)\\n\\nHere\'s what we\'ve covered this week:\\n\\n* [**Build a Canvas App**](https://microsoft.github.io/Low-Code/blog/2023-day13) - Introduction to Canvas Apps, a powerful tool that allows developers to create highly tailored and personalized experiences for their users.\\n\\n* [**Intro to Power Fx**](https://microsoft.github.io/Low-Code/blog/2023-day14) - Intoduction to Power Fx, a low-code programming language that enable you to add logic to your Power Apps. By delving into this language, you\'ll gain a deeper understanding of how Power Apps really work and be able to add more complex functionality to your apps. \\n\\n* [**OpenAI & Microsoft Power Platform \ud83d\ude80**](https://microsoft.github.io/Low-Code/blog/2023-day15) - Over the past few weeks, there has been a lot of buzz around the topic of ChatGPT and OpenAI. In this blog, we\'re going to dive deeper into one of the many exciting scenarios where OpenAI and the Power Platform can be combined to create something truly amazing. \\n\\n* [**Intro to PCF Control**](https://microsoft.github.io/Low-Code/blog/2023-day16) - Introduce to the Power Apps Component Framework (PCF), a powerful tool that allows developers to build custom components for their Power Apps, giving them complete control over the look and functionality of their apps. \\n\\n* [**Build a PCF Control**](https://microsoft.github.io/Low-Code/blog/2023-day17) - Build a simple code component step-by-step, giving you the opportunity to follow along and see exactly how the process works.\\n\\n* [**Power Pages for ProDevs**](https://microsoft.github.io/Low-Code/blog/2023-day18) - Intoduction to Power Pages, a powerful tool that provides developers with a wide range of features and tools to help them create professional websites quickly and easily. \\n\\n\\n## **Recap events**\\n\\n* [**Ask The Experts!**](http://localhost:3000/Low-Code/ai-april/Video-Live#ask-the-experts) During these sessions, you\'ll have the chance to have a face-to-face discussion with our leaders and experts, who will be able to provide you with valuable insights, guidance, and best practices:\\n    1. \ud83c\udf99 [**Feb 23, 9AM PST**](https://aka.ms/ATE0223/RSVP ) - Join this session for Q&A from the **Powerful Devs Conference** team. The Powerful Devs Conference is all about showing how code-first developers can integrate with the Power Platform to innovate faster. Our experts will be available to answer questions about full code and low code integration.\\n    ![Week 3 Roadmap](ate_powerfuldev.png)\\n\\n    2. \ud83c\udf99 [**Mar 09, 9AM PST**](https://aka.ms/ATE0309/RSVP) - Join this session for Q&A from the **Low Code February** team, including authors of this #30DaysOfAzureAI series. We will have experts in code-first integration with the Power Platform live to answer questions related to the content of the Low Code February events.\\n    ![Week 3 Roadmap](ate_lowcodefeb.png)\\n\\n\\n* [**Learn Live!**](https://aka.ms/ai-april/LearnLive) If you have any questions or concerns about the Microsoft Learn modules or the Cloud Skills Challenge, be sure to tune in to our \\"Learn Live\\" sessions. During these sessions, you\'ll have the opportunity to hear directly from experts in the field and get tips and insights that can help you succeed in your learning journey: \\n  1. \ud83c\udf99 [**Feb 27**](https://aka.ms/ai-april/LearnLive) - Manage Microsoft Power Platform deployments\\n  ![Week 3 Roadmap](LearnLive.png)\\n\\n* [**Powerful Devs Conference: On-Demand**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) The Powerful Devs Conference is a fantastic resource for developers who want to learn more about the Power Platform and how to build applications quickly and easily. The conference features a wide range of sessions and talks from industry experts, Microsoft Cloud Advocates, community leaders, and members of the Power Platform Team. \\n  ![Week 3 Roadmap](Powerful%20Dev%20Social-Simple1.png)\\n\\n* [**Webinar: Power Platform & Azure Deploys with GitHub: On-Demand**](https://mktoevents.com/Microsoft+Event/383091/157-GQE-382) Watch the on-demand webinar, where you\'ll get a chance to explore the powerful capabilities that the Power Platform opens up for GitHub. You\'ll learn about the inner and outer loop functions that are available with Power Platform and GitHub, and see firsthand how to author CI/CD pipelines that can help you streamline your development process.\\n  ![Week 3 Roadmap](webinar.png)\\n\\n## **Skill Up:** For Self-Study\\n\\nUnable to keep up with the daily pace? No problem! Check out these our self-study materials designed to help you learn at your own convenience:\\n1. [**Resource Collection**](https://aka.ms/ai-april/collection): Bookmark the collection for a 1-stop resource containing all relevant links to documentation and training, as covered in the #30DaysOfAzureAI blogs. \\n2. [**Hands-on Workshops**](https://aka.ms/ai-april/workshop): learn by doing! These labs help you gain hands-on experience from intro to advanced, whereever you\'re in the learning path. \\n3. [**Cloud skills Challenge**](https://aka.ms/ai-april/challenge): gives you a free curated set of learning modules to jumpstart your learning journey into Low Code and Fusion development. \\n\\n## **Look Forward**: Week 4\\n\\nDuring week 4 of the learning journey, you\'ll get a deep-dive in developer experience. You will get a chance to learn about Power Platform app lifecycle management, app governance as well as managing your apps with GitHub Actions, Power Platform pipelines and Azure DevOps. \\n\\nDon\'t forget to bookmark the [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog) page, then follow along to read the daily blog post, ask questions, and connect with other learners. _Get empowered_ with low code development!\\n\\n![Week 3 Roadmap](./../../../static/img/og/30-week4.png)"},{"id":"2023-day20","metadata":{"permalink":"/hubv2/blog/2023-day20","source":"@site/blog/2023-lcf/2023-02-20/index.md","title":"20. ALM For Power Platform","description":"Take a look into the foundamentals of App Lifecycle Management (ALM) and walk you through how can you implement ALM with Power Platform. - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI","date":"2023-02-20T00:00:00.000Z","formattedDate":"February 20, 2023","tags":[{"label":"low code","permalink":"/hubv2/blog/tags/low-code"},{"label":"developer tools","permalink":"/hubv2/blog/tags/developer-tools"},{"label":"power platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"developer experience","permalink":"/hubv2/blog/tags/developer-experience"},{"label":"app lifecycle management","permalink":"/hubv2/blog/tags/app-lifecycle-management"},{"label":"alm","permalink":"/hubv2/blog/tags/alm"},{"label":"30DaysOfLowCode","permalink":"/hubv2/blog/tags/30-days-of-low-code"}],"readingTime":4.055,"hasTruncateMarker":false,"authors":[{"name":"Kartik Kanakasabesan","title":"Principal Program Manager","url":"https://github.com/kkanakas","imageURL":"https://github.com/kkanakas.png","key":"kartik"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day20","title":"20. ALM For Power Platform","authors":["kartik","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","developer experience","app lifecycle management","alm","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-20.png","description":"Take a look into the foundamentals of App Lifecycle Management (ALM) and walk you through how can you implement ALM with Power Platform. - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI","tags":["low code","developer tools","power platform","developer experience","app lifecycle management","alm","30DaysOfLowCode"]},"prevItem":{"title":"19. Recap - Interface Week \u2728","permalink":"/hubv2/blog/2023-day19"},"nextItem":{"title":"21. GitHub Actions for Power","permalink":"/hubv2/blog/2023-day21"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/blog/2023-day20\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"20. ALM For Power Platform\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Take a look into the foundamentals of App Lifecycle Management (ALM) and walk you through how can you implement ALM with Power Platform. - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-20.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/blog/2023-day20\\" />\\n</head>\\n\\nWelcome to `Day 20` of #30DaysOfAzureAI!\\n\\nThe theme for this week is Developer Experience. Today we will take a look into the foundamentals of App Lifecycle Management (ALM) and walk you through how can you implement ALM with Power Platform.\\n\\n## What We\'ll Cover\\n\\n* Intro to Application Lifecycle Management (ALM)\\n* Power Platform and Application Lifecycle Management\\n* Solutions for Application Lifecycle Management\\n* Deployment management\\n* Exercise: Sign up for your [**Developer Plan**](https://aka.ms/ai-april/devplan)\\n* Resources: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Feb20](./../../../static/img/og/30-20.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## What is Application Lifecycle Management (ALM) ?\\n\\nApplication Lifecycle Management is an very large encompassing term. Which is absolutely true, because you are managing the life of an Application from its birth to finally retiring it.\\nNow, there is a perception that ALM is only valid traditional software development projects, and those perceptions maybe right. The applications being built by Power Platform are also applications, and applications by nature need to be managed especially when low code applications are now being built for organization\'s turn key products. Application Lifecycle management is culmination of a problem solving effort by combining people, process, and tools to address a purpose/outcome.\\n\\n## What falls within realm of ALM?\\n\\nALM can be seen via various terms, such as:\\n  - Digital transformation : where an organization adopts technology to help improve value, productivity,risk management, efficiency, and manage costs\\n  - DevOps (Development + Operations)               : It is the union of people, process, and tools to enable continuous delivery to your users of your service\\n  - DevSecOps (Development + Security + Operations) : It is an approach built on top of DevOps and incorporating a security mindset from the get go\\n  - Legacy Application development                  : Managing the Application lifecycle of a mature product line\\n  - New Application development                     : Managing the Application lifecycle of a nascent product line\\n\\nNow there is SDLC which stands for Software Development Lifecycle, it is also part of ALM but focuses mostly on the software development side of things.\\n\\nIn short, all these terms are part of application lifecycle management, as a matter of fact, any time a new application is developed, it will have to be managed eventually!\\n\\n## Power Platform and Application Lifecycle Management\\n\\nPower Platform helps you develop applications quicker and faster, so it has the capabilities to be part of Application Management initiatives of an organization. When implementing Application Lifecycle Management with Power Platform, three things need to be considered\\n\\n- Environment Management                : This entails the strategy you want to implement when embarking on ALM. Typically most common ALM pattern from an environments perspective is to have environments that map to Development, Test, and Production.  \\n\\n- Organize the artifacts in Solutions   : PowerApps, PowerAutomate Flows, Power Virtual Agents, AI Builder, PowerBI, and Power Pages assets need to be within solutions\\n\\n- Managing Deployments                  : When solutions are deployed from Development, to Test, to Production what are the mechanism that need to be employed and managed (i.e. Azure DevOps pipelines, GitHub actions, and Pipelines for Power Platform)  \\n\\n## Solutions are important for Application Lifecycle Management\\n\\nBeyond the components listed in the prior section, the additional components that are part of solution for enabling successful Application Lifecycle Management\\n![What is in a solution](./What-is-in-a-solution.png)\\n\\nIn addition, there are two types of solution, which are managed and unmanaged solutions.\\n-    Managed solutions  : Are immutable, as in once a solution becomes managed, it cannot be changed. Think of components that you use as a library for your application\\n-    Unmanaged solutions: These solutions can be changed, solutions when in your development environment are generally in the unmanaged state.\\n\\nWhen committing solutions from a Power Platform developer environment, you need to export them, the solution renders itself as a zip file that can be then committed to source code repository.\\n\\n## Deployment management\\n\\nAs mentioned before, there are various ways and means to deploy power platform applications, there are integrations with Azure DevOps and GitHub Actions. In addition, Power Platform has an in-product deployment capability called [Pipelines for Power Platform](https://learn.microsoft.com/power-platform/alm/pipelines/?WT.mc_id=javascript-82212-ninarasi). This is designed for developers who may not have sophisticated ALM deployment needs.\\n\\n## Resources\\n* [ALM with Power Platform](https://learn.microsoft.com/power-platform/alm/?WT.mc_id=javascript-82212-ninarasi)\\n* [Environment Strategy](https://learn.microsoft.com/power-platform/alm/environment-strategy-alm/?WT.mc_id=javascript-82212-ninarasi)\\n* [Solution Concepts](https://learn.microsoft.com/power-platform/alm/solution-concepts-alm/?WT.mc_id=javascript-82212-ninarasi)\\n* [ALM Automation: Power Platform Build Tools for Azure DevOps](https://learn.microsoft.com/power-platform/alm/devops-build-tools?WT.mc_id=javascript-82212-ninarasi)\\n* [ALM Automation: Power Platform actions with GitHub](https://learn.microsoft.com/power-platform/alm/devops-github-actions?WT.mc_id=javascript-82212-ninarasi)\\n* [ALM Automation:Pipelines in Power Platform](https://learn.microsoft.com/power-platform/alm/pipelines?WT.mc_id=javascript-82212-ninarasi)\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day21","metadata":{"permalink":"/hubv2/blog/2023-day21","source":"@site/blog/2023-lcf/2023-02-21/index.md","title":"21. GitHub Actions for Power","description":"Explore the topic of GitHub Actions and show you how can you connect to Power Platform environments with GitHub Actions","date":"2023-02-21T00:00:00.000Z","formattedDate":"February 21, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"developer experience","permalink":"/hubv2/blog/tags/developer-experience"},{"label":"github","permalink":"/hubv2/blog/tags/github"}],"readingTime":3.355,"hasTruncateMarker":false,"authors":[{"name":"Kartik Kanakasabesan","title":"Principal Program Manager","url":"https://github.com/kkanakas","imageURL":"https://github.com/kkanakas.png","key":"kartik"},{"name":"Daniel Laskewitz","title":"Senior Cloud Advocate","url":"https://github.com/Laskewitz","imageURL":"https://github.com/Laskewitz.png","key":"daniel"}],"frontMatter":{"slug":"2023-day21","title":"21. GitHub Actions for Power","authors":["kartik","daniel"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","developer experience","github","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-21.png","description":"Explore the topic of GitHub Actions and show you how can you connect to Power Platform environments with GitHub Actions","tags":["low-code-february","30-days-of-lowcode","power-platform","developer experience","github"]},"prevItem":{"title":"20. ALM For Power Platform","permalink":"/hubv2/blog/2023-day20"},"nextItem":{"title":"22. Power Automate, ACS and OpenAI","permalink":"/hubv2/blog/2023-day22"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-21.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"GitHub Actions for Power\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Explore the topic of GitHub Actions and show you how can you connect to Power Platform environments with GitHub Actions\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-21.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-21.png\\" />\\n</head>\\n\\nWelcome to `Day 21` of #30DaysOfAzureAI!\\n\\nYesterday we talked about foundamentals of App Lifecycle Managament with Power Platform. Today we\'ll explore the topic of GitHub Actions and show you how can you connect to Power Platform environments with GitHub Actions.\\n\\n## What We\'ll Cover\\n * Intro to GitHub Actions\\n * GitHub Runners\\n * Power Platform and GitHub Actions\\n * Exercise: Sign up for your [**Developer Plan**](https://aka.ms/ai-april/devplan)\\n * Resources: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Empty Banner Placeholder](./../../../static/img/og/30-21.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Basic GitHub Actions Concepts\\nBefore we get into details on the Power Platform GitHub actions, we need to understand some key terms of GitHub, that enable GitHub to do Continuous Integration/Continuous Delivery (CI/CD).\\n\\n![GitHub Workflow Concepts](./Github-concept.png)\\n\\n* GitHub actions are components to enable CI/CD of Power Platform Applications using GitHub Workflows.\\n* GitHub Run      : GitHub run is a term used when the workflow runs \\n* GitHub Workflow : This is the actual CI/CD script that is used by GitHub and it consists of Jobs\\n* GitHub Job      : A Job is a composition of a GitHub Runner (container where the CI/CD script is run)\\n* GitHub Steps    : Step has a set of actions that accomplish an the overall outcome of the workflow (such as deploying to Power Platform)\\n\\n[The GitHub actions for Power Platform are available at the GitHub market place](https://github.com/marketplace/actions/powerplatform-actions). The GitHub actions, provide the ability to import export solutions, deploying to different environments, provisioning and decommissioning an environments, and validate the solution when it is being imported into a target environment.\\n\\n## GitHub Runners\\nRunners in GitHub are a type of machine where you need to run your GitHub job on. Runners can GitHub hosted or self-hosted. \\nGitHub hosted runners are managed by GitHub and all you need to do is to use *runs-on* and GitHub will automatically allocate such a resource during the runtime of a CI/CD script. \\n\\nSelf-hosted Runners run on your identified resources such as VMs in the Azure Cloud or On-premises. This runners are configured and controlled based on your needs, as in you have more control on the kind of operating system version, pre-installed software tools that need to install for your CI/CD script to run.\\n\\nPower Platform Actions on GitHub, support Windows and Linux images for both GitHub hosted and self-hosted runners. \\n\\n## How to connect to Power Platform environments using GitHub Actions? \\nPower Platform Actions for GitHub have support for the following: \\n- UserName/Password : Generic connection which uses username and password to authenticate to the Power Platform environments. Please do not enable MFAs this account otherwise your GitHub workflows will break\\n- Service Principal and Client secret (Recommended) - This allows your workflow to authenticate to the Power Platform using a service principal identity with a client secret. This is an approach we generally recommend when deploying Power Platform applications at scale.\\n\\n## Use Environment Variables within GitHub workflow scripts when deploying Power Platform applications\\nIf you want to use the same workflow to deploy multiple Power Platform solution to either one environment or different environments. \\nGitHub Workflows support environment variables. \\n![Example of GitHub environment variables](./GitHub-env-variables.png)\\n\\nOnce you have the environments in place you can then call these environment variables from within the actions\\n![Example of invoking environment variables from the action](./Action-env-var.png)\\n\\n\\n## Exercise\\n* Try out our Hands on lab for [**GitHub actions**](https://github.com/microsoft/powerplatform-actions-lab)\\n\\n## Resources\\n- [**Get the GitHub actions from the GitHub marketplace**](https://github.com/marketplace/actions/powerplatform-actions)\\n- [**Self hosted runner information**](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners)\\n- [**About GitHub hosted runners**](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners)\\n- [**Azure AD service principal**](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal?WT.mc_id=javascript-82212-ninarasi)\\n- [**GitHub Power Platform Actions tutorial**](https://learn.microsoft.com/power-platform/alm/tutorials/github-actions-start?source=recommendations?WT.mc_id=javascript-82212-ninarasi)\\n- [**GitHub Power Platform Actions: Hands on lab**](https://github.com/microsoft/powerplatform-actions-lab)\\n\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day22","metadata":{"permalink":"/hubv2/blog/2023-day22","source":"@site/blog/2023-lcf/2023-02-22/01-acs-sms-bot.md","title":"22. Power Automate, ACS and OpenAI","description":"Learn how to build a SMS conversational bot with Power Automate, OpenAI and Azure Communication Services! - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI","date":"2023-02-22T00:00:00.000Z","formattedDate":"February 22, 2023","tags":[{"label":"low code","permalink":"/hubv2/blog/tags/low-code"},{"label":"developer tools","permalink":"/hubv2/blog/tags/developer-tools"},{"label":"power platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"power automate","permalink":"/hubv2/blog/tags/power-automate"},{"label":"azure communication services","permalink":"/hubv2/blog/tags/azure-communication-services"},{"label":"30DaysOfLowCode","permalink":"/hubv2/blog/tags/30-days-of-low-code"}],"readingTime":6.005,"hasTruncateMarker":false,"authors":[{"name":"Milan Kaur","title":"Software Engineer II","url":"https://www.linkedin.com/in/milankaurintech/","imageURL":"https://media.licdn.com/dms/image/D4D03AQHpkA2SsnkQXQ/profile-displayphoto-shrink_400_400/0/1673088306949?e=1682553600&v=beta&t=wTXCTb9T8BBBU6qtpp73KGuyDcB8UPAcprYeVI1Uijs","key":"milan"},{"name":"David de Matheu","title":"Senior Product Manager","url":"https://www.linkedin.com/in/ddematheu/","imageURL":"https://media.licdn.com/dms/image/C5603AQFxbBVgSJywUg/profile-displayphoto-shrink_400_400/0/1643603250406?e=1682553600&v=beta&t=4hru8D3pT2SJ44PpgGPiEyXvsMvE5gzqdLOLM8eVDlk","key":"david"},{"name":"Daysha Carter","title":"Principal Product Manager","url":"https://www.linkedin.com/in/dayshacarter/","imageURL":"https://media.licdn.com/dms/image/C4D03AQFcUwDMgDAX6g/profile-displayphoto-shrink_400_400/0/1516629468930?e=1682553600&v=beta&t=9-pB-4Q9VBKgb8RXtb-uGqMXJYU0Tx5zXz6lrtHFDvA","key":"daysha"}],"frontMatter":{"slug":"2023-day22","title":"22. Power Automate, ACS and OpenAI","authors":["milan","david","daysha"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","power automate","azure communication services","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-22.png","description":"Learn how to build a SMS conversational bot with Power Automate, OpenAI and Azure Communication Services! - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI","tags":["low code","developer tools","power platform","power automate","azure communication services","30DaysOfLowCode"]},"prevItem":{"title":"21. GitHub Actions for Power","permalink":"/hubv2/blog/2023-day21"},"nextItem":{"title":"23. Power Platform and Governance","permalink":"/hubv2/blog/2023-day23"}},"content":"<head>\\n  <meta name=\\"twitter:url\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-22.png\\" />\\n  <meta name=\\"twitter:title\\"\\n    content=\\"22. Power Automate and ACS\\" />\\n  <meta name=\\"twitter:description\\"\\n    content=\\"Learn how to build a SMS conversational bot with Power Automate, OpenAI and Azure Communication Services! - join us at #AiApril https://aka.ms/ai-april. #30DaysOfAzureAI\\" />\\n  <meta name=\\"twitter:image\\"\\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-22.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\"\\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" />\\n  <link rel=\\"canonical\\"\\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-22.png\\" />\\n</head>\\n\\nWelcome to `Day 22` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n\\n* Power Automate and Azure Communication Services\\n* Build a SMS conversational bot\\n* Configuring Event Grid Trigger\\n* Configure Azure OpenAI\\n* Configure Azure Communication Services SMS\\n* Exercise: Sign up for your [**Developer Plan**](https://aka.ms/ai-april/devplan)\\n* Resources: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Feb22](./../../../static/img/og/30-22.png)\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Background\\n\\nIn our [last blog](https://techcommunity.microsoft.com/t5/azure-communication-services/build-a-conversational-sms-bot-with-azure-communication-services/ba-p/3739568), we walked through the process of building a SMS conversational bot. Today we want to showcase a similar bot, but this time built completely on top of low code connectors for Power Automate. It is incredibly easy and exciting to leverage Azure Communication Services connectors in conjunction with Large Language Models (LLM) like ChatGPT to build a conversation bot. For this blog, we will be building Anton, a personal trainer bot for Contoso Gym. See the preview:\\n\\n![Anton Preview](./01-anton_demo.gif)\\n\\n## Pre-requisites\\n\\nTo follow along you will need:\\n* An Azure account with an active subscription. [Create an account for free](https://aka.ms/acs-sms-open-ai-create-azure).\\n* Enable Event Grid resource provided on your subscription. See [instructions](https://aka.ms/acs-sms-open-ai-event-sub).\\n* An active Communication Services resource and connection string. [Create](https://aka.ms/acs-sms-open-ai-create-resource) a Communication Services resource.\\n* An SMS-enabled telephone number. [Get a phone number](https://aka.ms/acs-sms-open-ai-get-number).\\n* Azure OpenAI resource. See [instructions](https://aka.ms/acs-sms-open-ai-create-open).\\n* Azure OpenAI deployed model. See [instructions](https://aka.ms/acs-sms-open-ai-deploy-model).\\n* Power Automate account. Azure Communication Services connectors require a [plan](https://learn.microsoft.com/power-platform/admin/power-automate-licensing/types#standalone-plans) that supports premium connectors.\\n\\n## Configuring Event Grid Trigger\\n\\nThis application will leverage [Azure Event Grid](https://learn.microsoft.com/azure/event-grid/) to listen for incoming text messages to Azure Communication Services number, and an [Azure Function](https://learn.microsoft.com/azure/azure-functions/) to process the event and respond with an Azure OpenAI generated response.\\n\\nWe will start by configuring an Event Grid trigger for your Power Automate flow. This trigger will automatically connect to your existing Azure subscription and to the Azure Communication Services resource to configure your event subscription.\\n\\n![Event Grid Trigger](01-acs_sms_event_grid.png)\\n\\nTo keep the data organized, you will add a Parse JSON connector to help us parse the event. The event schema follows this structure:\\n\\n    <details>\\n    <summary><b>Schema (open to see)</b></summary>\\n\\n    ```json\\n\\n    {\\n        \\"properties\\": {\\n            \\"data\\": {\\n                \\"properties\\": {\\n                    \\"From\\": {\\n                        \\"type\\": \\"string\\"\\n                    },\\n                    \\"Message\\": {\\n                        \\"type\\": \\"string\\"\\n                    },\\n                    \\"MessageId\\": {\\n                        \\"type\\": \\"string\\"\\n                    },\\n                    \\"ReceivedTimestamp\\": {\\n                        \\"type\\": \\"string\\"\\n                    },\\n                    \\"To\\": {\\n                        \\"type\\": \\"string\\"\\n                    }\\n                },\\n                \\"type\\": \\"object\\"\\n            },\\n            \\"dataVersion\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"eventTime\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"eventType\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"id\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"metadataVersion\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"subject\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"topic\\": {\\n                \\"type\\": \\"string\\"\\n            }\\n        },\\n        \\"type\\": \\"object\\"\\n    }\\n \\n    ```\\n\\n    </details>\\n\\nAdd that schema to the Parse JSON connector and add the event body as the content.\\n\\n![Parse JSON](./01-acs_sms_parse_json.png)\\n\\n## Configure Azure OpenAI\\n\\nNext, we must add a call to Azure OpenAI to ask the model to generate a response. We will use REST APIs to POST a request with our prompt. For the prompt, we will use a combination of the message sent by the user and a pre-designed text. In this example, we want the GPT-3 model to act like Anton, a personal trainer at Contoso Gym. We added some sample quotes from which the model can draw inspiration. These quotes help guide the model\u2019s response and provide a more intuitive and conversational flow for the users. See the completed prompt below:\\n\\n    ```text\\n    \\n        You\'re Anton Stanescu and you are a personal trainer at Contoso Gym. You are having a conversation with one of your students. You are trying to motivate them to work out.\\n        Examples of the types of things that Anton says:\\n        - The only bad workout is the one that didn\'t happen.\\n        - Strive for progress, not perfection.\\n        - You won\'t get the muscle without the dedication and the drive\\n        - Train hard...so you can stop a train if you need to.\\n        - Push up, push down, push up, push down\\n        - Exercise should be regarded as tribute to the heart.\\n        Anton: Welcome to the Contoso Gym! Big things await for you.\\n        Student:\\n    \\n    ```\\n\\nTo keep the flow organized, we will add a compose connector for our prompt so we can easily reference it later.\\n\\n![Compose Prompt](./01-acs_sms_compose_prompt.png)\\n\\nTo communicate with the Azure OpenAI service, we will use POST request inside of an HTTP connector. In return, we will receive a text generated by the Azure OpenAI model. To configure the HTTP connector, you will need the URI to your Azure OpenAI resource. You will also need the `api-key` for your Azure OpenAI resource.\\n\\n    ```text\\n\\n    <base_url> + /openai/deployments/ + <deployment_name> + /completions?api-version=2022-12-01\\n\\n    ```\\n\\n![HTTP Connector](./01-acs_sms_sms_connector.png)\\n\\nUsing the compose output for our prompt, we will concatenate together the prompt, the message the user sent through SMS, and a stop trigger for the Open AI model to stop generating text:\\n\\n    ```text\\n\\n    concat(outputs(\'Compose\'), body(\'Parse_JSON\')?[\'data\']?[\'Message\'], \'\\\\nAnton:\')\\n\\n    ```\\nOnce we have the HTTP connector configured, we will use a Parse JSON connector to process the response from Azure Open AI. The expected schema from Azure Open AI takes the following format:\\n\\n    <details>\\n    <summary><b>Schema (open to see)</b></summary>\\n\\n    ```json\\n\\n    {\\n        \\"properties\\": {\\n            \\"choices\\": {\\n                \\"items\\": {\\n                    \\"properties\\": {\\n                        \\"finish_reason\\": {\\n                            \\"type\\": \\"string\\"\\n                        },\\n                        \\"index\\": {\\n                            \\"type\\": \\"integer\\"\\n                        },\\n                        \\"logprobs\\": {},\\n                        \\"text\\": {\\n                            \\"type\\": \\"string\\"\\n                        }\\n                    },\\n                    \\"required\\": [\\n                        \\"text\\",\\n                        \\"index\\",\\n                        \\"logprobs\\",\\n                        \\"finish_reason\\"\\n                    ],\\n                    \\"type\\": \\"object\\"\\n                },\\n                \\"type\\": \\"array\\"\\n            },\\n            \\"created\\": {\\n                \\"type\\": \\"integer\\"\\n            },\\n            \\"id\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"model\\": {\\n                \\"type\\": \\"string\\"\\n            },\\n            \\"object\\": {\\n                \\"type\\": \\"string\\"\\n            }\\n        },\\n        \\"type\\": \\"object\\"\\n    }\\n\\n \\n    ```\\n\\n    </details>\\n\\nWe will configure it to use the body of the http request as the content the schema above.\\n\\n![Parse JSON](./01-acs_sms_parse_json.png)\\n\\n## Configure Azure Communication Services SMS\\n\\nFinally, we will configure our SMS connector for Azure Communication Services to respond with the new response generated by Azure OpenAI. You will need a connection string for your Azure Communication Services resource to initialize the SMS connector.\\n\\n![SMS Connector](./01-acs_sms_sms_connector.png)\\n\\nNow that everything is connected, test the flow by sending an SMS from your phone to the phone number you acquired through the Azure Communication Services resource.\\n\\n## Next Steps and Resources\\n\\nCongratulations! You have created a conversational SMS bot using Power Automate. Azure Communication Services provides out of the box connectors for SMS, Email and Chat. Whether it is having Anton, the personal trainer bot talk to your customers or having a real person interact with them, Azure Communication Services can help. To learn more about other resources that Azure Communication Services offers see the links below:\\n\\n* [Overview](https://aka.ms/acs-sms-open-ai-overview) of Azure Communication Services.\\n* [SMS Connector](https://aka.ms/acs-sms-connector)\\n* [Email Connector](https://aka.ms/acs-email-connector)\\n* [Chat Connector](https://aka.ms/acs-chat-connector)\\n* [Identity Connector](https://aka.ms/acs-identity-connector)\\n* Want to learn how to do this in code, checkout out [last blog post](https://techcommunity.microsoft.com/t5/azure-communication-services/build-a-conversational-sms-bot-with-azure-communication-services/ba-p/3739568).\\n\\nAlso consider -\\n\\n* Signing up for the free [Power Apps Developer Plan](https://aka.ms/ai-april/devplan) so you have access to the Power Platform.\\n* Enrolling in the [Cloud Skills Challenge](https://aka.ms/ai-april/challenge) to skill up on key cloud technologies with free, self-guided learning courses, and start climbing the leaderboard!\\n\\n![Campaign Banner](./../../../static/img/og/30-banner.png)"},{"id":"2023-day23","metadata":{"permalink":"/hubv2/blog/2023-day23","source":"@site/blog/2023-lcf/2023-02-23/01 - Low-Code Governance with Managed Environments.md","title":"23. Power Platform and Governance","description":"Enable governance-at-scale and proactively build and enforce best practices with Managed Environments for Power Platform.","date":"2023-02-23T00:00:00.000Z","formattedDate":"February 23, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"managed environment","permalink":"/hubv2/blog/tags/managed-environment"}],"readingTime":4.82,"hasTruncateMarker":false,"authors":[{"name":"Caitlin Shaw","title":"Senior Product Manager","url":"https://github.com/caitlinshaw1","imageURL":"https://avatars.githubusercontent.com/u/114948887?v=4","key":"caitlin"},{"name":"Kartik Kanakasabesan","title":"Principal Program Manager","url":"https://github.com/kkanakas","imageURL":"https://github.com/kkanakas.png","key":"kartik"}],"frontMatter":{"slug":"2023-day23","title":"23. Power Platform and Governance","authors":["caitlin","kartik"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power platform","low code","governance","managed environment","low-code-february","30-days-of-lowcode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-23.png","description":"Enable governance-at-scale and proactively build and enforce best practices with Managed Environments for Power Platform.","tags":["low-code-february","30-days-of-lowcode","power-platform","managed environment"]},"prevItem":{"title":"22. Power Automate, ACS and OpenAI","permalink":"/hubv2/blog/2023-day22"},"nextItem":{"title":"24. Power Apps & Automated Testing","permalink":"/hubv2/blog/2023-day24"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-23.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"23. Power Platform and Governance\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Enable governance-at-scale and proactively build and enforce best practices with Managed Environments for Power Platform. Learn more in #AiApril, #30DaysOfAzureAI\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-23.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-23.png\\" />\\n</head>\\n\\nWelcome to `Day 23` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * Governance for Power Platform\\n * Visibility into Apps and Automations\\n * Control over Apps Deployment \\n * Manage App Estate at Scale\\n * **Exercise**: Sign up for your [**Free Developer Plan**](https://aka.ms/ai-april/devplan)\\n * **Resources**: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Feb 23](../../../static/img/og/30-23.png)\\n\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Governing the Power Platform\\nPower Platform administrators are charged with monitoring and managing a growing number of environments and resources in their tenants. Organizations are trying to find the right tools for their governance requirements in order to build guardrails around data, applications, and environments. Today, admins can enable governance-at-scale without additional IT resources and proactively build and enforce best practices with [Managed Environments](https://go.microsoft.com/fwlink/?linkid=2211534) for Power Platform.\\n\\nManaged Environments is a suite of capabilities that allows admins to manage the Power Platform at scale with more visibility, more control, and less effort. Once activated on an environment, Managed Environments allows admins to enable a suite of features that support the governance of their environments and resources by:\\n  \xb7 Increasing visibility into the apps and automations in an organization with proactive usage insights and admin digest. \\n  \xb7 Gaining more control and reducing risk by creating sharing limits on applications and proactively enforcing security and reliability with built-in solution checker integration.\\n  \xb7 Significantly reducing the complexity of ALM (application lifecycle management) with automated application lifecycle management allowing admins to setup a pipeline in less than two minutes and citizen developers to initiate deployment.\\n \\nWith over 5,000 Power Platform environments activated, customers are experiencing the ease of managing low-code assets at scale while reducing risk and empowering their makers to innovate.  Read on to learn about current Managed Environments capabilities.\\n\\n\\n### **More visibility** into the apps and automations in your organization\\nWith [Admin Insights](https://go.microsoft.com/fwlink/?linkid=2211177), admins have visibility into usage in their Managed Environments. Admins can enable a weekly email digest that includes top apps, flows, and makers, as well as stale apps and flows across their Managed Environments. High-usage assets may require extra security, and low-usage assets could be cleaned up. Influential makers can be tapped to build best practices and support more knowledgeable makers. With Admin Insights, there\u2019s no need to set up a data lake; usage information is delivered straight to your inbox.\\n\\n  ![Weekly Admin Digest](./Weekly%20admin%20digest.png)\\n\\n\\nManaged Environments also gives admins a new view that easily identifies all [Data Policies](https://go.microsoft.com/fwlink/?linkid=2211178) applied to an environment. With this, admins can ensure their Managed Environments are compliant and secure. \\n\\n![Data policies](./Data%20policies.png)\\n\\n\\n### **More control** over which apps are deployed and who builds them\\nWith [Sharing Limits](https://go.microsoft.com/fwlink/?linkid=2211538), users can be prevented from broadly sharing canvas apps in order to control oversharing of information. Admins can prevent sharing to security groups and additionally limit the number of people an app can be shared with. \\n![Sharing limits](./Sharing%20limits.png)\\n\\n[Solution checker](https://learn.microsoft.com/power-platform/admin/managed-environment-solution-checker?WT.mc_id=javascript-82212-ninarasi) allows admins to enforce validation of their solutions against a set of best practice rules, ensuring solutions are secure and reliable. Admins can configure the level of validation they want to apply:\\n![Solution Checker](./Solution%20Checker.png)\\nWhen the validation is set to Warn or Block, admins will receive a summary email when a solution is imported or blocked.\\n\\n### **Less effort** to manage and govern your entire application estate\\n\\n[Pipelines](https://learn.microsoft.com/power-platform/alm/set-up-pipelines?WT.mc_id=javascript-82212-ninarasi) make it easy to deploy solutions to environments (see tomorrow\u2019s blog for a deep dive!). With automated ALM configured by admins, there\u2019s no need for makers to know everything about deployments.\\n\\n*\u201cTraining a user or a maker on ALM was easily a couple of hours, and most of the time, people weren\u2019t coming back because they didn\u2019t understand most of what was there. Now, all I have to do is just add the users as Pipeline admins and then just say \u201cHey, you see that little rocket down there? Just press that!\u201d*\\n\\nAndrew Gaskins: Global Power Platform Lead - Lumen Technologies\\n\\nFor all of the powerful features included in Managed Environments, [Activation](https://go.microsoft.com/fwlink/?linkid=2211456) can be done a few simple clicks, saving time and effort for Power Platform admins.\\n\\n\\n## Powerful governance made easy with Managed Environments for Power Platform\\nPower Platform offers several options for organizations to implement governance and security of their low code assets including the Power Platform Admin Center, a single place admins can go to build and enforce their governance policies. There, admins can build guardrails around data, apps, and environments, and view analytics on low code assets by default. With Managed Environments, admins are able to proactively build and enforce best practices while gaining key insights and analytics, and enable governance-at-scale without additional IT resources.\\nManaged Environments allows organizations to streamline their governance at scale with features that provide more visibility, more control, all with less effort.\\n\\n\\n\\n## Resources\\n\\n* **Watch**: [The Low Code Revolution Show - **Governance and ALM**](https://learn.microsoft.com/shows/the-low-code-revolution/the-low-code-revolution-governance-and-alm?WT.mc_id=javascript-82212-ninarasi)\\n* **Watch** all of the [**Powerful Devs Conference**](https://www.youtube.com/live/4VK1CJYR2W4)  sessions on demand to learn from experts how you, as a developer, can leverage the Power Platform to build applications faster and with far less effort.\\n* Low Code February [**Learn Collection**](https://learn.microsoft.com/users/nityan/collections/xz6ehr2mx031y0?WT.mc_id=javascript-82212-ninarasi): Collection of resources to go from learning Power Platform Fundamentals, to understanding the Dataverse and working in Fusion Development teams.\\n\\n* Sign up for the [**Free Power Apps Developer Plan**](https://aka.ms/ai-april/devplan) so you have access to the Power Platform.\\n* Enrolling in the [**Cloud Skills Challenge**](https://aka.ms/ai-april/challenge) to skill up on key cloud technologies with free, self-guided learning courses, and start climbing the leaderboard!"},{"id":"2023-day24","metadata":{"permalink":"/hubv2/blog/2023-day24","source":"@site/blog/2023-lcf/2023-02-24/index copy.md","title":"24. Power Apps & Automated Testing","description":"Learn how to use right selection of tools to support good testing practices to manage app lifecycle for Power Apps - join us at #AiApril and #30DaysOfAzureAI https://aka.ms/ai-april","date":"2023-02-24T00:00:00.000Z","formattedDate":"February 24, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"automated testing","permalink":"/hubv2/blog/tags/automated-testing"}],"readingTime":6.225,"hasTruncateMarker":false,"authors":[{"name":"Chris Baldwin","title":"Principal Product Manager","url":"https://github.com/ChrisBal-MSFT","imageURL":"https://avatars.githubusercontent.com/u/23078985?v=4","key":"chris"}],"frontMatter":{"slug":"2023-day24","title":"24. Power Apps & Automated Testing","authors":["chris"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","automated testing","30DaysOfLowCode"],"image":"https://microsoft.github.io/Low-Code/img/og/30-24.png","description":"Learn how to use right selection of tools to support good testing practices to manage app lifecycle for Power Apps - join us at #AiApril and #30DaysOfAzureAI https://aka.ms/ai-april","tags":["low-code-february","30-days-of-lowcode","power-platform","automated testing"]},"prevItem":{"title":"23. Power Platform and Governance","permalink":"/hubv2/blog/2023-day23"},"nextItem":{"title":"26. Recap - Dev Experience Week \u2728","permalink":"/hubv2/blog/2023-day26"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-24.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"24. Power Apps & Automated Testing\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Learn how to use right selection of tools to support good testing practices to manage app lifecycle for Power Apps - join us at #AiApril and #30DaysOfAzureAI https://aka.ms/ai-april\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-24.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-24.png\\" />\\n</head>\\n\\nWelcome to `Day 24` of #30DaysOfAzureAI!\\n\\n## What We\'ll Cover\\n * Why automated testing is important\\n * Tools available today to test your Power Apps\\n * Plans and investments in this area\\n * **Resources**: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n * **Activity**: [**Sign up**](https://aka.ms/ai-april/devplan) for the **free** Power Apps Developer Plan.\\n\\n\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![feb24](./../../../static/img/og/30-24.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## Why automated testing is important\\nAutomated testing is an important part of the app lifecycle. Our goal is to provide customers with the right selection of tools to support good testing practices. Customers often start with manual testing when apps are in their earlier stages.  But, we hear about customers who strive to introduce automated testing into their overall workflows and processes once they reach these inflection points:\\n\\n* **As apps grow in complexity** - As usage increases and makers respond to more and more feature requests in their apps, complexity grows as well.  Maybe an app calls out to an external API or has extensive Power Fx logic within it.  These are pieces that all must work together to ensure the proper functioning of your app, so it\'s important to make sure that they all come together to provide value from the end-user\'s perspective.\\n\\n* **As collaborators get involved** - Collaboration is key, but the more cooks in the kitchen you have the more things can change unexpectedly.  How can you best ensure that when multiple people are collaborating on an app that changes don\'t introduce instability and other uenxpected behavior?  Running automated tests when changes are made can help ensure that apps stay functional when their are multiple collaobrators. \\n* **As apps become more business critical** - More and more customers are trusting Power Apps with business critical processes.  Simply put, if the app doesn\'t function then core business processes or functions may also be impacted.  Automated testing can help to ensure continuity of the app functionality upon which your business processes depend.  And, better stability can lead to increased end user trust and satisfaction when using apps.\\n\\nLet\'s take a look at what\'s available.\\n\\n## Tools available today to test your Power Apps\\n\\nThere are a set of tools available today that you can use to test your apps.  \\n\\n### Test Studio\\n\\nPower Apps Test Studio is low-code solution to organize, record, and automate tests for canvas apps.  Test Studio features the following capabilities:\\n* **Test step recorder** - Test Studio includes recording capabilities.  When you start the recorder, you can interact with the app as you expect your end users will. Test Studio will record your interactions as test steps.\\n\\n* **Test editor** - Once you\'ve recorded test steps with Test Studio, the next step is to add your custom assertions. You can use the Test Studio UI to insert the assertions where they make sense in your app\'s flow.\\n  ![Test Studio editor](./TS-EditSteps.gif)\\n\\n* **Test playback** - Test Studio can be run in Studio by pressing Play. If any of the assert statements you configured in the previous step were to fail, the test step will fail and you will be shown the error. or it can be integrated into CI/CD flows by following these instructions: [Automate tests with Azure Pipelines using YAML](https://learn.microsoft.com/power-apps/maker/canvas-apps/test-studio-yaml-pipeline?WT.mc_id=javascript-82212-ninarasi)\\n\\n  ![Test Studio playback](./TS-PlayMode.png)\\n\\n### Test Engine\\nTest Engine is an evolution of our Power Apps testing tools. Test Engine builds upon the key use cases of Test Studio, but takes it in a new, powerful direction through open source collaboration and use of the Playwright browser testing platform. The goals of Test Engine are to provide customers with a robust testing platform for all types of Power Apps, and to make it super easy to integrate automated testing into your app development processes.\\n\\nA lot more information about Test Engine can be found in the blog post [Introducing Test Engine: An open platform for automated testing of canvas apps](https://powerapps.microsoft.com/blog/introducing-test-engine-an-open-platform-for-automated-testing-of-canvas-apps/)\\n\\n  ![Test Engine automating a test run](TE-Recording.gif)\\n\\nTest Engine supports canvas apps today, with support for model-driven apps to come in the future.  Some of the key benefits of Test Engine are:\\n\\n* **Power Fx test authoring** - Test steps are written in familiar Power Fx, without the need for a pro-code solution using C#, JavaScript, or other complex code.\\n* **Connector mocking** - You can simulate the response your app receives from custom connectors.  This can be useful if you app hits an endpoint that has side effects, like inserting rows into Dataverse tables or kicking off Flows.\\n* **Screenshot function and video recording** - This lets you grab screenshots and video recordings of unattended test runs.  This will capture exactly what the user would see if they were interacting with the app.  This makes it easy to debug and follow up on test failures.\\n* **Robust, stable tests** - Test Engine has a special set of capabilities that abstract the app\'s browser DOM from you.  This means you create your tests by referencing the controls that you define at design-time, and you never need to worry about the specific output structure of the app in the browser.  Our goal here is that your tests should never break or need updating unless you make changes yourselves to the app being tested.\\n* **Reuse Test Studio tests** - If you want to reuse any tests you have recorded using Test Studio, you can export the test plan files for reuse in Test Engine by clicking the Download suite button:\\n\\n  ![Alt text](TS-Export.png)\\n\\n## Plans and investments in automated testing\\nWe are investing in this area and are working on a couple key things in this area:\\n\\n* CI/CD integration - Our goal is to make it as easy as possible for you to integrate Test Engine into your CI/CD tools and make functional testing a regular, robust part of your app development process.  We are integrating Test Engine into the PAC CLI toolset to make it easy to use (so you will not have to build and run the Test Engine GitHub project), and we will be building Azure DevOps Pipelines and GitHub Actions support as well.  We hope that by integrating more tightly into this tooling, we will make automated testing a no brainer for your organization.\\n* Model-driven app support - As stated before, Test Engine and Test Studio support canvas apps today.  We want to build support for model-driven apps so that you have one set of comprehensive tools that will work with all of your Power Apps.\\n* Low-code recording enhancements - Eventually, we want to bring the ease of test case recording that customers have in Test Studio to Test Engine. We would love to hear your feedback around what we should be prioritizing to make it easier to create test plans for your apps.\\n\\n## Resources\\n* **Try out Test Engine** - [Visit the Test Engine GitHub project](https://github.com/microsoft/PowerApps-TestEngine#getting-started)\\n* **Let us know any issues or feedback** - [GitHub issues for Test Engine](https://github.com/microsoft/PowerApps-TestEngine#getting-started)\\n* **Let us know any general feedback about test tools** - [Test Studio discussion thread](https://powerusers.microsoft.com/t5/Building-Power-Apps/Power-Apps-Test-Studio-Feedback-discussion-thread/td-p/455051)"},{"id":"2023-day26","metadata":{"permalink":"/hubv2/blog/2023-day26","source":"@site/blog/2023-lcf/2023-02-26/index.md","title":"26. Recap - Dev Experience Week \u2728","description":"Let\'s recap Week 4 of #30DaysOfAzureAI focused on developer experience with power platform - join us at #AiApril https://aka.ms/ai-april.","date":"2023-02-26T00:00:00.000Z","formattedDate":"February 26, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"learn-live","permalink":"/hubv2/blog/tags/learn-live"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"ask-the-expert","permalink":"/hubv2/blog/tags/ask-the-expert"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"recap","permalink":"/hubv2/blog/tags/recap"}],"readingTime":5.57,"hasTruncateMarker":false,"authors":[{"name":"Sonja Gu","title":"Product Marketing Manager","url":"https://github.com/SonjaGu","imageURL":"https://github.com/SonjaGu.png","key":"sonja"},{"name":"Nitya Narasimhan","title":"Sr. Cloud Advocate, Illustrator","url":"https://github.com/nitya","imageURL":"https://github.com/nitya.png","key":"nitya"}],"frontMatter":{"slug":"2023-day26","title":"26. Recap - Dev Experience Week \u2728","authors":["sonja","nitya"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["low code","developer tools","power platform","developer experience","30DaysOfLowCode","recap"],"image":"https://microsoft.github.io/Low-Code/img/og/30-26.png","description":"Let\'s recap Week 4 of #30DaysOfAzureAI focused on developer experience with power platform - join us at #AiApril https://aka.ms/ai-april.","tags":["low-code-february","30-days-of-lowcode","learn-live","zero-to-hero","ask-the-expert","fusion-teams","power-platform","recap"]},"prevItem":{"title":"24. Power Apps & Automated Testing","permalink":"/hubv2/blog/2023-day24"},"nextItem":{"title":"27. \ud83d\ude80API Management & Power Platform","permalink":"/hubv2/blog/2023-day27"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-26.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"26. Recap - Dev Experience Week\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Let\'s recap Week 4 of #30DaysOfAzureAI focused on developer experience with power platform - join us at #AiApril https://aka.ms/ai-april.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-26.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@nitya\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-26.png\\" />\\n</head>\\n\\nWelcome to `Day 26` of #30DaysOfAzureAI!\\n\\n\\n## What We\'ll Cover\\n * **Look Back**: Recap Developer Experience Week\\n * **Important events**: Powerful Dev Conference, Learn Live and Webinar for Power Platform and GitHub\\n * **Skill Up**: Self-Study Resources & Cloud-Skills Challenge\\n * **Look Ahead**: Continue The Journey!\\n * **Resources**: Explore the [**Low Code February Collection**](https://aka.ms/ai-april/collection)\\n  * **Exercise**: Sign up for your [**Free Developer Plan**](https://aka.ms/ai-april/devplan)\\n\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![Feb26](./../../../static/img/og/30-26.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n\\n\\n## **Look Back**: Week 4 Recap\\n\\nIt\'s hard to believe that our #30DaysOfAzureAI event is coming to an end. Time really flies, doesn\'t it? But what an amazing month it has been! Thanks to the incredible support from each and every one of you, we\'ve welcomed **100,000+ visitors** to our event! We\'re thrilled to provide something useful and valuable to your learning journey and we hope that you\'ve fallen in love with the power of low-code development tools. \\n\\nWe would love to hear your thoughts, and please don\'t hesitate to reach out to us through [**GitHub Discussions**](https://github.com/microsoft/Low-Code/discussions). Your feedback is essential for us to improve and provide even better content and resources in the future. \u2764\ufe0f\\n\\n\\nThroughout the month, we\'ve taken a comprehensive view of Power Platform and its capabilities, from creating custom integrations to building UI and more. And this week, we\'ve focused on a critical topic for Power Platform: developer experience. As you know, it is essential for developers to build and deploy effective solutions, while managing app governance at the same time. \\n\\nLet\'s take a look at what we\'ve covered this week!\\n\\n* [**ALM For Power Platform**](https://microsoft.github.io/Low-Code/blog/2023-day20) - App lifecycle management can be a broad but critical topic for every developer, who is building, maintaining, or even retiring an application. By following best practices for app lifecycle management, developers can ensure that their applications are stable, reliable, and performant, while also meeting the needs of end-users and stakeholders.  In this blog, we introduce you to app lifecycel management, and explore how you can manage the entire app lifecycle with Power Platform. \\n\\n* [**GitHub Actions for Power Platform**](https://microsoft.github.io/Low-Code/blog/2023-day21) -  GitHub actions is a powerful tool that allows you to define workflows in code, and Power Platform provides a range of features and connectors that can be used to integrate with GitHub Actions. In this blog, we walk you through basic GitHub Actions concepts and show you how to connect to a Power Platform environment using GitHub Actions to streamline your development process and automate your workflows. \\n\\n* [**Power Platform and Governance**](https://microsoft.github.io/Low-Code/blog/2023-day23) - Governance is a key concern for many organizations when it comes to using low-code platforms like Power Platform. This blog provided guidance on how to manage your app governance at ease using Managed Environments for Power Platform.\\n\\n* [**Power Apps & Automated Testing**](https://microsoft.github.io/Low-Code/blog/2023-day24) - When we talk about app lifecycle management, automated testing is an important part of it. This blog introduces automated testing, and provides you with an overview of tools available to test your Power Apps. \\n\\n* [**Power Automate, ACS and OpenAI**](https://microsoft.github.io/Low-Code/blog/2023-day22) - Integrating Power Automate with OpenAI and Azure Communication Services can enable you to build powerful and intelligent applications that can understand natural language and respond accordingly. In this blog, we\'ll show you a tutorial step-by-step how to build a SMS conversational bot yourself!\\n\\n## **Important events**\\n\\n* [**Ask The Experts!**](http://localhost:3000/Low-Code/ai-april/Video-Live#ask-the-experts) \\n    1. \ud83c\udf99 [**Mar 09, 9AM PST**](https://aka.ms/ATE0309/RSVP) - Join our upcoming hero Q&A session from the **Low Code February** leadership team, including authors of this #30DaysOfAzureAI series. We will have experts live to answer questions related to the content of the Low Code February events. [**Sign Up**](https://aka.ms/ATE0309/RSVP) if you haven\'t already \u2728\\n\\n    2. \ud83c\udf99 [**Powerful Dev Ask The Expert: On-Demand**](https://aka.ms/ATE0223/RSVP ) - Watch the last session for Q&A from the **Powerful Devs Conference** team. The Powerful Devs Conference is all about showing how code-first developers can integrate with the Power Platform to innovate faster. \\n    ![Week 3 Roadmap](ate_lowcodefeb.png)\\n\\n\\n* [**Learn Live!**](https://aka.ms/ai-april/LearnLive) If you have any questions or concerns about the Microsoft Learn modules or the Cloud Skills Challenge, be sure to tune in to our \\"Learn Live\\" sessions. \\n  1. \ud83c\udf99 [**Feb 27**](https://aka.ms/ai-april/LearnLive) - Manage Microsoft Power Platform deployments. [**Sign Up**](https://aka.ms/ATE0309/RSVP) for our last session during #AiApril! \u2728\\n\\n  ![Week 3 Roadmap](LearnLive.png)\\n\\n* [**Powerful Devs Conference: On-Demand**](https://learn.microsoft.com/events/learn-events/powerful-devs-2023/?WT.mc_id=javascript-82212-ninarasi) The Powerful Devs Conference is a fantastic resource for developers who want to learn more about the Power Platform and how to build applications quickly and easily. The conference features a wide range of sessions and talks from industry experts, Microsoft Cloud Advocates, community leaders, and members of the Power Platform Team. \\n  ![Week 3 Roadmap](Powerful%20Dev%20Social-Simple1.png)\\n\\n* [**Webinar: Power Platform & Azure Deploys with GitHub: On-Demand**](https://mktoevents.com/Microsoft+Event/383091/157-GQE-382) Watch the on-demand webinar, where you\'ll get a chance to explore the powerful capabilities that the Power Platform opens up for GitHub. You\'ll learn about the inner and outer loop functions that are available with Power Platform and GitHub, and see firsthand how to author CI/CD pipelines that can help you streamline your development process.\\n  ![Week 3 Roadmap](webinar.png)\\n\\n## **Skill Up:** For Self-Study\\n\\nCheck out these our self-study materials designed to help you learn at your own convenience:\\n1. [**Sign up**](https://aka.ms/ai-april/devplan) for the **Free** Power Apps Developer Plan to start your low-code advanture!\\n1. [**Resource Collection**](https://aka.ms/ai-april/collection): Bookmark the collection for a 1-stop resource containing all relevant links to documentation and training, as covered in the #30DaysOfAzureAI blogs. \\n2. [**Hands-on Workshops**](https://aka.ms/ai-april/workshop): learn by doing! These labs help you gain hands-on experience from intro to advanced, whereever you\'re in the learning path. \\n3. [**Cloud skills Challenge**](https://aka.ms/ai-april/challenge): gives you a free curated set of learning modules to jumpstart your learning journey into Low Code and Fusion development. \\n\\n## **Look Forward**: Continue The Journey!\\n\\nWe\'re in the last week of #30DaysOfAzureAI, but don\'t worry, we still have some exciting things for you! We\'ve got two ZeroToHero blogs lined up, as well as our [**Feb 27th Learn Live**](https://aka.ms/ai-april/LearnLive) session and [**March 09th Ask the Experts**](https://aka.ms/ATE0309/RSVP) session! If you haven\'t already, make sure to sign up today so you don\'t miss out. And to top it off, we\'ll also have a recap of all the amazing content we\'ve covered this month! \ud83c\udf89\\n\\nDon\'t forget to bookmark the [**#30DaysOfAzureAI**](https://aka.ms/ai-april/blog) page, then follow along to read the daily blog post, ask questions, and connect with other learners. _Get empowered_ with low code development!\\n\\n![Thank You](./../../../static/img/og/30-thankyou.png)"},{"id":"2023-day27","metadata":{"permalink":"/hubv2/blog/2023-day27","source":"@site/blog/2023-lcf/2023-02-27/index.md","title":"27. \ud83d\ude80API Management & Power Platform","description":"Introducing Authorizations in Azure API Management and showcasing its capabilities together with the Microsoft Power Platform. - join us at #30DaysOfAzureAI and #AiApril https://aka.ms/ai-april.","date":"2023-02-27T00:00:00.000Z","formattedDate":"February 27, 2023","tags":[{"label":"low-code-february","permalink":"/hubv2/blog/tags/low-code-february"},{"label":"30-days-of-lowcode","permalink":"/hubv2/blog/tags/30-days-of-lowcode"},{"label":"zero-to-hero","permalink":"/hubv2/blog/tags/zero-to-hero"},{"label":"fusion-teams","permalink":"/hubv2/blog/tags/fusion-teams"},{"label":"power-platform","permalink":"/hubv2/blog/tags/power-platform"},{"label":"API Management","permalink":"/hubv2/blog/tags/api-management"}],"readingTime":7.725,"hasTruncateMarker":false,"authors":[{"name":"Julia Kasper","title":"Program Manager II","url":"https://github.com/juliajuju93","imageURL":"https://github.com/juliajuju93.png","key":"julia"}],"frontMatter":{"slug":"2023-day27","title":"27. \ud83d\ude80API Management & Power Platform","authors":["julia"],"draft":false,"hide_table_of_contents":false,"toc_min_heading_level":2,"toc_max_heading_level":3,"keywords":["power-platform","custom-connector","api-management","apim","authn","authentication","authorization"],"image":"https://microsoft.github.io/Low-Code/img/og/30-27.png","description":"Introducing Authorizations in Azure API Management and showcasing its capabilities together with the Microsoft Power Platform. - join us at #30DaysOfAzureAI and #AiApril https://aka.ms/ai-april.","tags":["low-code-february","30-days-of-lowcode","zero-to-hero","fusion-teams","power-platform","API Management"]},"prevItem":{"title":"26. Recap - Dev Experience Week \u2728","permalink":"/hubv2/blog/2023-day26"}},"content":"<head>\\n  <meta name=\\"twitter:url\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-27.png\\" />\\n  <meta name=\\"twitter:title\\" \\n    content=\\"27. API Managemetn and Power Platform\\" />\\n  <meta name=\\"twitter:description\\" \\n    content=\\"Introducing Authorizations in Azure API Management and showcasing its capabilities together with the Microsoft Power Platform. - join us at #30DaysOfAzureAI and #AiApril https://aka.ms/ai-april.\\" />\\n  <meta name=\\"twitter:image\\" \\n    content=\\"https://microsoft.github.io/Low-Code/img/og/30-27.png\\" />\\n  <meta name=\\"twitter:card\\" content=\\"summary_large_image\\" />\\n  <meta name=\\"twitter:creator\\" \\n    content=\\"@Jujujuliakasper\\" />\\n  <meta name=\\"twitter:site\\" content=\\"@AzureAdvocates\\" /> \\n  <link rel=\\"canonical\\" \\n    href=\\"https://microsoft.github.io/Low-Code/img/og/30-27.png\\" />\\n</head>\\n\\nWelcome to `Day 27` of #30DaysOfAzureAI!\\n\\nIntroducing [Authorizations](https://learn.microsoft.com/en-us/azure/api-management/authorizations-overview?WT.mc_id=javascript-82212-ninarasi) in Azure API Management and showcasing its capabilities together with the Microsoft Power Platform. Last time, we talked about how we can provide extra [security to our web APIs using Azure API Management](https://microsoft.github.io/Low-Code/blog/2023-day10). In this section, we will talk about the [Authorizations](https://learn.microsoft.com/en-us/azure/api-management/authorizations-overview?WT.mc_id=javascript-82212-ninarasi) feature in Azure API Management and how this can elevate your low-code journey with web APIs.\\n\\n## What We\'ll Cover\\n\\n * [What is API Management Authorizations](#what-is-api-management-authorizations)\\n * [Scenario - Power Apps integration with GitHub and API Management Authorizations](#scenario---power-apps-integration-with-github-and-api-management-authorizations)\\n * [Scenario Overview](#scenario-overview)\\n * [Prerequisites](#prerequisites)\\n * [Step 1: Register an application in GitHub for your organization](#step-1-register-an-application-in-github-for-your-organization)\\n * [Step 2: Configure an authorization in API Management](#step-2-configure-an-authorization-in-api-management)\\n * [Step 3: Create an API in API Management and configure a policy](#step-3-create-an-api-in-api-management-and-configure-a-policy)\\n * [Step 4: Create a custom connector for the Microsoft Power Platform using API Management](#step-4-create-a-custom-connector-for-the-microsoft-power-platform-using-api-management)\\n * [Step 5: Call your web API via your Power App](#step-5-call-your-web-api-via-your-power-app)\\n\\n\x3c!-- FIXME: banner image --\x3e\\n![feb27](./../../../static/img/og/30-27.png)\\n\\n\\n\x3c!-- ************************************* --\x3e\\n\x3c!--  AUTHORS: ONLY UPDATE BELOW THIS LINE --\x3e\\n\x3c!-- ************************************* --\x3e\\n\\n## What is API Management Authorizations\\n\\n[API Management authorizations](https://learn.microsoft.com/en-us/azure/api-management/authorizations-overview) allows you to delegate authentication to API Management to let it authenticate against a given backend service or a given SaaS platform. It greatly simplifies the process for authenticating and authorizing users across these services and reduces development costs in ramping up, implementing and maintaining security features with service integrations. It lets you configure OAuth, Consent, Acquire Tokens, Cache Tokens and refreshes tokens for multiple services without writing a single line of code. API Management does all the heavy lifting for you, while you can focus on the application/domain logic.\\n\\n> *Note: It differs from managed identity in that it spans multiple identity providers (IDP), as it is not tight to Azure Active Directory. It also leverages OAuth flows, such as the Authorization code flow, while managed identities stick to the Client Credentials Grant.*\\n\\n## Scenario - Power Apps integration with GitHub and API Management Authorizations\\n\\n### Scenario Overview\\n\\nImagine having a GitHub organization with multiple [team discussions](https://docs.github.com/en/organizations/collaborating-with-your-team/about-team-discussions). In one of your team discussions, you want to collect issues from users via comments. Now, to post a GitHub comment, every user requires a GitHub account and needs to understand where to find the relevant team discussion.\\n\\n> Let\'s create a Power App that uses a custom connector to call the right GitHub API to post a comment about an issues to a team\'s discussion.\\n\\nNote: Microsoft Power Platform offers wide varity of pre-installed connectors, one of them for [GitHub](https://learn.microsoft.com/en-us/connectors/github/). For our scenarios however, this connector doesn\'t provide us with the right capability. Creating a custom connector using Azure API Management is an easy and secure way to expose your microservices/APIs directly. This way, you can expand the possibilities with the Microsoft Power Platform and adapt it according to your organization\'s use cases.\\n\\n### Prerequisites\\n- A GitHub account is required.\\n- A team discussion in your GitHub organization. Follow [Creating a team discussion](https://docs.github.com/en/organizations/collaborating-with-your-team/creating-a-team-discussion) for more information.\\n- A running API Management instance. Complete the following\xa0[Quickstart: Create a new Azure API Management service instance by using the Azure portal](https://learn.microsoft.com/en-us/azure/api-management/get-started-create-service-instance).\\n- Enable [managed service identiy](https://learn.microsoft.com/en-us/azure/api-management/api-management-howto-use-managed-service-identity) for API Management in the API Management instance.\\n- Make sure you have a Power Apps or Power Automate [environment](https://learn.microsoft.com/en-us/power-apps/powerapps-overview#power-apps-for-developers).\\n\\n### Step 1: Register an application in GitHub for your organization\\n\\n1. Sign in to GitHub.\\n2. In your account profile, go to **Your organizations** and select the organization that the scenario is for.\\n\\n  ![feb27](./media/organization.png)\\n\\n3. In your organization\'s profile, go to\xa0**Settings > Developer Settings > OAuth Apps > New OAuth App**\\n - Enter *teamdiscussion* as your **Application name**\\n - *https://portal.azure.com* as your **Homepage URL**\\n - Optionally, add an\xa0application description.\\n - In\xa0**Authorization callback URL**\xa0(the redirect URL), enter *https://authorization-manager.consent.azure-apim.net/redirect/apim/{YOUR-APIM-SERVICENAME}* (substituting the API Management service name that is used).\\n\\n4. Select\xa0**Register application**.\\n5. In the\xa0General\xa0page, copy the\xa0**Client ID**, which you\'ll use in a later step.\\n6. Select\xa0**Generate a new client secret**. Copy the secret, which won\'t be displayed again, and which you\'ll use in a later step.\\n\\n  ![feb27](./media/teamdiscussion.png)\\n\\n### Step 2: Configure an authorization in API Management\\n\\n1. Sign into Azure portal and go to your API Management instance.\\n2. In the left menu, select\xa0**Authorizations\xa0>\xa0+ Create**.\\n\\n  ![feb27](./media/authportal.png)\\n\\n3. In the\xa0**Create authorization\xa0window**, enter the following settings, and select\xa0**Create**:\\n\\n  | Settings  | Value |\\n  | ------------- | ------------- |\\n  | Provider name  | *github-discussion*  |\\n  | Identity provider  | Select\xa0*GitHub*  |\\n  | Grant type  | Select\xa0*Authorization code*  |\\n  | Client id  | Paste the value you copied earlier from the app registration  |\\n  | Client secret  | Paste the value you copied earlier from the app registration  |\\n  | Scope  | *write:discussion*  |\\n  | Authorization name  | *auth-discussion*  |\\n\\n4. After the authorization provider and authorization are created, select\xa0**Next**.\\n5. On the\xa0**Login\xa0tab**, select\xa0**Login with GitHub**. Before the authorization will work, it needs to be authorized at GitHub.\\n6. Sign in to your GitHub account if you\'re prompted to do so. If prompted during redirection, select\xa0**Allow access**. \\n  ![feb27](./media/allowaccess.png)\\n\\n7. After authorization, the browser is redirected to API Management and the window is closed. In API Management, select\xa0**Next**.\\n8. On the\xa0Access policy\xa0page, create an access policy so that API Management has access to use the authorization. *Note: Ensure that a [managed identity](https://learn.microsoft.com/en-us/azure/api-management/api-management-howto-use-managed-service-identity#create-a-system-assigned-managed-identity) is configured for API Management.*\\n9. Select\xa0**Managed identity\xa0+ Add members**\xa0and then select your subscription.\\n10. In\xa0**Select managed identity**, select\xa0**API Management service**, and then select the API Management instance that is used. Click\xa0**Select**\xa0and then\xa0**Complete**.\\n\\n  ![feb27](./media/accesspolicy.png)\\n\\n### Step 3: Create an API in API Management and configure a policy\\n\\n1. Sign into Azure portal and go to your API Management instance.\\n2. In the left menu, select\xa0**APIs > + Add API** and select **HTTP**.\\n\\n  ![feb27](./media/addapi.png)\\n\\n3. Enter the following settings. Then select\xa0**Create**.\\n\\n  | Settings  | Value |\\n  | ------------- | ------------- |\\n  | Display name  | *githubdiscussion*  |\\n  | Name  | *githubdiscussion*  |\\n  | Web service URL  | *https://api.github.com*  |\\n  | API URL suffix  | *githubdiscussion*  |\\n\\n4. Navigate to the newly created API and select\xa0**Add Operation**. Enter the following settings and select\xa0**Save**.\\n\\n  | Settings  | Value |\\n  | ------------- | ------------- |\\n  | Display name  | *POSTdiscussioncomment*  |\\n  | URL for **POST**  | */orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments*  |\\n\\nPlease find here an example of a POST URL: \\n```\\n/orgs/AuthorizationsOrganization/teams/AuthorizationEngineering/discussions/1/comments\\n```\\n![feb27](./media/addoperation.png)\\n\\n5. Next, we need to add a **Request Body** to your API. For this, within your Frontend section scroll down and select **Request**.\\n\\n  ![feb27](./media/request.png)\\n\\n6. Now **Add representation** and insert the following information:\\n\\n  | Representations  |  |\\n  | ------------- | ------------- |\\n  | CONTENT TYPE  | application/json  |\\n  | DEFINITION  | {\\"body\\":\\"This is a test issue\\"}  |\\n\\n  ![feb27](./media/representation.png)\\n\\n7. Select **All operations** and in the\xa0**Inbound processing**\xa0section, select the `(</>)` (code editor) icon.\\n8. Copy the following, and paste in the policy editor. Make sure the provider-id and authorization-id correspond to the names in our previous step. Select\xa0**Save**.\\n\\nInbound policy:\\n```\\n<policies>\\n    <inbound>\\n        <base />\\n        <get-authorization-context provider-id=\\"github-discussion\\" authorization-id=\\"auth-discussion\\" context-variable-name=\\"auth-context\\" identity-type=\\"managed\\" ignore-error=\\"false\\" />\\n        <set-header name=\\"Authorization\\" exists-action=\\"override\\">\\n            <value>@(\\"Bearer \\" + ((Authorization)context.Variables.GetValueOrDefault(\\"auth-context\\"))?.AccessToken)</value>\\n        </set-header>\\n        <set-header name=\\"Accept\\" exists-action=\\"override\\">\\n            <value>application/vnd.github+json</value>\\n        </set-header>\\n        <set-header name=\\"X-GitHub-Api-Version\\" exists-action=\\"override\\">\\n            <value>2022-11-28</value>\\n        </set-header>\\n        <set-header name=\\"User-Agent\\" exists-action=\\"override\\">\\n            <value>API Management</value>\\n        </set-header>\\n    </inbound>\\n    <backend>\\n        <base />\\n    </backend>\\n    <outbound>\\n        <base />\\n    </outbound>\\n    <on-error>\\n        <base />\\n    </on-error>\\n</policies>\\n```\\n> Note: The policy to be used consists of five parts.\\n    1. Fetch an authorization token.\\n    2. Create an HTTP header with the fetched authorization token.\\n    3. Create an HTTP header with an accept header [(API requirement)](https://docs.github.com/en/rest/teams/discussion-comments?apiVersion=2022-11-28#create-a-discussion-comment).\\n    4. Create an HTTP header with a X-GitHub-Api-Version header [(API requirement)](https://docs.github.com/en/rest/teams/discussion-comments?apiVersion=2022-11-28#create-a-discussion-comment).\\n    5. Create an HTTP header with a\xa0User-Agent\xa0header [(GitHub requirement)](https://docs.github.com/rest/overview/resources-in-the-rest-api#user-agent-required).\\n\\n9. Test the API in Azure API Management:\\n  - Select your operation.\\n  - Go to the\xa0Test\xa0tab.\\n  - Select\xa0Send.\\n\\nYou should get a **HTTP/1.1 201 Created** response and a comment should have been posted in your team\'s discussion.\\n\\n  ![feb27](./media/test.png)\\n\\n### Step 4: Create a custom connector for the Microsoft Power Platform using API Management\\n\\nAs soon as your API was tested successfully, you are now able to export your web API to the Microsoft Power Platform. Please find a detailed guide here: [Export APIs from Azure API Management to the Power Platform](https://learn.microsoft.com/en-us/azure/api-management/export-api-power-platform).\\nIf you want to add additional security to your API, check out our blog post on [10. Providing Power Platform custom connector with additional security via Azure API Management](https://microsoft.com)\\n\\n  ![feb27](./media/createpower.png)\\n\\n### Step 5: Call your web API via your Power App\\n\\nNext, we want to make an API call within your Power App. For this, we created a very simple Power App as our front-end with a **Send** Button and a **TextInput** field.\\n\\n1. In your Power App, add your custom connector to your Power App via the tab **data > + Add data**.\\n\\n  ![feb27](./media/customconnectorpower.png)\\n\\n2. Next, we modify our **Send** Button with the following PowerFX formular:\\n\\n```\\ngithubdiscussion.postdiscussioncomment({body:TextInputFeedback.Text}); Reset(TextInputFeedback); Notify(\\"Success: 201 Created\\",NotificationType.Success)\\n```\\n\\n  ![powerappsinput](media/powerappsinput.png)\\n\\n3. Now, you are able to test your Power App and create a new comment in your GitHub team\'s discussion.\\n\\n\\n>Enjoy this fun little tutorial and let us know what you think! [@jukasper](https://www.linkedin.com/in/jukasper/)"}]}')}}]);